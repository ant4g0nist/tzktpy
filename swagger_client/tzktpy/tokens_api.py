# coding: utf-8

"""
    TzKT API

    # Introduction  TzKT Explorer provides free REST API and WebSocket API for accessing detailed Tezos blockchain data and helps developers build more services and applications on top of Tezos. TzKT is an open-source project, so you can easily clone and build it and use it as a self-hosted service to avoid any risks of depending on third-party services.  TzKT API is available for the following Tezos networks with the following base URLs:  - Mainnet: `https://api.tzkt.io/` or `https://api.mainnet.tzkt.io/` ([view docs](https://api.tzkt.io))  - Hangzhounet: `https://api.hangzhounet.tzkt.io/` ([view docs](https://api.hangzhounet.tzkt.io)) - Ithacanet: `https://api.ithacanet.tzkt.io/` ([view docs](https://api.ithacanet.tzkt.io))  We also provide a staging environment for testing newest features and pre-updating client applications before deploying to production:  - Mainnet staging: `https://staging.api.tzkt.io/` or `https://staging.api.mainnet.tzkt.io/` ([view docs](https://staging.api.tzkt.io))  Feel free to contact us if you have any questions or feature requests. Your feedback really helps us make TzKT better!  - Discord: https://discord.gg/aG8XKuwsQd - Telegram: https://t.me/baking_bad_chat - Slack: https://tezos-dev.slack.com/archives/CV5NX7F2L - Twitter: https://twitter.com/TezosBakingBad - Email: hello@baking-bad.org  And don't forget to star TzKT project [on GitHub](https://github.com/baking-bad/tzkt) ;)  # Terms of Use  TzKT API is free for everyone and for both commercial and non-commercial usage.  If your application or service uses the TzKT API in any forms: directly on frontend or indirectly on backend, you must mention that fact on your website or application by placing the label **\"Powered by TzKT API\"** or **\"Built with TzKT API\"** with a direct link to [tzkt.io](https://tzkt.io).   # Rate Limits  There will be no rate limits as long as our servers can handle the load without additional infrastructure costs. However, any apparent abuse will be prevented by setting targeted rate limits.  Check out [Tezos Explorer API Best Practices](https://baking-bad.org/blog/tag/TzKT/) and in particular [how to optimize requests count](https://baking-bad.org/blog/2020/07/29/tezos-explorer-api-tzkt-how-often-to-make-requests/).  ---   # noqa: E501

    OpenAPI spec version: v1.8.3
    Contact: hello@baking-bad.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TokensApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def tokens_get_token_balances(self, **kwargs):  # noqa: E501
        """Get token balances  # noqa: E501

        Returns a list of token balances.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tokens_get_token_balances(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Id6 id: Filter by internal TzKT id.   Click on the parameter to expand more details.
        :param Account3 account: Filter by account address.   Click on the parameter to expand more details.
        :param TokenId1 token_id: Filter by internal TzKT id. Note, this is not the same as `tokenId`.   Click on the parameter to expand more details.
        :param TokenContract1 token_contract: Filter by contract address.   Click on the parameter to expand more details.
        :param TokenTokenId1 token_token_id: Filter by tokenId (for FA1.2 tokens tokenId is always `\"0\"`).   Click on the parameter to expand more details.
        :param TokenStandard1 token_standard: Filter by token standard (`fa1.2` or `fa2`).   Click on the parameter to expand more details.
        :param TokenMetadata1 token_metadata: Filter by metadata. Note, this parameter supports the following format: `token.metadata{.path?}{.mode?}=...`, so you can specify a path to a particular field to filter by, for example: `?token.metadata.symbol.in=kUSD,uUSD`.   Click on the parameter to expand more details.
        :param bool token_has_filters:
        :param Balance7 balance: Filter by balance.   Click on the parameter to expand more details.
        :param FirstLevel3 first_level: Filter by level of the block where the balance was first changed.   Click on the parameter to expand more details.
        :param FirstTime3 first_time: Filter by timestamp (ISO 8601) of the block where the balance was first changed.   Click on the parameter to expand more details.
        :param LastLevel6 last_level: Filter by level of the block where the balance was last seen.   Click on the parameter to expand more details.
        :param LastTime3 last_time: Filter by timestamp (ISO 8601) of the block where the balance was last changed.   Click on the parameter to expand more details.
        :param Sort51 sort: Sorts items (asc or desc) by the specified field. You can see what fields can be used for sorting in the response description, below.   Click on the parameter to expand more details.
        :param Offset49 offset: Specifies which or how many items should be skipped.   Click on the parameter to expand more details.
        :param int limit: Maximum number of items to return.
        :param Select45 select: Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields. This parameter accepts values of the following format: `{field}{path?}{as alias?}`, so you can do deep selection (for example, `?select=balance,token.metadata.symbol as token,...`).   Note, if you select just one field, the response will be flatten into a simple array of values.   Click on the parameter to expand the details.
        :return: list[TokenBalance]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tokens_get_token_balances_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.tokens_get_token_balances_with_http_info(**kwargs)  # noqa: E501
            return data

    def tokens_get_token_balances_with_http_info(self, **kwargs):  # noqa: E501
        """Get token balances  # noqa: E501

        Returns a list of token balances.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tokens_get_token_balances_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Id6 id: Filter by internal TzKT id.   Click on the parameter to expand more details.
        :param Account3 account: Filter by account address.   Click on the parameter to expand more details.
        :param TokenId1 token_id: Filter by internal TzKT id. Note, this is not the same as `tokenId`.   Click on the parameter to expand more details.
        :param TokenContract1 token_contract: Filter by contract address.   Click on the parameter to expand more details.
        :param TokenTokenId1 token_token_id: Filter by tokenId (for FA1.2 tokens tokenId is always `\"0\"`).   Click on the parameter to expand more details.
        :param TokenStandard1 token_standard: Filter by token standard (`fa1.2` or `fa2`).   Click on the parameter to expand more details.
        :param TokenMetadata1 token_metadata: Filter by metadata. Note, this parameter supports the following format: `token.metadata{.path?}{.mode?}=...`, so you can specify a path to a particular field to filter by, for example: `?token.metadata.symbol.in=kUSD,uUSD`.   Click on the parameter to expand more details.
        :param bool token_has_filters:
        :param Balance7 balance: Filter by balance.   Click on the parameter to expand more details.
        :param FirstLevel3 first_level: Filter by level of the block where the balance was first changed.   Click on the parameter to expand more details.
        :param FirstTime3 first_time: Filter by timestamp (ISO 8601) of the block where the balance was first changed.   Click on the parameter to expand more details.
        :param LastLevel6 last_level: Filter by level of the block where the balance was last seen.   Click on the parameter to expand more details.
        :param LastTime3 last_time: Filter by timestamp (ISO 8601) of the block where the balance was last changed.   Click on the parameter to expand more details.
        :param Sort51 sort: Sorts items (asc or desc) by the specified field. You can see what fields can be used for sorting in the response description, below.   Click on the parameter to expand more details.
        :param Offset49 offset: Specifies which or how many items should be skipped.   Click on the parameter to expand more details.
        :param int limit: Maximum number of items to return.
        :param Select45 select: Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields. This parameter accepts values of the following format: `{field}{path?}{as alias?}`, so you can do deep selection (for example, `?select=balance,token.metadata.symbol as token,...`).   Note, if you select just one field, the response will be flatten into a simple array of values.   Click on the parameter to expand the details.
        :return: list[TokenBalance]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'account', 'token_id', 'token_contract', 'token_token_id', 'token_standard', 'token_metadata', 'token_has_filters', 'balance', 'first_level', 'first_time', 'last_level', 'last_time', 'sort', 'offset', 'limit', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tokens_get_token_balances" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'account' in params:
            query_params.append(('account', params['account']))  # noqa: E501
        if 'token_id' in params:
            query_params.append(('token.id', params['token_id']))  # noqa: E501
        if 'token_contract' in params:
            query_params.append(('token.contract', params['token_contract']))  # noqa: E501
        if 'token_token_id' in params:
            query_params.append(('token.tokenId', params['token_token_id']))  # noqa: E501
        if 'token_standard' in params:
            query_params.append(('token.standard', params['token_standard']))  # noqa: E501
        if 'token_metadata' in params:
            query_params.append(('token.metadata', params['token_metadata']))  # noqa: E501
        if 'token_has_filters' in params:
            query_params.append(('token.HasFilters', params['token_has_filters']))  # noqa: E501
        if 'balance' in params:
            query_params.append(('balance', params['balance']))  # noqa: E501
        if 'first_level' in params:
            query_params.append(('firstLevel', params['first_level']))  # noqa: E501
        if 'first_time' in params:
            query_params.append(('firstTime', params['first_time']))  # noqa: E501
        if 'last_level' in params:
            query_params.append(('lastLevel', params['last_level']))  # noqa: E501
        if 'last_time' in params:
            query_params.append(('lastTime', params['last_time']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/tokens/balances', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TokenBalance]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tokens_get_token_balances2(self, level, **kwargs):  # noqa: E501
        """Get historical token balances  # noqa: E501

        Returns a list of token balances at the end of the specified block. Note, this endpoint is quite heavy, therefore at least one of the filters (`account`, `token.id`, `token.contract` with `token.tokenId`) must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tokens_get_token_balances2(level, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int level: Level of the block at the end of which historical balances must be calculated (required)
        :param Account4 account: Filter by account address.   Click on the parameter to expand more details.
        :param TokenId4 token_id: Filter by internal TzKT id. Note, this is not the same as `tokenId`.   Click on the parameter to expand more details.
        :param TokenContract4 token_contract: Filter by contract address.   Click on the parameter to expand more details.
        :param TokenTokenId4 token_token_id: Filter by tokenId (for FA1.2 tokens tokenId is always `\"0\"`).   Click on the parameter to expand more details.
        :param TokenStandard4 token_standard: Filter by token standard (`fa1.2` or `fa2`).   Click on the parameter to expand more details.
        :param TokenMetadata4 token_metadata: Filter by metadata. Note, this parameter supports the following format: `token.metadata{.path?}{.mode?}=...`, so you can specify a path to a particular field to filter by, for example: `?token.metadata.symbol.in=kUSD,uUSD`.   Click on the parameter to expand more details.
        :param bool token_has_filters:
        :param Balance8 balance: Filter by balance.   Click on the parameter to expand more details.
        :param Sort53 sort: Sorts items (asc or desc) by the specified field. You can see what fields can be used for sorting in the response description, below.   Click on the parameter to expand more details.
        :param Offset51 offset: Specifies which or how many items should be skipped.   Click on the parameter to expand more details.
        :param int limit: Maximum number of items to return.
        :param Select47 select: Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields. This parameter accepts values of the following format: `{field}{path?}{as alias?}`, so you can do deep selection (for example, `?select=balance,token.metadata.symbol as token,...`).   Note, if you select just one field, the response will be flatten into a simple array of values.   Click on the parameter to expand the details.
        :return: list[TokenBalanceShort]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tokens_get_token_balances2_with_http_info(level, **kwargs)  # noqa: E501
        else:
            (data) = self.tokens_get_token_balances2_with_http_info(level, **kwargs)  # noqa: E501
            return data

    def tokens_get_token_balances2_with_http_info(self, level, **kwargs):  # noqa: E501
        """Get historical token balances  # noqa: E501

        Returns a list of token balances at the end of the specified block. Note, this endpoint is quite heavy, therefore at least one of the filters (`account`, `token.id`, `token.contract` with `token.tokenId`) must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tokens_get_token_balances2_with_http_info(level, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int level: Level of the block at the end of which historical balances must be calculated (required)
        :param Account4 account: Filter by account address.   Click on the parameter to expand more details.
        :param TokenId4 token_id: Filter by internal TzKT id. Note, this is not the same as `tokenId`.   Click on the parameter to expand more details.
        :param TokenContract4 token_contract: Filter by contract address.   Click on the parameter to expand more details.
        :param TokenTokenId4 token_token_id: Filter by tokenId (for FA1.2 tokens tokenId is always `\"0\"`).   Click on the parameter to expand more details.
        :param TokenStandard4 token_standard: Filter by token standard (`fa1.2` or `fa2`).   Click on the parameter to expand more details.
        :param TokenMetadata4 token_metadata: Filter by metadata. Note, this parameter supports the following format: `token.metadata{.path?}{.mode?}=...`, so you can specify a path to a particular field to filter by, for example: `?token.metadata.symbol.in=kUSD,uUSD`.   Click on the parameter to expand more details.
        :param bool token_has_filters:
        :param Balance8 balance: Filter by balance.   Click on the parameter to expand more details.
        :param Sort53 sort: Sorts items (asc or desc) by the specified field. You can see what fields can be used for sorting in the response description, below.   Click on the parameter to expand more details.
        :param Offset51 offset: Specifies which or how many items should be skipped.   Click on the parameter to expand more details.
        :param int limit: Maximum number of items to return.
        :param Select47 select: Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields. This parameter accepts values of the following format: `{field}{path?}{as alias?}`, so you can do deep selection (for example, `?select=balance,token.metadata.symbol as token,...`).   Note, if you select just one field, the response will be flatten into a simple array of values.   Click on the parameter to expand the details.
        :return: list[TokenBalanceShort]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['level', 'account', 'token_id', 'token_contract', 'token_token_id', 'token_standard', 'token_metadata', 'token_has_filters', 'balance', 'sort', 'offset', 'limit', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tokens_get_token_balances2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'level' is set
        if ('level' not in params or
                params['level'] is None):
            raise ValueError("Missing the required parameter `level` when calling `tokens_get_token_balances2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'level' in params:
            path_params['level'] = params['level']  # noqa: E501

        query_params = []
        if 'account' in params:
            query_params.append(('account', params['account']))  # noqa: E501
        if 'token_id' in params:
            query_params.append(('token.id', params['token_id']))  # noqa: E501
        if 'token_contract' in params:
            query_params.append(('token.contract', params['token_contract']))  # noqa: E501
        if 'token_token_id' in params:
            query_params.append(('token.tokenId', params['token_token_id']))  # noqa: E501
        if 'token_standard' in params:
            query_params.append(('token.standard', params['token_standard']))  # noqa: E501
        if 'token_metadata' in params:
            query_params.append(('token.metadata', params['token_metadata']))  # noqa: E501
        if 'token_has_filters' in params:
            query_params.append(('token.HasFilters', params['token_has_filters']))  # noqa: E501
        if 'balance' in params:
            query_params.append(('balance', params['balance']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/tokens/historical_balances/{level}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TokenBalanceShort]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tokens_get_token_balances_count(self, **kwargs):  # noqa: E501
        """Get token balances count  # noqa: E501

        Returns a total number of token balances.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tokens_get_token_balances_count(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Id5 id: Filter by internal TzKT id.   Click on the parameter to expand more details.
        :param Account2 account: Filter by account address.   Click on the parameter to expand more details.
        :param TokenId token_id: Filter by internal TzKT id. Note, this is not the same as `tokenId`.   Click on the parameter to expand more details.
        :param TokenContract token_contract: Filter by contract address.   Click on the parameter to expand more details.
        :param TokenTokenId token_token_id: Filter by tokenId (for FA1.2 tokens tokenId is always `\"0\"`).   Click on the parameter to expand more details.
        :param TokenStandard token_standard: Filter by token standard (`fa1.2` or `fa2`).   Click on the parameter to expand more details.
        :param TokenMetadata token_metadata: Filter by metadata. Note, this parameter supports the following format: `token.metadata{.path?}{.mode?}=...`, so you can specify a path to a particular field to filter by, for example: `?token.metadata.symbol.in=kUSD,uUSD`.   Click on the parameter to expand more details.
        :param bool token_has_filters:
        :param Balance6 balance: Filter by balance.   Click on the parameter to expand more details.
        :param FirstLevel2 first_level: Filter by level of the block where the balance was first changed.   Click on the parameter to expand more details.
        :param FirstTime2 first_time: Filter by timestamp (ISO 8601) of the block where the balance was first changed.   Click on the parameter to expand more details.
        :param LastLevel5 last_level: Filter by level of the block where the balance was last seen.   Click on the parameter to expand more details.
        :param LastTime2 last_time: Filter by timestamp (ISO 8601) of the block where the balance was last changed.   Click on the parameter to expand more details.
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tokens_get_token_balances_count_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.tokens_get_token_balances_count_with_http_info(**kwargs)  # noqa: E501
            return data

    def tokens_get_token_balances_count_with_http_info(self, **kwargs):  # noqa: E501
        """Get token balances count  # noqa: E501

        Returns a total number of token balances.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tokens_get_token_balances_count_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Id5 id: Filter by internal TzKT id.   Click on the parameter to expand more details.
        :param Account2 account: Filter by account address.   Click on the parameter to expand more details.
        :param TokenId token_id: Filter by internal TzKT id. Note, this is not the same as `tokenId`.   Click on the parameter to expand more details.
        :param TokenContract token_contract: Filter by contract address.   Click on the parameter to expand more details.
        :param TokenTokenId token_token_id: Filter by tokenId (for FA1.2 tokens tokenId is always `\"0\"`).   Click on the parameter to expand more details.
        :param TokenStandard token_standard: Filter by token standard (`fa1.2` or `fa2`).   Click on the parameter to expand more details.
        :param TokenMetadata token_metadata: Filter by metadata. Note, this parameter supports the following format: `token.metadata{.path?}{.mode?}=...`, so you can specify a path to a particular field to filter by, for example: `?token.metadata.symbol.in=kUSD,uUSD`.   Click on the parameter to expand more details.
        :param bool token_has_filters:
        :param Balance6 balance: Filter by balance.   Click on the parameter to expand more details.
        :param FirstLevel2 first_level: Filter by level of the block where the balance was first changed.   Click on the parameter to expand more details.
        :param FirstTime2 first_time: Filter by timestamp (ISO 8601) of the block where the balance was first changed.   Click on the parameter to expand more details.
        :param LastLevel5 last_level: Filter by level of the block where the balance was last seen.   Click on the parameter to expand more details.
        :param LastTime2 last_time: Filter by timestamp (ISO 8601) of the block where the balance was last changed.   Click on the parameter to expand more details.
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'account', 'token_id', 'token_contract', 'token_token_id', 'token_standard', 'token_metadata', 'token_has_filters', 'balance', 'first_level', 'first_time', 'last_level', 'last_time']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tokens_get_token_balances_count" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'account' in params:
            query_params.append(('account', params['account']))  # noqa: E501
        if 'token_id' in params:
            query_params.append(('token.id', params['token_id']))  # noqa: E501
        if 'token_contract' in params:
            query_params.append(('token.contract', params['token_contract']))  # noqa: E501
        if 'token_token_id' in params:
            query_params.append(('token.tokenId', params['token_token_id']))  # noqa: E501
        if 'token_standard' in params:
            query_params.append(('token.standard', params['token_standard']))  # noqa: E501
        if 'token_metadata' in params:
            query_params.append(('token.metadata', params['token_metadata']))  # noqa: E501
        if 'token_has_filters' in params:
            query_params.append(('token.HasFilters', params['token_has_filters']))  # noqa: E501
        if 'balance' in params:
            query_params.append(('balance', params['balance']))  # noqa: E501
        if 'first_level' in params:
            query_params.append(('firstLevel', params['first_level']))  # noqa: E501
        if 'first_time' in params:
            query_params.append(('firstTime', params['first_time']))  # noqa: E501
        if 'last_level' in params:
            query_params.append(('lastLevel', params['last_level']))  # noqa: E501
        if 'last_time' in params:
            query_params.append(('lastTime', params['last_time']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/tokens/balances/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tokens_get_token_transfers(self, **kwargs):  # noqa: E501
        """Get token transfers  # noqa: E501

        Returns a list of token transfers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tokens_get_token_transfers(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Id8 id: Filter by internal TzKT id.   Click on the parameter to expand more details.
        :param Level46 level: Filter by level of the block where the transfer was made.   Click on the parameter to expand more details.
        :param Timestamp44 timestamp: Filter by timestamp (ISO 8601) of the block where the transfer was made.   Click on the parameter to expand more details.
        :param TokenId3 token_id: Filter by internal TzKT id. Note, this is not the same as `tokenId`.   Click on the parameter to expand more details.
        :param TokenContract3 token_contract: Filter by contract address.   Click on the parameter to expand more details.
        :param TokenTokenId3 token_token_id: Filter by tokenId (for FA1.2 tokens tokenId is always `\"0\"`).   Click on the parameter to expand more details.
        :param TokenStandard3 token_standard: Filter by token standard (`fa1.2` or `fa2`).   Click on the parameter to expand more details.
        :param TokenMetadata3 token_metadata: Filter by metadata. Note, this parameter supports the following format: `token.metadata{.path?}{.mode?}=...`, so you can specify a path to a particular field to filter by, for example: `?token.metadata.symbol.in=kUSD,uUSD`.   Click on the parameter to expand more details.
        :param bool token_has_filters:
        :param str anyof: Filter by any of the specified fields (`from` or `to`). Example: `anyof.from.to=tz1...` will return transfers where `from` OR `to` is equal to the specified value. This parameter is useful when you need to get both incoming and outgoing transfers of the account at once.   Click on the parameter to expand more details.
        :param From1 _from: Filter by sender account address.   Click on the parameter to expand more details.
        :param To1 to: Filter by target account address.   Click on the parameter to expand more details.
        :param Amount2 amount: Filter by amount.   Click on the parameter to expand more details.
        :param TransactionId1 transaction_id: Filter by id of the transaction, caused the token transfer.   Click on the parameter to expand more details.
        :param OriginationId1 origination_id: Filter by id of the origination, caused the token transfer.   Click on the parameter to expand more details.
        :param MigrationId1 migration_id: Filter by id of the migration, caused the token transfer.   Click on the parameter to expand more details.
        :param Sort52 sort: Sorts items (asc or desc) by the specified field. You can see what fields can be used for sorting in the response description, below.   Click on the parameter to expand more details.
        :param Offset50 offset: Specifies which or how many items should be skipped.   Click on the parameter to expand more details.
        :param int limit: Maximum number of items to return.
        :param Select46 select: Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields. This parameter accepts values of the following format: `{field}{path?}{as alias?}`, so you can do deep selection (for example, `?select=balance,token.metadata.symbol as token,...`).   Note, if you select just one field, the response will be flatten into a simple array of values.   Click on the parameter to expand the details.
        :return: list[TokenTransfer]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tokens_get_token_transfers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.tokens_get_token_transfers_with_http_info(**kwargs)  # noqa: E501
            return data

    def tokens_get_token_transfers_with_http_info(self, **kwargs):  # noqa: E501
        """Get token transfers  # noqa: E501

        Returns a list of token transfers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tokens_get_token_transfers_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Id8 id: Filter by internal TzKT id.   Click on the parameter to expand more details.
        :param Level46 level: Filter by level of the block where the transfer was made.   Click on the parameter to expand more details.
        :param Timestamp44 timestamp: Filter by timestamp (ISO 8601) of the block where the transfer was made.   Click on the parameter to expand more details.
        :param TokenId3 token_id: Filter by internal TzKT id. Note, this is not the same as `tokenId`.   Click on the parameter to expand more details.
        :param TokenContract3 token_contract: Filter by contract address.   Click on the parameter to expand more details.
        :param TokenTokenId3 token_token_id: Filter by tokenId (for FA1.2 tokens tokenId is always `\"0\"`).   Click on the parameter to expand more details.
        :param TokenStandard3 token_standard: Filter by token standard (`fa1.2` or `fa2`).   Click on the parameter to expand more details.
        :param TokenMetadata3 token_metadata: Filter by metadata. Note, this parameter supports the following format: `token.metadata{.path?}{.mode?}=...`, so you can specify a path to a particular field to filter by, for example: `?token.metadata.symbol.in=kUSD,uUSD`.   Click on the parameter to expand more details.
        :param bool token_has_filters:
        :param str anyof: Filter by any of the specified fields (`from` or `to`). Example: `anyof.from.to=tz1...` will return transfers where `from` OR `to` is equal to the specified value. This parameter is useful when you need to get both incoming and outgoing transfers of the account at once.   Click on the parameter to expand more details.
        :param From1 _from: Filter by sender account address.   Click on the parameter to expand more details.
        :param To1 to: Filter by target account address.   Click on the parameter to expand more details.
        :param Amount2 amount: Filter by amount.   Click on the parameter to expand more details.
        :param TransactionId1 transaction_id: Filter by id of the transaction, caused the token transfer.   Click on the parameter to expand more details.
        :param OriginationId1 origination_id: Filter by id of the origination, caused the token transfer.   Click on the parameter to expand more details.
        :param MigrationId1 migration_id: Filter by id of the migration, caused the token transfer.   Click on the parameter to expand more details.
        :param Sort52 sort: Sorts items (asc or desc) by the specified field. You can see what fields can be used for sorting in the response description, below.   Click on the parameter to expand more details.
        :param Offset50 offset: Specifies which or how many items should be skipped.   Click on the parameter to expand more details.
        :param int limit: Maximum number of items to return.
        :param Select46 select: Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields. This parameter accepts values of the following format: `{field}{path?}{as alias?}`, so you can do deep selection (for example, `?select=balance,token.metadata.symbol as token,...`).   Note, if you select just one field, the response will be flatten into a simple array of values.   Click on the parameter to expand the details.
        :return: list[TokenTransfer]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'level', 'timestamp', 'token_id', 'token_contract', 'token_token_id', 'token_standard', 'token_metadata', 'token_has_filters', 'anyof', '_from', 'to', 'amount', 'transaction_id', 'origination_id', 'migration_id', 'sort', 'offset', 'limit', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tokens_get_token_transfers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'level' in params:
            query_params.append(('level', params['level']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'token_id' in params:
            query_params.append(('token.id', params['token_id']))  # noqa: E501
        if 'token_contract' in params:
            query_params.append(('token.contract', params['token_contract']))  # noqa: E501
        if 'token_token_id' in params:
            query_params.append(('token.tokenId', params['token_token_id']))  # noqa: E501
        if 'token_standard' in params:
            query_params.append(('token.standard', params['token_standard']))  # noqa: E501
        if 'token_metadata' in params:
            query_params.append(('token.metadata', params['token_metadata']))  # noqa: E501
        if 'token_has_filters' in params:
            query_params.append(('token.HasFilters', params['token_has_filters']))  # noqa: E501
        if 'anyof' in params:
            query_params.append(('anyof', params['anyof']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'amount' in params:
            query_params.append(('amount', params['amount']))  # noqa: E501
        if 'transaction_id' in params:
            query_params.append(('transactionId', params['transaction_id']))  # noqa: E501
        if 'origination_id' in params:
            query_params.append(('originationId', params['origination_id']))  # noqa: E501
        if 'migration_id' in params:
            query_params.append(('migrationId', params['migration_id']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/tokens/transfers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TokenTransfer]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tokens_get_token_transfers_count(self, **kwargs):  # noqa: E501
        """Get token transfers count  # noqa: E501

        Returns the total number of token transfers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tokens_get_token_transfers_count(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Id7 id: Filter by internal TzKT id.   Click on the parameter to expand more details.
        :param Level45 level: Filter by level of the block where the transfer was made.   Click on the parameter to expand more details.
        :param Timestamp43 timestamp: Filter by timestamp (ISO 8601) of the block where the transfer was made.   Click on the parameter to expand more details.
        :param TokenId2 token_id: Filter by internal TzKT id. Note, this is not the same as `tokenId`.   Click on the parameter to expand more details.
        :param TokenContract2 token_contract: Filter by contract address.   Click on the parameter to expand more details.
        :param TokenTokenId2 token_token_id: Filter by tokenId (for FA1.2 tokens tokenId is always `\"0\"`).   Click on the parameter to expand more details.
        :param TokenStandard2 token_standard: Filter by token standard (`fa1.2` or `fa2`).   Click on the parameter to expand more details.
        :param TokenMetadata2 token_metadata: Filter by metadata. Note, this parameter supports the following format: `token.metadata{.path?}{.mode?}=...`, so you can specify a path to a particular field to filter by, for example: `?token.metadata.symbol.in=kUSD,uUSD`.   Click on the parameter to expand more details.
        :param bool token_has_filters:
        :param str anyof: Filter by any of the specified fields (`from` or `to`). Example: `anyof.from.to=tz1...` will return transfers where `from` OR `to` is equal to the specified value. This parameter is useful when you need to get both incoming and outgoing transfers of the account at once.   Click on the parameter to expand more details.
        :param ModelFrom _from: Filter by sender account address.   Click on the parameter to expand more details.
        :param To to: Filter by target account address.   Click on the parameter to expand more details.
        :param Amount1 amount: Filter by amount.   Click on the parameter to expand more details.
        :param TransactionId transaction_id: Filter by id of the transaction, caused the token transfer.   Click on the parameter to expand more details.
        :param OriginationId origination_id: Filter by id of the origination, caused the token transfer.   Click on the parameter to expand more details.
        :param MigrationId migration_id: Filter by id of the migration, caused the token transfer.   Click on the parameter to expand more details.
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tokens_get_token_transfers_count_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.tokens_get_token_transfers_count_with_http_info(**kwargs)  # noqa: E501
            return data

    def tokens_get_token_transfers_count_with_http_info(self, **kwargs):  # noqa: E501
        """Get token transfers count  # noqa: E501

        Returns the total number of token transfers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tokens_get_token_transfers_count_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Id7 id: Filter by internal TzKT id.   Click on the parameter to expand more details.
        :param Level45 level: Filter by level of the block where the transfer was made.   Click on the parameter to expand more details.
        :param Timestamp43 timestamp: Filter by timestamp (ISO 8601) of the block where the transfer was made.   Click on the parameter to expand more details.
        :param TokenId2 token_id: Filter by internal TzKT id. Note, this is not the same as `tokenId`.   Click on the parameter to expand more details.
        :param TokenContract2 token_contract: Filter by contract address.   Click on the parameter to expand more details.
        :param TokenTokenId2 token_token_id: Filter by tokenId (for FA1.2 tokens tokenId is always `\"0\"`).   Click on the parameter to expand more details.
        :param TokenStandard2 token_standard: Filter by token standard (`fa1.2` or `fa2`).   Click on the parameter to expand more details.
        :param TokenMetadata2 token_metadata: Filter by metadata. Note, this parameter supports the following format: `token.metadata{.path?}{.mode?}=...`, so you can specify a path to a particular field to filter by, for example: `?token.metadata.symbol.in=kUSD,uUSD`.   Click on the parameter to expand more details.
        :param bool token_has_filters:
        :param str anyof: Filter by any of the specified fields (`from` or `to`). Example: `anyof.from.to=tz1...` will return transfers where `from` OR `to` is equal to the specified value. This parameter is useful when you need to get both incoming and outgoing transfers of the account at once.   Click on the parameter to expand more details.
        :param ModelFrom _from: Filter by sender account address.   Click on the parameter to expand more details.
        :param To to: Filter by target account address.   Click on the parameter to expand more details.
        :param Amount1 amount: Filter by amount.   Click on the parameter to expand more details.
        :param TransactionId transaction_id: Filter by id of the transaction, caused the token transfer.   Click on the parameter to expand more details.
        :param OriginationId origination_id: Filter by id of the origination, caused the token transfer.   Click on the parameter to expand more details.
        :param MigrationId migration_id: Filter by id of the migration, caused the token transfer.   Click on the parameter to expand more details.
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'level', 'timestamp', 'token_id', 'token_contract', 'token_token_id', 'token_standard', 'token_metadata', 'token_has_filters', 'anyof', '_from', 'to', 'amount', 'transaction_id', 'origination_id', 'migration_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tokens_get_token_transfers_count" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'level' in params:
            query_params.append(('level', params['level']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'token_id' in params:
            query_params.append(('token.id', params['token_id']))  # noqa: E501
        if 'token_contract' in params:
            query_params.append(('token.contract', params['token_contract']))  # noqa: E501
        if 'token_token_id' in params:
            query_params.append(('token.tokenId', params['token_token_id']))  # noqa: E501
        if 'token_standard' in params:
            query_params.append(('token.standard', params['token_standard']))  # noqa: E501
        if 'token_metadata' in params:
            query_params.append(('token.metadata', params['token_metadata']))  # noqa: E501
        if 'token_has_filters' in params:
            query_params.append(('token.HasFilters', params['token_has_filters']))  # noqa: E501
        if 'anyof' in params:
            query_params.append(('anyof', params['anyof']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'amount' in params:
            query_params.append(('amount', params['amount']))  # noqa: E501
        if 'transaction_id' in params:
            query_params.append(('transactionId', params['transaction_id']))  # noqa: E501
        if 'origination_id' in params:
            query_params.append(('originationId', params['origination_id']))  # noqa: E501
        if 'migration_id' in params:
            query_params.append(('migrationId', params['migration_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/tokens/transfers/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tokens_get_tokens(self, **kwargs):  # noqa: E501
        """Get tokens  # noqa: E501

        Returns a list of tokens.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tokens_get_tokens(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Id4 id: Filter by internal TzKT id. Note, this is not the same as `tokenId` nat value.   Click on the parameter to expand more details.
        :param Contract3 contract: Filter by contract address.   Click on the parameter to expand more details.
        :param TokenId1 token_id: Filter by tokenId (for FA1.2 tokens tokenId is always `\"0\"`).   Click on the parameter to expand more details.
        :param Standard1 standard: Filter by token standard (`fa1.2` or `fa2`).   Click on the parameter to expand more details.
        :param FirstLevel1 first_level: Filter by level of the block where the token was first seen.   Click on the parameter to expand more details.
        :param FirstTime1 first_time: Filter by timestamp (ISO 8601) of the block where the token was first seen.   Click on the parameter to expand more details.
        :param LastLevel4 last_level: Filter by level of the block where the token was last seen.   Click on the parameter to expand more details.
        :param LastTime1 last_time: Filter by timestamp (ISO 8601) of the block where the token was last seen.   Click on the parameter to expand more details.
        :param Metadata1 metadata: Filter by metadata.   Note, this parameter supports the following format: `metadata{.path?}{.mode?}=...`, so you can specify a path to a particular field to filter by (for example, `?metadata.symbol.in=kUSD,uUSD`).   Click on the parameter to expand more details.
        :param Sort50 sort: Sorts items (asc or desc) by the specified field. You can see what fields can be used for sorting in the response description, below.   Click on the parameter to expand more details.
        :param Offset48 offset: Specifies which or how many items should be skipped.   Click on the parameter to expand more details.
        :param int limit: Maximum number of items to return.
        :param Select44 select: Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields. This parameter accepts values of the following format: `{field}{path?}{as alias?}`, so you can do deep selection (for example, `?select=balance,token.metadata.symbol as token,...`).   Note, if you select just one field, the response will be flatten into a simple array of values.   Click on the parameter to expand the details.
        :return: list[Token]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tokens_get_tokens_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.tokens_get_tokens_with_http_info(**kwargs)  # noqa: E501
            return data

    def tokens_get_tokens_with_http_info(self, **kwargs):  # noqa: E501
        """Get tokens  # noqa: E501

        Returns a list of tokens.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tokens_get_tokens_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Id4 id: Filter by internal TzKT id. Note, this is not the same as `tokenId` nat value.   Click on the parameter to expand more details.
        :param Contract3 contract: Filter by contract address.   Click on the parameter to expand more details.
        :param TokenId1 token_id: Filter by tokenId (for FA1.2 tokens tokenId is always `\"0\"`).   Click on the parameter to expand more details.
        :param Standard1 standard: Filter by token standard (`fa1.2` or `fa2`).   Click on the parameter to expand more details.
        :param FirstLevel1 first_level: Filter by level of the block where the token was first seen.   Click on the parameter to expand more details.
        :param FirstTime1 first_time: Filter by timestamp (ISO 8601) of the block where the token was first seen.   Click on the parameter to expand more details.
        :param LastLevel4 last_level: Filter by level of the block where the token was last seen.   Click on the parameter to expand more details.
        :param LastTime1 last_time: Filter by timestamp (ISO 8601) of the block where the token was last seen.   Click on the parameter to expand more details.
        :param Metadata1 metadata: Filter by metadata.   Note, this parameter supports the following format: `metadata{.path?}{.mode?}=...`, so you can specify a path to a particular field to filter by (for example, `?metadata.symbol.in=kUSD,uUSD`).   Click on the parameter to expand more details.
        :param Sort50 sort: Sorts items (asc or desc) by the specified field. You can see what fields can be used for sorting in the response description, below.   Click on the parameter to expand more details.
        :param Offset48 offset: Specifies which or how many items should be skipped.   Click on the parameter to expand more details.
        :param int limit: Maximum number of items to return.
        :param Select44 select: Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields. This parameter accepts values of the following format: `{field}{path?}{as alias?}`, so you can do deep selection (for example, `?select=balance,token.metadata.symbol as token,...`).   Note, if you select just one field, the response will be flatten into a simple array of values.   Click on the parameter to expand the details.
        :return: list[Token]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'contract', 'token_id', 'standard', 'first_level', 'first_time', 'last_level', 'last_time', 'metadata', 'sort', 'offset', 'limit', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tokens_get_tokens" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'contract' in params:
            query_params.append(('contract', params['contract']))  # noqa: E501
        if 'token_id' in params:
            query_params.append(('tokenId', params['token_id']))  # noqa: E501
        if 'standard' in params:
            query_params.append(('standard', params['standard']))  # noqa: E501
        if 'first_level' in params:
            query_params.append(('firstLevel', params['first_level']))  # noqa: E501
        if 'first_time' in params:
            query_params.append(('firstTime', params['first_time']))  # noqa: E501
        if 'last_level' in params:
            query_params.append(('lastLevel', params['last_level']))  # noqa: E501
        if 'last_time' in params:
            query_params.append(('lastTime', params['last_time']))  # noqa: E501
        if 'metadata' in params:
            query_params.append(('metadata', params['metadata']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/tokens', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Token]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tokens_get_tokens_count(self, **kwargs):  # noqa: E501
        """Get tokens count  # noqa: E501

        Returns a total number of tokens.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tokens_get_tokens_count(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Id3 id: Filter by internal TzKT id. Note, this is not the same as `tokenId` nat value.   Click on the parameter to expand more details.
        :param Contract2 contract: Filter by contract address.   Click on the parameter to expand more details.
        :param TokenId token_id: Filter by tokenId (for FA1.2 tokens tokenId is always `\"0\"`).   Click on the parameter to expand more details.
        :param Standard standard: Filter by token standard (`fa1.2` or `fa2`).   Click on the parameter to expand more details.
        :param FirstLevel first_level: Filter by level of the block where the token was first seen.   Click on the parameter to expand more details.
        :param FirstTime first_time: Filter by timestamp (ISO 8601) of the block where the token was first seen.   Click on the parameter to expand more details.
        :param LastLevel3 last_level: Filter by level of the block where the token was last seen.   Click on the parameter to expand more details.
        :param LastTime last_time: Filter by timestamp (ISO 8601) of the block where the token was last seen.   Click on the parameter to expand more details.
        :param Metadata metadata: Filter by metadata.   Note, this parameter supports the following format: `metadata{.path?}{.mode?}=...`, so you can specify a path to a particular field to filter by (for example, `?metadata.symbol.in=kUSD,uUSD`).   Click on the parameter to expand more details.
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tokens_get_tokens_count_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.tokens_get_tokens_count_with_http_info(**kwargs)  # noqa: E501
            return data

    def tokens_get_tokens_count_with_http_info(self, **kwargs):  # noqa: E501
        """Get tokens count  # noqa: E501

        Returns a total number of tokens.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tokens_get_tokens_count_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Id3 id: Filter by internal TzKT id. Note, this is not the same as `tokenId` nat value.   Click on the parameter to expand more details.
        :param Contract2 contract: Filter by contract address.   Click on the parameter to expand more details.
        :param TokenId token_id: Filter by tokenId (for FA1.2 tokens tokenId is always `\"0\"`).   Click on the parameter to expand more details.
        :param Standard standard: Filter by token standard (`fa1.2` or `fa2`).   Click on the parameter to expand more details.
        :param FirstLevel first_level: Filter by level of the block where the token was first seen.   Click on the parameter to expand more details.
        :param FirstTime first_time: Filter by timestamp (ISO 8601) of the block where the token was first seen.   Click on the parameter to expand more details.
        :param LastLevel3 last_level: Filter by level of the block where the token was last seen.   Click on the parameter to expand more details.
        :param LastTime last_time: Filter by timestamp (ISO 8601) of the block where the token was last seen.   Click on the parameter to expand more details.
        :param Metadata metadata: Filter by metadata.   Note, this parameter supports the following format: `metadata{.path?}{.mode?}=...`, so you can specify a path to a particular field to filter by (for example, `?metadata.symbol.in=kUSD,uUSD`).   Click on the parameter to expand more details.
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'contract', 'token_id', 'standard', 'first_level', 'first_time', 'last_level', 'last_time', 'metadata']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tokens_get_tokens_count" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'contract' in params:
            query_params.append(('contract', params['contract']))  # noqa: E501
        if 'token_id' in params:
            query_params.append(('tokenId', params['token_id']))  # noqa: E501
        if 'standard' in params:
            query_params.append(('standard', params['standard']))  # noqa: E501
        if 'first_level' in params:
            query_params.append(('firstLevel', params['first_level']))  # noqa: E501
        if 'first_time' in params:
            query_params.append(('firstTime', params['first_time']))  # noqa: E501
        if 'last_level' in params:
            query_params.append(('lastLevel', params['last_level']))  # noqa: E501
        if 'last_time' in params:
            query_params.append(('lastTime', params['last_time']))  # noqa: E501
        if 'metadata' in params:
            query_params.append(('metadata', params['metadata']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/tokens/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
