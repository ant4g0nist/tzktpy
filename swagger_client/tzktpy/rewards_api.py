# coding: utf-8

"""
    TzKT API

    # Introduction  TzKT Explorer provides free REST API and WebSocket API for accessing detailed Tezos blockchain data and helps developers build more services and applications on top of Tezos. TzKT is an open-source project, so you can easily clone and build it and use it as a self-hosted service to avoid any risks of depending on third-party services.  TzKT API is available for the following Tezos networks with the following base URLs:  - Mainnet: `https://api.tzkt.io/` or `https://api.mainnet.tzkt.io/` ([view docs](https://api.tzkt.io))  - Hangzhounet: `https://api.hangzhounet.tzkt.io/` ([view docs](https://api.hangzhounet.tzkt.io)) - Ithacanet: `https://api.ithacanet.tzkt.io/` ([view docs](https://api.ithacanet.tzkt.io))  We also provide a staging environment for testing newest features and pre-updating client applications before deploying to production:  - Mainnet staging: `https://staging.api.tzkt.io/` or `https://staging.api.mainnet.tzkt.io/` ([view docs](https://staging.api.tzkt.io))  Feel free to contact us if you have any questions or feature requests. Your feedback really helps us make TzKT better!  - Discord: https://discord.gg/aG8XKuwsQd - Telegram: https://t.me/baking_bad_chat - Slack: https://tezos-dev.slack.com/archives/CV5NX7F2L - Twitter: https://twitter.com/TezosBakingBad - Email: hello@baking-bad.org  And don't forget to star TzKT project [on GitHub](https://github.com/baking-bad/tzkt) ;)  # Terms of Use  TzKT API is free for everyone and for both commercial and non-commercial usage.  If your application or service uses the TzKT API in any forms: directly on frontend or indirectly on backend, you must mention that fact on your website or application by placing the label **\"Powered by TzKT API\"** or **\"Built with TzKT API\"** with a direct link to [tzkt.io](https://tzkt.io).   # Rate Limits  There will be no rate limits as long as our servers can handle the load without additional infrastructure costs. However, any apparent abuse will be prevented by setting targeted rate limits.  Check out [Tezos Explorer API Best Practices](https://baking-bad.org/blog/tag/TzKT/) and in particular [how to optimize requests count](https://baking-bad.org/blog/2020/07/29/tezos-explorer-api-tzkt-how-often-to-make-requests/).  ---   # noqa: E501

    OpenAPI spec version: v1.8.3
    Contact: hello@baking-bad.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class RewardsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def rewards_get_baker_rewards(self, address, **kwargs):  # noqa: E501
        """Get baker cycle rewards  # noqa: E501

        Returns a list of baker rewards for every cycle, including future cycles.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rewards_get_baker_rewards(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: Baker address. (required)
        :param Cycle cycle: Filters rewards by cycle.
        :param Select36 select: Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes.
        :param Sort43 sort: Sorts cycle rewards by specified field. Supported fields: `cycle` (default, desc).
        :param Offset41 offset: Specifies which or how many items should be skipped
        :param int limit: Maximum number of items to return
        :param Quote51 quote: Comma-separated list of ticker symbols to inject historical prices into response
        :return: list[BakerRewards]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rewards_get_baker_rewards_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.rewards_get_baker_rewards_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def rewards_get_baker_rewards_with_http_info(self, address, **kwargs):  # noqa: E501
        """Get baker cycle rewards  # noqa: E501

        Returns a list of baker rewards for every cycle, including future cycles.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rewards_get_baker_rewards_with_http_info(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: Baker address. (required)
        :param Cycle cycle: Filters rewards by cycle.
        :param Select36 select: Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes.
        :param Sort43 sort: Sorts cycle rewards by specified field. Supported fields: `cycle` (default, desc).
        :param Offset41 offset: Specifies which or how many items should be skipped
        :param int limit: Maximum number of items to return
        :param Quote51 quote: Comma-separated list of ticker symbols to inject historical prices into response
        :return: list[BakerRewards]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address', 'cycle', 'select', 'sort', 'offset', 'limit', 'quote']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rewards_get_baker_rewards" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `rewards_get_baker_rewards`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []
        if 'cycle' in params:
            query_params.append(('cycle', params['cycle']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'quote' in params:
            query_params.append(('quote', params['quote']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/rewards/bakers/{address}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BakerRewards]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rewards_get_baker_rewards_by_cycle(self, address, cycle, **kwargs):  # noqa: E501
        """Get baker cycle rewards by cycle  # noqa: E501

        Returns baker cycle rewards for the specified cycle.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rewards_get_baker_rewards_by_cycle(address, cycle, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: Baker address (required)
        :param int cycle: Rewards cycle (required)
        :param Quote52 quote: Comma-separated list of ticker symbols to inject historical prices into response
        :return: BakerRewards
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rewards_get_baker_rewards_by_cycle_with_http_info(address, cycle, **kwargs)  # noqa: E501
        else:
            (data) = self.rewards_get_baker_rewards_by_cycle_with_http_info(address, cycle, **kwargs)  # noqa: E501
            return data

    def rewards_get_baker_rewards_by_cycle_with_http_info(self, address, cycle, **kwargs):  # noqa: E501
        """Get baker cycle rewards by cycle  # noqa: E501

        Returns baker cycle rewards for the specified cycle.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rewards_get_baker_rewards_by_cycle_with_http_info(address, cycle, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: Baker address (required)
        :param int cycle: Rewards cycle (required)
        :param Quote52 quote: Comma-separated list of ticker symbols to inject historical prices into response
        :return: BakerRewards
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address', 'cycle', 'quote']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rewards_get_baker_rewards_by_cycle" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `rewards_get_baker_rewards_by_cycle`")  # noqa: E501
        # verify the required parameter 'cycle' is set
        if ('cycle' not in params or
                params['cycle'] is None):
            raise ValueError("Missing the required parameter `cycle` when calling `rewards_get_baker_rewards_by_cycle`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501
        if 'cycle' in params:
            path_params['cycle'] = params['cycle']  # noqa: E501

        query_params = []
        if 'quote' in params:
            query_params.append(('quote', params['quote']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/rewards/bakers/{address}/{cycle}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BakerRewards',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rewards_get_baker_rewards_count(self, address, **kwargs):  # noqa: E501
        """Get baker cycle rewards count  # noqa: E501

        Returns total number of cycles where the baker was active  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rewards_get_baker_rewards_count(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: Baker address (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rewards_get_baker_rewards_count_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.rewards_get_baker_rewards_count_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def rewards_get_baker_rewards_count_with_http_info(self, address, **kwargs):  # noqa: E501
        """Get baker cycle rewards count  # noqa: E501

        Returns total number of cycles where the baker was active  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rewards_get_baker_rewards_count_with_http_info(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: Baker address (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rewards_get_baker_rewards_count" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `rewards_get_baker_rewards_count`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/rewards/bakers/{address}/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rewards_get_delegator_rewards(self, address, **kwargs):  # noqa: E501
        """Get delegator cycle rewards  # noqa: E501

        Returns a list of delegator rewards for every cycle, including future cycles.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rewards_get_delegator_rewards(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: Delegator address. (required)
        :param Cycle1 cycle: Filters rewards by cycle.
        :param Select37 select: Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes.
        :param Sort44 sort: Sorts cycle rewards by specified field. Supported fields: `cycle` (default, desc).
        :param Offset42 offset: Specifies which or how many items should be skipped
        :param int limit: Maximum number of items to return
        :param Quote53 quote: Comma-separated list of ticker symbols to inject historical prices into response
        :return: list[DelegatorRewards]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rewards_get_delegator_rewards_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.rewards_get_delegator_rewards_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def rewards_get_delegator_rewards_with_http_info(self, address, **kwargs):  # noqa: E501
        """Get delegator cycle rewards  # noqa: E501

        Returns a list of delegator rewards for every cycle, including future cycles.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rewards_get_delegator_rewards_with_http_info(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: Delegator address. (required)
        :param Cycle1 cycle: Filters rewards by cycle.
        :param Select37 select: Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes.
        :param Sort44 sort: Sorts cycle rewards by specified field. Supported fields: `cycle` (default, desc).
        :param Offset42 offset: Specifies which or how many items should be skipped
        :param int limit: Maximum number of items to return
        :param Quote53 quote: Comma-separated list of ticker symbols to inject historical prices into response
        :return: list[DelegatorRewards]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address', 'cycle', 'select', 'sort', 'offset', 'limit', 'quote']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rewards_get_delegator_rewards" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `rewards_get_delegator_rewards`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []
        if 'cycle' in params:
            query_params.append(('cycle', params['cycle']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'quote' in params:
            query_params.append(('quote', params['quote']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/rewards/delegators/{address}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DelegatorRewards]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rewards_get_delegator_rewards_by_cycle(self, address, cycle, **kwargs):  # noqa: E501
        """Get delegator cycle rewards by cycle  # noqa: E501

        Returns delegator cycle rewards for the specified cycle.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rewards_get_delegator_rewards_by_cycle(address, cycle, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: Delegator address (required)
        :param int cycle: Rewards cycle (required)
        :param Quote54 quote: Comma-separated list of ticker symbols to inject historical prices into response
        :return: DelegatorRewards
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rewards_get_delegator_rewards_by_cycle_with_http_info(address, cycle, **kwargs)  # noqa: E501
        else:
            (data) = self.rewards_get_delegator_rewards_by_cycle_with_http_info(address, cycle, **kwargs)  # noqa: E501
            return data

    def rewards_get_delegator_rewards_by_cycle_with_http_info(self, address, cycle, **kwargs):  # noqa: E501
        """Get delegator cycle rewards by cycle  # noqa: E501

        Returns delegator cycle rewards for the specified cycle.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rewards_get_delegator_rewards_by_cycle_with_http_info(address, cycle, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: Delegator address (required)
        :param int cycle: Rewards cycle (required)
        :param Quote54 quote: Comma-separated list of ticker symbols to inject historical prices into response
        :return: DelegatorRewards
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address', 'cycle', 'quote']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rewards_get_delegator_rewards_by_cycle" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `rewards_get_delegator_rewards_by_cycle`")  # noqa: E501
        # verify the required parameter 'cycle' is set
        if ('cycle' not in params or
                params['cycle'] is None):
            raise ValueError("Missing the required parameter `cycle` when calling `rewards_get_delegator_rewards_by_cycle`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501
        if 'cycle' in params:
            path_params['cycle'] = params['cycle']  # noqa: E501

        query_params = []
        if 'quote' in params:
            query_params.append(('quote', params['quote']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/rewards/delegators/{address}/{cycle}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DelegatorRewards',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rewards_get_delegator_rewards_count(self, address, **kwargs):  # noqa: E501
        """Get delegator cycle rewards count  # noqa: E501

        Returns total number of cycles where the delegator was delegated to an active baker  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rewards_get_delegator_rewards_count(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: Delegator address (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rewards_get_delegator_rewards_count_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.rewards_get_delegator_rewards_count_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def rewards_get_delegator_rewards_count_with_http_info(self, address, **kwargs):  # noqa: E501
        """Get delegator cycle rewards count  # noqa: E501

        Returns total number of cycles where the delegator was delegated to an active baker  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rewards_get_delegator_rewards_count_with_http_info(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: Delegator address (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rewards_get_delegator_rewards_count" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `rewards_get_delegator_rewards_count`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/rewards/delegators/{address}/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rewards_get_reward_split(self, baker, cycle, **kwargs):  # noqa: E501
        """Get reward split  # noqa: E501

        Returns baker rewards for the specified cycle with all delegator balances at that cycle to allow rewards distribution in proportion to shares.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rewards_get_reward_split(baker, cycle, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str baker: Baker address (required)
        :param int cycle: Rewards cycle (required)
        :param int offset: Specifies how many delegators in the reward split should be skipped
        :param int limit: Maximum number of delegators to return
        :return: RewardSplit
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rewards_get_reward_split_with_http_info(baker, cycle, **kwargs)  # noqa: E501
        else:
            (data) = self.rewards_get_reward_split_with_http_info(baker, cycle, **kwargs)  # noqa: E501
            return data

    def rewards_get_reward_split_with_http_info(self, baker, cycle, **kwargs):  # noqa: E501
        """Get reward split  # noqa: E501

        Returns baker rewards for the specified cycle with all delegator balances at that cycle to allow rewards distribution in proportion to shares.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rewards_get_reward_split_with_http_info(baker, cycle, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str baker: Baker address (required)
        :param int cycle: Rewards cycle (required)
        :param int offset: Specifies how many delegators in the reward split should be skipped
        :param int limit: Maximum number of delegators to return
        :return: RewardSplit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['baker', 'cycle', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rewards_get_reward_split" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'baker' is set
        if ('baker' not in params or
                params['baker'] is None):
            raise ValueError("Missing the required parameter `baker` when calling `rewards_get_reward_split`")  # noqa: E501
        # verify the required parameter 'cycle' is set
        if ('cycle' not in params or
                params['cycle'] is None):
            raise ValueError("Missing the required parameter `cycle` when calling `rewards_get_reward_split`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'baker' in params:
            path_params['baker'] = params['baker']  # noqa: E501
        if 'cycle' in params:
            path_params['cycle'] = params['cycle']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/rewards/split/{baker}/{cycle}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RewardSplit',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rewards_get_reward_split_delegator(self, baker, cycle, delegator, **kwargs):  # noqa: E501
        """Get reward split delegator  # noqa: E501

        Returns delegator from the reward split for the specified cycle.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rewards_get_reward_split_delegator(baker, cycle, delegator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str baker: Baker address (required)
        :param int cycle: Reward split cycle (required)
        :param str delegator: Delegator address (required)
        :return: SplitDelegator
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rewards_get_reward_split_delegator_with_http_info(baker, cycle, delegator, **kwargs)  # noqa: E501
        else:
            (data) = self.rewards_get_reward_split_delegator_with_http_info(baker, cycle, delegator, **kwargs)  # noqa: E501
            return data

    def rewards_get_reward_split_delegator_with_http_info(self, baker, cycle, delegator, **kwargs):  # noqa: E501
        """Get reward split delegator  # noqa: E501

        Returns delegator from the reward split for the specified cycle.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rewards_get_reward_split_delegator_with_http_info(baker, cycle, delegator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str baker: Baker address (required)
        :param int cycle: Reward split cycle (required)
        :param str delegator: Delegator address (required)
        :return: SplitDelegator
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['baker', 'cycle', 'delegator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rewards_get_reward_split_delegator" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'baker' is set
        if ('baker' not in params or
                params['baker'] is None):
            raise ValueError("Missing the required parameter `baker` when calling `rewards_get_reward_split_delegator`")  # noqa: E501
        # verify the required parameter 'cycle' is set
        if ('cycle' not in params or
                params['cycle'] is None):
            raise ValueError("Missing the required parameter `cycle` when calling `rewards_get_reward_split_delegator`")  # noqa: E501
        # verify the required parameter 'delegator' is set
        if ('delegator' not in params or
                params['delegator'] is None):
            raise ValueError("Missing the required parameter `delegator` when calling `rewards_get_reward_split_delegator`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'baker' in params:
            path_params['baker'] = params['baker']  # noqa: E501
        if 'cycle' in params:
            path_params['cycle'] = params['cycle']  # noqa: E501
        if 'delegator' in params:
            path_params['delegator'] = params['delegator']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/rewards/split/{baker}/{cycle}/{delegator}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SplitDelegator',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
