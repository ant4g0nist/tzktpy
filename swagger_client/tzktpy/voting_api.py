# coding: utf-8

"""
    TzKT API

    # Introduction  TzKT Explorer provides free REST API and WebSocket API for accessing detailed Tezos blockchain data and helps developers build more services and applications on top of Tezos. TzKT is an open-source project, so you can easily clone and build it and use it as a self-hosted service to avoid any risks of depending on third-party services.  TzKT API is available for the following Tezos networks with the following base URLs:  - Mainnet: `https://api.tzkt.io/` or `https://api.mainnet.tzkt.io/` ([view docs](https://api.tzkt.io))  - Hangzhounet: `https://api.hangzhounet.tzkt.io/` ([view docs](https://api.hangzhounet.tzkt.io)) - Ithacanet: `https://api.ithacanet.tzkt.io/` ([view docs](https://api.ithacanet.tzkt.io))  We also provide a staging environment for testing newest features and pre-updating client applications before deploying to production:  - Mainnet staging: `https://staging.api.tzkt.io/` or `https://staging.api.mainnet.tzkt.io/` ([view docs](https://staging.api.tzkt.io))  Feel free to contact us if you have any questions or feature requests. Your feedback really helps us make TzKT better!  - Discord: https://discord.gg/aG8XKuwsQd - Telegram: https://t.me/baking_bad_chat - Slack: https://tezos-dev.slack.com/archives/CV5NX7F2L - Twitter: https://twitter.com/TezosBakingBad - Email: hello@baking-bad.org  And don't forget to star TzKT project [on GitHub](https://github.com/baking-bad/tzkt) ;)  # Terms of Use  TzKT API is free for everyone and for both commercial and non-commercial usage.  If your application or service uses the TzKT API in any forms: directly on frontend or indirectly on backend, you must mention that fact on your website or application by placing the label **\"Powered by TzKT API\"** or **\"Built with TzKT API\"** with a direct link to [tzkt.io](https://tzkt.io).   # Rate Limits  There will be no rate limits as long as our servers can handle the load without additional infrastructure costs. However, any apparent abuse will be prevented by setting targeted rate limits.  Check out [Tezos Explorer API Best Practices](https://baking-bad.org/blog/tag/TzKT/) and in particular [how to optimize requests count](https://baking-bad.org/blog/2020/07/29/tezos-explorer-api-tzkt-how-often-to-make-requests/).  ---   # noqa: E501

    OpenAPI spec version: v1.8.3
    Contact: hello@baking-bad.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class VotingApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def voting_get_current_epoch(self, **kwargs):  # noqa: E501
        """Get current voting epoch  # noqa: E501

        Returns the current voting epoch  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.voting_get_current_epoch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: VotingEpoch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.voting_get_current_epoch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.voting_get_current_epoch_with_http_info(**kwargs)  # noqa: E501
            return data

    def voting_get_current_epoch_with_http_info(self, **kwargs):  # noqa: E501
        """Get current voting epoch  # noqa: E501

        Returns the current voting epoch  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.voting_get_current_epoch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: VotingEpoch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method voting_get_current_epoch" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/voting/epochs/current', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VotingEpoch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def voting_get_current_period(self, **kwargs):  # noqa: E501
        """Get current voting period  # noqa: E501

        Returns current voting period.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.voting_get_current_period(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: VotingPeriod
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.voting_get_current_period_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.voting_get_current_period_with_http_info(**kwargs)  # noqa: E501
            return data

    def voting_get_current_period_with_http_info(self, **kwargs):  # noqa: E501
        """Get current voting period  # noqa: E501

        Returns current voting period.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.voting_get_current_period_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: VotingPeriod
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method voting_get_current_period" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/voting/periods/current', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VotingPeriod',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def voting_get_epoch(self, index, **kwargs):  # noqa: E501
        """Get voting epoch by index  # noqa: E501

        Returns a voting epoch at the specified index.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.voting_get_epoch(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int index: Voting epoch index starting from zero (required)
        :return: VotingEpoch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.voting_get_epoch_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.voting_get_epoch_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def voting_get_epoch_with_http_info(self, index, **kwargs):  # noqa: E501
        """Get voting epoch by index  # noqa: E501

        Returns a voting epoch at the specified index.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.voting_get_epoch_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int index: Voting epoch index starting from zero (required)
        :return: VotingEpoch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method voting_get_epoch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `voting_get_epoch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/voting/epochs/{index}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VotingEpoch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def voting_get_epochs(self, **kwargs):  # noqa: E501
        """Get voting epochs  # noqa: E501

        Returns a list of voting epochs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.voting_get_epochs(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Sort58 sort: Sorts voting epochs by specified field. Supported fields: `id` (default).
        :param Offset56 offset: Specifies which or how many items should be skipped
        :param int limit: Maximum number of items to return
        :return: list[VotingEpoch]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.voting_get_epochs_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.voting_get_epochs_with_http_info(**kwargs)  # noqa: E501
            return data

    def voting_get_epochs_with_http_info(self, **kwargs):  # noqa: E501
        """Get voting epochs  # noqa: E501

        Returns a list of voting epochs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.voting_get_epochs_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Sort58 sort: Sorts voting epochs by specified field. Supported fields: `id` (default).
        :param Offset56 offset: Specifies which or how many items should be skipped
        :param int limit: Maximum number of items to return
        :return: list[VotingEpoch]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method voting_get_epochs" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/voting/epochs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[VotingEpoch]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def voting_get_latest_voting(self, **kwargs):  # noqa: E501
        """Get latest voting  # noqa: E501

        Returns the latest epoch with at least one proposal  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.voting_get_latest_voting(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: VotingEpoch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.voting_get_latest_voting_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.voting_get_latest_voting_with_http_info(**kwargs)  # noqa: E501
            return data

    def voting_get_latest_voting_with_http_info(self, **kwargs):  # noqa: E501
        """Get latest voting  # noqa: E501

        Returns the latest epoch with at least one proposal  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.voting_get_latest_voting_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: VotingEpoch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method voting_get_latest_voting" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/voting/epochs/latest_voting', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VotingEpoch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def voting_get_period(self, index, **kwargs):  # noqa: E501
        """Get voting period by index  # noqa: E501

        Returns a voting period at the specified index.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.voting_get_period(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int index: Voting period index starting from zero (required)
        :return: VotingPeriod
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.voting_get_period_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.voting_get_period_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def voting_get_period_with_http_info(self, index, **kwargs):  # noqa: E501
        """Get voting period by index  # noqa: E501

        Returns a voting period at the specified index.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.voting_get_period_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int index: Voting period index starting from zero (required)
        :return: VotingPeriod
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method voting_get_period" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `voting_get_period`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/voting/periods/{index}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VotingPeriod',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def voting_get_period_voter(self, index, address, **kwargs):  # noqa: E501
        """Get period voter  # noqa: E501

        Returns a voter with the specified address from the voting period at the specified index.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.voting_get_period_voter(index, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int index: Voting period index starting from zero (required)
        :param str address: Voter address (required)
        :return: VoterSnapshot
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.voting_get_period_voter_with_http_info(index, address, **kwargs)  # noqa: E501
        else:
            (data) = self.voting_get_period_voter_with_http_info(index, address, **kwargs)  # noqa: E501
            return data

    def voting_get_period_voter_with_http_info(self, index, address, **kwargs):  # noqa: E501
        """Get period voter  # noqa: E501

        Returns a voter with the specified address from the voting period at the specified index.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.voting_get_period_voter_with_http_info(index, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int index: Voting period index starting from zero (required)
        :param str address: Voter address (required)
        :return: VoterSnapshot
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method voting_get_period_voter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `voting_get_period_voter`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `voting_get_period_voter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/voting/periods/{index}/voters/{address}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VoterSnapshot',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def voting_get_period_voter2(self, address, **kwargs):  # noqa: E501
        """Get current period voter  # noqa: E501

        Returns a voter with the specified address from the current period.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.voting_get_period_voter2(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: Voter address (required)
        :return: VoterSnapshot
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.voting_get_period_voter2_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.voting_get_period_voter2_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def voting_get_period_voter2_with_http_info(self, address, **kwargs):  # noqa: E501
        """Get current period voter  # noqa: E501

        Returns a voter with the specified address from the current period.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.voting_get_period_voter2_with_http_info(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: Voter address (required)
        :return: VoterSnapshot
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method voting_get_period_voter2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `voting_get_period_voter2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/voting/periods/current/voters/{address}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VoterSnapshot',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def voting_get_period_voters(self, index, **kwargs):  # noqa: E501
        """Get period voters  # noqa: E501

        Returns voters from the voting period at the specified index.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.voting_get_period_voters(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int index: Voting period index starting from zero (required)
        :param Status10 status: Filters voters by status (`none`, `upvoted`, `voted_yay`, `voted_nay`, `voted_pass`)
        :param Sort56 sort: Sorts voters by specified field. Supported fields: `id` (default), `rolls`.
        :param Offset54 offset: Specifies which or how many items should be skipped
        :param int limit: Maximum number of items to return
        :return: list[VoterSnapshot]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.voting_get_period_voters_with_http_info(index, **kwargs)  # noqa: E501
        else:
            (data) = self.voting_get_period_voters_with_http_info(index, **kwargs)  # noqa: E501
            return data

    def voting_get_period_voters_with_http_info(self, index, **kwargs):  # noqa: E501
        """Get period voters  # noqa: E501

        Returns voters from the voting period at the specified index.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.voting_get_period_voters_with_http_info(index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int index: Voting period index starting from zero (required)
        :param Status10 status: Filters voters by status (`none`, `upvoted`, `voted_yay`, `voted_nay`, `voted_pass`)
        :param Sort56 sort: Sorts voters by specified field. Supported fields: `id` (default), `rolls`.
        :param Offset54 offset: Specifies which or how many items should be skipped
        :param int limit: Maximum number of items to return
        :return: list[VoterSnapshot]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index', 'status', 'sort', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method voting_get_period_voters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `voting_get_period_voters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/voting/periods/{index}/voters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[VoterSnapshot]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def voting_get_period_voters2(self, **kwargs):  # noqa: E501
        """Get current period voters  # noqa: E501

        Returns voters from the current period.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.voting_get_period_voters2(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Status11 status: Filters voters by status (`none`, `upvoted`, `voted_yay`, `voted_nay`, `voted_pass`)
        :param Sort57 sort: Sorts voters by specified field. Supported fields: `id` (default), `rolls`.
        :param Offset55 offset: Specifies which or how many items should be skipped
        :param int limit: Maximum number of items to return
        :return: list[VoterSnapshot]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.voting_get_period_voters2_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.voting_get_period_voters2_with_http_info(**kwargs)  # noqa: E501
            return data

    def voting_get_period_voters2_with_http_info(self, **kwargs):  # noqa: E501
        """Get current period voters  # noqa: E501

        Returns voters from the current period.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.voting_get_period_voters2_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Status11 status: Filters voters by status (`none`, `upvoted`, `voted_yay`, `voted_nay`, `voted_pass`)
        :param Sort57 sort: Sorts voters by specified field. Supported fields: `id` (default), `rolls`.
        :param Offset55 offset: Specifies which or how many items should be skipped
        :param int limit: Maximum number of items to return
        :return: list[VoterSnapshot]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['status', 'sort', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method voting_get_period_voters2" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/voting/periods/current/voters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[VoterSnapshot]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def voting_get_periods(self, **kwargs):  # noqa: E501
        """Get voting periods  # noqa: E501

        Returns a list of voting periods.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.voting_get_periods(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Select49 select: Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes.
        :param Sort55 sort: Sorts voting periods by specified field. Supported fields: `id` (default).
        :param Offset53 offset: Specifies which or how many items should be skipped
        :param int limit: Maximum number of items to return
        :return: list[VotingPeriod]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.voting_get_periods_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.voting_get_periods_with_http_info(**kwargs)  # noqa: E501
            return data

    def voting_get_periods_with_http_info(self, **kwargs):  # noqa: E501
        """Get voting periods  # noqa: E501

        Returns a list of voting periods.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.voting_get_periods_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Select49 select: Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes.
        :param Sort55 sort: Sorts voting periods by specified field. Supported fields: `id` (default).
        :param Offset53 offset: Specifies which or how many items should be skipped
        :param int limit: Maximum number of items to return
        :return: list[VotingPeriod]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['select', 'sort', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method voting_get_periods" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/voting/periods', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[VotingPeriod]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def voting_get_proposal_by_hash(self, hash, **kwargs):  # noqa: E501
        """Get proposal by hash  # noqa: E501

        Returns the most recent protocol proposal with the specified hash.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.voting_get_proposal_by_hash(hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hash: Proposal hash (required)
        :return: Proposal
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.voting_get_proposal_by_hash_with_http_info(hash, **kwargs)  # noqa: E501
        else:
            (data) = self.voting_get_proposal_by_hash_with_http_info(hash, **kwargs)  # noqa: E501
            return data

    def voting_get_proposal_by_hash_with_http_info(self, hash, **kwargs):  # noqa: E501
        """Get proposal by hash  # noqa: E501

        Returns the most recent protocol proposal with the specified hash.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.voting_get_proposal_by_hash_with_http_info(hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hash: Proposal hash (required)
        :return: Proposal
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hash']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method voting_get_proposal_by_hash" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hash' is set
        if ('hash' not in params or
                params['hash'] is None):
            raise ValueError("Missing the required parameter `hash` when calling `voting_get_proposal_by_hash`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hash' in params:
            path_params['hash'] = params['hash']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/voting/proposals/{hash}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Proposal',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def voting_get_proposals(self, **kwargs):  # noqa: E501
        """Get proposals  # noqa: E501

        Returns a list of protocol proposals.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.voting_get_proposals(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Hash hash: Filters proposals by hash
        :param Epoch2 epoch: Filters proposals by voting epoch
        :param Select48 select: Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes.
        :param Sort54 sort: Sorts proposals by specified field. Supported fields: `id` (default), `upvotes`, `rolls`.
        :param Offset52 offset: Specifies which or how many items should be skipped
        :param int limit: Maximum number of items to return
        :return: list[Proposal]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.voting_get_proposals_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.voting_get_proposals_with_http_info(**kwargs)  # noqa: E501
            return data

    def voting_get_proposals_with_http_info(self, **kwargs):  # noqa: E501
        """Get proposals  # noqa: E501

        Returns a list of protocol proposals.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.voting_get_proposals_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Hash hash: Filters proposals by hash
        :param Epoch2 epoch: Filters proposals by voting epoch
        :param Select48 select: Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes.
        :param Sort54 sort: Sorts proposals by specified field. Supported fields: `id` (default), `upvotes`, `rolls`.
        :param Offset52 offset: Specifies which or how many items should be skipped
        :param int limit: Maximum number of items to return
        :return: list[Proposal]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hash', 'epoch', 'select', 'sort', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method voting_get_proposals" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'hash' in params:
            query_params.append(('hash', params['hash']))  # noqa: E501
        if 'epoch' in params:
            query_params.append(('epoch', params['epoch']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/voting/proposals', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Proposal]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def voting_get_proposals_count(self, **kwargs):  # noqa: E501
        """Get proposals count  # noqa: E501

        Returns the total number of protocol proposals.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.voting_get_proposals_count(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.voting_get_proposals_count_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.voting_get_proposals_count_with_http_info(**kwargs)  # noqa: E501
            return data

    def voting_get_proposals_count_with_http_info(self, **kwargs):  # noqa: E501
        """Get proposals count  # noqa: E501

        Returns the total number of protocol proposals.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.voting_get_proposals_count_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method voting_get_proposals_count" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/voting/proposals/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
