# coding: utf-8

"""
    TzKT API

    # Introduction  TzKT Explorer provides free REST API and WebSocket API for accessing detailed Tezos blockchain data and helps developers build more services and applications on top of Tezos. TzKT is an open-source project, so you can easily clone and build it and use it as a self-hosted service to avoid any risks of depending on third-party services.  TzKT API is available for the following Tezos networks with the following base URLs:  - Mainnet: `https://api.tzkt.io/` or `https://api.mainnet.tzkt.io/` ([view docs](https://api.tzkt.io))  - Hangzhounet: `https://api.hangzhounet.tzkt.io/` ([view docs](https://api.hangzhounet.tzkt.io)) - Ithacanet: `https://api.ithacanet.tzkt.io/` ([view docs](https://api.ithacanet.tzkt.io))  We also provide a staging environment for testing newest features and pre-updating client applications before deploying to production:  - Mainnet staging: `https://staging.api.tzkt.io/` or `https://staging.api.mainnet.tzkt.io/` ([view docs](https://staging.api.tzkt.io))  Feel free to contact us if you have any questions or feature requests. Your feedback really helps us make TzKT better!  - Discord: https://discord.gg/aG8XKuwsQd - Telegram: https://t.me/baking_bad_chat - Slack: https://tezos-dev.slack.com/archives/CV5NX7F2L - Twitter: https://twitter.com/TezosBakingBad - Email: hello@baking-bad.org  And don't forget to star TzKT project [on GitHub](https://github.com/baking-bad/tzkt) ;)  # Terms of Use  TzKT API is free for everyone and for both commercial and non-commercial usage.  If your application or service uses the TzKT API in any forms: directly on frontend or indirectly on backend, you must mention that fact on your website or application by placing the label **\"Powered by TzKT API\"** or **\"Built with TzKT API\"** with a direct link to [tzkt.io](https://tzkt.io).   # Rate Limits  There will be no rate limits as long as our servers can handle the load without additional infrastructure costs. However, any apparent abuse will be prevented by setting targeted rate limits.  Check out [Tezos Explorer API Best Practices](https://baking-bad.org/blog/tag/TzKT/) and in particular [how to optimize requests count](https://baking-bad.org/blog/2020/07/29/tezos-explorer-api-tzkt-how-often-to-make-requests/).  ---   # noqa: E501

    OpenAPI spec version: v1.8.3
    Contact: hello@baking-bad.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProfileMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'kind': 'str',
        'alias': 'str',
        'description': 'str',
        'site': 'str',
        'support': 'str',
        'email': 'str',
        'twitter': 'str',
        'telegram': 'str',
        'discord': 'str',
        'reddit': 'str',
        'slack': 'str',
        'github': 'str',
        'gitlab': 'str',
        'instagram': 'str',
        'facebook': 'str',
        'medium': 'str'
    }

    attribute_map = {
        'kind': 'kind',
        'alias': 'alias',
        'description': 'description',
        'site': 'site',
        'support': 'support',
        'email': 'email',
        'twitter': 'twitter',
        'telegram': 'telegram',
        'discord': 'discord',
        'reddit': 'reddit',
        'slack': 'slack',
        'github': 'github',
        'gitlab': 'gitlab',
        'instagram': 'instagram',
        'facebook': 'facebook',
        'medium': 'medium'
    }

    def __init__(self, kind=None, alias=None, description=None, site=None, support=None, email=None, twitter=None, telegram=None, discord=None, reddit=None, slack=None, github=None, gitlab=None, instagram=None, facebook=None, medium=None):  # noqa: E501
        """ProfileMetadata - a model defined in Swagger"""  # noqa: E501
        self._kind = None
        self._alias = None
        self._description = None
        self._site = None
        self._support = None
        self._email = None
        self._twitter = None
        self._telegram = None
        self._discord = None
        self._reddit = None
        self._slack = None
        self._github = None
        self._gitlab = None
        self._instagram = None
        self._facebook = None
        self._medium = None
        self.discriminator = None
        if kind is not None:
            self.kind = kind
        if alias is not None:
            self.alias = alias
        if description is not None:
            self.description = description
        if site is not None:
            self.site = site
        if support is not None:
            self.support = support
        if email is not None:
            self.email = email
        if twitter is not None:
            self.twitter = twitter
        if telegram is not None:
            self.telegram = telegram
        if discord is not None:
            self.discord = discord
        if reddit is not None:
            self.reddit = reddit
        if slack is not None:
            self.slack = slack
        if github is not None:
            self.github = github
        if gitlab is not None:
            self.gitlab = gitlab
        if instagram is not None:
            self.instagram = instagram
        if facebook is not None:
            self.facebook = facebook
        if medium is not None:
            self.medium = medium

    @property
    def kind(self):
        """Gets the kind of this ProfileMetadata.  # noqa: E501


        :return: The kind of this ProfileMetadata.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ProfileMetadata.


        :param kind: The kind of this ProfileMetadata.  # noqa: E501
        :type: str
        """

        self._kind = kind

    @property
    def alias(self):
        """Gets the alias of this ProfileMetadata.  # noqa: E501


        :return: The alias of this ProfileMetadata.  # noqa: E501
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this ProfileMetadata.


        :param alias: The alias of this ProfileMetadata.  # noqa: E501
        :type: str
        """

        self._alias = alias

    @property
    def description(self):
        """Gets the description of this ProfileMetadata.  # noqa: E501


        :return: The description of this ProfileMetadata.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProfileMetadata.


        :param description: The description of this ProfileMetadata.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def site(self):
        """Gets the site of this ProfileMetadata.  # noqa: E501


        :return: The site of this ProfileMetadata.  # noqa: E501
        :rtype: str
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this ProfileMetadata.


        :param site: The site of this ProfileMetadata.  # noqa: E501
        :type: str
        """

        self._site = site

    @property
    def support(self):
        """Gets the support of this ProfileMetadata.  # noqa: E501


        :return: The support of this ProfileMetadata.  # noqa: E501
        :rtype: str
        """
        return self._support

    @support.setter
    def support(self, support):
        """Sets the support of this ProfileMetadata.


        :param support: The support of this ProfileMetadata.  # noqa: E501
        :type: str
        """

        self._support = support

    @property
    def email(self):
        """Gets the email of this ProfileMetadata.  # noqa: E501


        :return: The email of this ProfileMetadata.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ProfileMetadata.


        :param email: The email of this ProfileMetadata.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def twitter(self):
        """Gets the twitter of this ProfileMetadata.  # noqa: E501


        :return: The twitter of this ProfileMetadata.  # noqa: E501
        :rtype: str
        """
        return self._twitter

    @twitter.setter
    def twitter(self, twitter):
        """Sets the twitter of this ProfileMetadata.


        :param twitter: The twitter of this ProfileMetadata.  # noqa: E501
        :type: str
        """

        self._twitter = twitter

    @property
    def telegram(self):
        """Gets the telegram of this ProfileMetadata.  # noqa: E501


        :return: The telegram of this ProfileMetadata.  # noqa: E501
        :rtype: str
        """
        return self._telegram

    @telegram.setter
    def telegram(self, telegram):
        """Sets the telegram of this ProfileMetadata.


        :param telegram: The telegram of this ProfileMetadata.  # noqa: E501
        :type: str
        """

        self._telegram = telegram

    @property
    def discord(self):
        """Gets the discord of this ProfileMetadata.  # noqa: E501


        :return: The discord of this ProfileMetadata.  # noqa: E501
        :rtype: str
        """
        return self._discord

    @discord.setter
    def discord(self, discord):
        """Sets the discord of this ProfileMetadata.


        :param discord: The discord of this ProfileMetadata.  # noqa: E501
        :type: str
        """

        self._discord = discord

    @property
    def reddit(self):
        """Gets the reddit of this ProfileMetadata.  # noqa: E501


        :return: The reddit of this ProfileMetadata.  # noqa: E501
        :rtype: str
        """
        return self._reddit

    @reddit.setter
    def reddit(self, reddit):
        """Sets the reddit of this ProfileMetadata.


        :param reddit: The reddit of this ProfileMetadata.  # noqa: E501
        :type: str
        """

        self._reddit = reddit

    @property
    def slack(self):
        """Gets the slack of this ProfileMetadata.  # noqa: E501


        :return: The slack of this ProfileMetadata.  # noqa: E501
        :rtype: str
        """
        return self._slack

    @slack.setter
    def slack(self, slack):
        """Sets the slack of this ProfileMetadata.


        :param slack: The slack of this ProfileMetadata.  # noqa: E501
        :type: str
        """

        self._slack = slack

    @property
    def github(self):
        """Gets the github of this ProfileMetadata.  # noqa: E501


        :return: The github of this ProfileMetadata.  # noqa: E501
        :rtype: str
        """
        return self._github

    @github.setter
    def github(self, github):
        """Sets the github of this ProfileMetadata.


        :param github: The github of this ProfileMetadata.  # noqa: E501
        :type: str
        """

        self._github = github

    @property
    def gitlab(self):
        """Gets the gitlab of this ProfileMetadata.  # noqa: E501


        :return: The gitlab of this ProfileMetadata.  # noqa: E501
        :rtype: str
        """
        return self._gitlab

    @gitlab.setter
    def gitlab(self, gitlab):
        """Sets the gitlab of this ProfileMetadata.


        :param gitlab: The gitlab of this ProfileMetadata.  # noqa: E501
        :type: str
        """

        self._gitlab = gitlab

    @property
    def instagram(self):
        """Gets the instagram of this ProfileMetadata.  # noqa: E501


        :return: The instagram of this ProfileMetadata.  # noqa: E501
        :rtype: str
        """
        return self._instagram

    @instagram.setter
    def instagram(self, instagram):
        """Sets the instagram of this ProfileMetadata.


        :param instagram: The instagram of this ProfileMetadata.  # noqa: E501
        :type: str
        """

        self._instagram = instagram

    @property
    def facebook(self):
        """Gets the facebook of this ProfileMetadata.  # noqa: E501


        :return: The facebook of this ProfileMetadata.  # noqa: E501
        :rtype: str
        """
        return self._facebook

    @facebook.setter
    def facebook(self, facebook):
        """Sets the facebook of this ProfileMetadata.


        :param facebook: The facebook of this ProfileMetadata.  # noqa: E501
        :type: str
        """

        self._facebook = facebook

    @property
    def medium(self):
        """Gets the medium of this ProfileMetadata.  # noqa: E501


        :return: The medium of this ProfileMetadata.  # noqa: E501
        :rtype: str
        """
        return self._medium

    @medium.setter
    def medium(self, medium):
        """Sets the medium of this ProfileMetadata.


        :param medium: The medium of this ProfileMetadata.  # noqa: E501
        :type: str
        """

        self._medium = medium

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProfileMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProfileMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
