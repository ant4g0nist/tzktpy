# coding: utf-8

"""
    TzKT API

    # Introduction  TzKT Explorer provides free REST API and WebSocket API for accessing detailed Tezos blockchain data and helps developers build more services and applications on top of Tezos. TzKT is an open-source project, so you can easily clone and build it and use it as a self-hosted service to avoid any risks of depending on third-party services.  TzKT API is available for the following Tezos networks with the following base URLs:  - Mainnet: `https://api.tzkt.io/` or `https://api.mainnet.tzkt.io/` ([view docs](https://api.tzkt.io))  - Hangzhounet: `https://api.hangzhounet.tzkt.io/` ([view docs](https://api.hangzhounet.tzkt.io)) - Ithacanet: `https://api.ithacanet.tzkt.io/` ([view docs](https://api.ithacanet.tzkt.io))  We also provide a staging environment for testing newest features and pre-updating client applications before deploying to production:  - Mainnet staging: `https://staging.api.tzkt.io/` or `https://staging.api.mainnet.tzkt.io/` ([view docs](https://staging.api.tzkt.io))  Feel free to contact us if you have any questions or feature requests. Your feedback really helps us make TzKT better!  - Discord: https://discord.gg/aG8XKuwsQd - Telegram: https://t.me/baking_bad_chat - Slack: https://tezos-dev.slack.com/archives/CV5NX7F2L - Twitter: https://twitter.com/TezosBakingBad - Email: hello@baking-bad.org  And don't forget to star TzKT project [on GitHub](https://github.com/baking-bad/tzkt) ;)  # Terms of Use  TzKT API is free for everyone and for both commercial and non-commercial usage.  If your application or service uses the TzKT API in any forms: directly on frontend or indirectly on backend, you must mention that fact on your website or application by placing the label **\"Powered by TzKT API\"** or **\"Built with TzKT API\"** with a direct link to [tzkt.io](https://tzkt.io).   # Rate Limits  There will be no rate limits as long as our servers can handle the load without additional infrastructure costs. However, any apparent abuse will be prevented by setting targeted rate limits.  Check out [Tezos Explorer API Best Practices](https://baking-bad.org/blog/tag/TzKT/) and in particular [how to optimize requests count](https://baking-bad.org/blog/2020/07/29/tezos-explorer-api-tzkt-how-often-to-make-requests/).  ---   # noqa: E501

    OpenAPI spec version: v1.8.3
    Contact: hello@baking-bad.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Protocol(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'int',
        'hash': 'str',
        'first_level': 'int',
        'first_cycle': 'int',
        'first_cycle_level': 'int',
        'last_level': 'int',
        'constants': 'OneOfProtocolConstants',
        'metadata': 'OneOfProtocolMetadata'
    }

    attribute_map = {
        'code': 'code',
        'hash': 'hash',
        'first_level': 'firstLevel',
        'first_cycle': 'firstCycle',
        'first_cycle_level': 'firstCycleLevel',
        'last_level': 'lastLevel',
        'constants': 'constants',
        'metadata': 'metadata'
    }

    def __init__(self, code=None, hash=None, first_level=None, first_cycle=None, first_cycle_level=None, last_level=None, constants=None, metadata=None):  # noqa: E501
        """Protocol - a model defined in Swagger"""  # noqa: E501
        self._code = None
        self._hash = None
        self._first_level = None
        self._first_cycle = None
        self._first_cycle_level = None
        self._last_level = None
        self._constants = None
        self._metadata = None
        self.discriminator = None
        if code is not None:
            self.code = code
        if hash is not None:
            self.hash = hash
        if first_level is not None:
            self.first_level = first_level
        if first_cycle is not None:
            self.first_cycle = first_cycle
        if first_cycle_level is not None:
            self.first_cycle_level = first_cycle_level
        if last_level is not None:
            self.last_level = last_level
        if constants is not None:
            self.constants = constants
        if metadata is not None:
            self.metadata = metadata

    @property
    def code(self):
        """Gets the code of this Protocol.  # noqa: E501

        Protocol code, representing a number of protocol changes since genesis (mod 256, but `-1` for the genesis block)  # noqa: E501

        :return: The code of this Protocol.  # noqa: E501
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Protocol.

        Protocol code, representing a number of protocol changes since genesis (mod 256, but `-1` for the genesis block)  # noqa: E501

        :param code: The code of this Protocol.  # noqa: E501
        :type: int
        """

        self._code = code

    @property
    def hash(self):
        """Gets the hash of this Protocol.  # noqa: E501

        Hash of the protocol  # noqa: E501

        :return: The hash of this Protocol.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this Protocol.

        Hash of the protocol  # noqa: E501

        :param hash: The hash of this Protocol.  # noqa: E501
        :type: str
        """

        self._hash = hash

    @property
    def first_level(self):
        """Gets the first_level of this Protocol.  # noqa: E501

        Block height where the protocol was applied  # noqa: E501

        :return: The first_level of this Protocol.  # noqa: E501
        :rtype: int
        """
        return self._first_level

    @first_level.setter
    def first_level(self, first_level):
        """Sets the first_level of this Protocol.

        Block height where the protocol was applied  # noqa: E501

        :param first_level: The first_level of this Protocol.  # noqa: E501
        :type: int
        """

        self._first_level = first_level

    @property
    def first_cycle(self):
        """Gets the first_cycle of this Protocol.  # noqa: E501

        Index of the first cycle started with the protocol  # noqa: E501

        :return: The first_cycle of this Protocol.  # noqa: E501
        :rtype: int
        """
        return self._first_cycle

    @first_cycle.setter
    def first_cycle(self, first_cycle):
        """Sets the first_cycle of this Protocol.

        Index of the first cycle started with the protocol  # noqa: E501

        :param first_cycle: The first_cycle of this Protocol.  # noqa: E501
        :type: int
        """

        self._first_cycle = first_cycle

    @property
    def first_cycle_level(self):
        """Gets the first_cycle_level of this Protocol.  # noqa: E501

        Level of the first block of the first cycle started with the protocol  # noqa: E501

        :return: The first_cycle_level of this Protocol.  # noqa: E501
        :rtype: int
        """
        return self._first_cycle_level

    @first_cycle_level.setter
    def first_cycle_level(self, first_cycle_level):
        """Sets the first_cycle_level of this Protocol.

        Level of the first block of the first cycle started with the protocol  # noqa: E501

        :param first_cycle_level: The first_cycle_level of this Protocol.  # noqa: E501
        :type: int
        """

        self._first_cycle_level = first_cycle_level

    @property
    def last_level(self):
        """Gets the last_level of this Protocol.  # noqa: E501

        Block height where the protocol ends. `null` if the protocol is active  # noqa: E501

        :return: The last_level of this Protocol.  # noqa: E501
        :rtype: int
        """
        return self._last_level

    @last_level.setter
    def last_level(self, last_level):
        """Sets the last_level of this Protocol.

        Block height where the protocol ends. `null` if the protocol is active  # noqa: E501

        :param last_level: The last_level of this Protocol.  # noqa: E501
        :type: int
        """

        self._last_level = last_level

    @property
    def constants(self):
        """Gets the constants of this Protocol.  # noqa: E501

        Information about the protocol constants  # noqa: E501

        :return: The constants of this Protocol.  # noqa: E501
        :rtype: OneOfProtocolConstants
        """
        return self._constants

    @constants.setter
    def constants(self, constants):
        """Sets the constants of this Protocol.

        Information about the protocol constants  # noqa: E501

        :param constants: The constants of this Protocol.  # noqa: E501
        :type: OneOfProtocolConstants
        """

        self._constants = constants

    @property
    def metadata(self):
        """Gets the metadata of this Protocol.  # noqa: E501

        Offchain metadata  # noqa: E501

        :return: The metadata of this Protocol.  # noqa: E501
        :rtype: OneOfProtocolMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Protocol.

        Offchain metadata  # noqa: E501

        :param metadata: The metadata of this Protocol.  # noqa: E501
        :type: OneOfProtocolMetadata
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Protocol, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Protocol):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
