# coding: utf-8

"""
    TzKT API

    # Introduction  TzKT Explorer provides free REST API and WebSocket API for accessing detailed Tezos blockchain data and helps developers build more services and applications on top of Tezos. TzKT is an open-source project, so you can easily clone and build it and use it as a self-hosted service to avoid any risks of depending on third-party services.  TzKT API is available for the following Tezos networks with the following base URLs:  - Mainnet: `https://api.tzkt.io/` or `https://api.mainnet.tzkt.io/` ([view docs](https://api.tzkt.io))  - Hangzhounet: `https://api.hangzhounet.tzkt.io/` ([view docs](https://api.hangzhounet.tzkt.io)) - Ithacanet: `https://api.ithacanet.tzkt.io/` ([view docs](https://api.ithacanet.tzkt.io))  We also provide a staging environment for testing newest features and pre-updating client applications before deploying to production:  - Mainnet staging: `https://staging.api.tzkt.io/` or `https://staging.api.mainnet.tzkt.io/` ([view docs](https://staging.api.tzkt.io))  Feel free to contact us if you have any questions or feature requests. Your feedback really helps us make TzKT better!  - Discord: https://discord.gg/aG8XKuwsQd - Telegram: https://t.me/baking_bad_chat - Slack: https://tezos-dev.slack.com/archives/CV5NX7F2L - Twitter: https://twitter.com/TezosBakingBad - Email: hello@baking-bad.org  And don't forget to star TzKT project [on GitHub](https://github.com/baking-bad/tzkt) ;)  # Terms of Use  TzKT API is free for everyone and for both commercial and non-commercial usage.  If your application or service uses the TzKT API in any forms: directly on frontend or indirectly on backend, you must mention that fact on your website or application by placing the label **\"Powered by TzKT API\"** or **\"Built with TzKT API\"** with a direct link to [tzkt.io](https://tzkt.io).   # Rate Limits  There will be no rate limits as long as our servers can handle the load without additional infrastructure costs. However, any apparent abuse will be prevented by setting targeted rate limits.  Check out [Tezos Explorer API Best Practices](https://baking-bad.org/blog/tag/TzKT/) and in particular [how to optimize requests count](https://baking-bad.org/blog/2020/07/29/tezos-explorer-api-tzkt-how-often-to-make-requests/).  ---   # noqa: E501

    OpenAPI spec version: v1.8.3
    Contact: hello@baking-bad.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.model.operation import Operation  # noqa: F401,E501

class OriginationOperation(Operation):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'id': 'int',
        'level': 'int',
        'timestamp': 'datetime',
        'block': 'str',
        'hash': 'str',
        'counter': 'int',
        'initiator': 'object',
        'sender': 'object',
        'nonce': 'int',
        'gas_limit': 'int',
        'gas_used': 'int',
        'storage_limit': 'int',
        'storage_used': 'int',
        'baker_fee': 'int',
        'storage_fee': 'int',
        'allocation_fee': 'int',
        'contract_balance': 'int',
        'contract_manager': 'object',
        'contract_delegate': 'object',
        'code': 'object',
        'storage': 'object',
        'diffs': 'list[BigMapDiff]',
        'status': 'str',
        'errors': 'list[OperationError]',
        'originated_contract': 'object',
        'token_transfers_count': 'int',
        'quote': 'object'
    }
    if hasattr(Operation, "swagger_types"):
        swagger_types.update(Operation.swagger_types)

    attribute_map = {
        'type': 'type',
        'id': 'id',
        'level': 'level',
        'timestamp': 'timestamp',
        'block': 'block',
        'hash': 'hash',
        'counter': 'counter',
        'initiator': 'initiator',
        'sender': 'sender',
        'nonce': 'nonce',
        'gas_limit': 'gasLimit',
        'gas_used': 'gasUsed',
        'storage_limit': 'storageLimit',
        'storage_used': 'storageUsed',
        'baker_fee': 'bakerFee',
        'storage_fee': 'storageFee',
        'allocation_fee': 'allocationFee',
        'contract_balance': 'contractBalance',
        'contract_manager': 'contractManager',
        'contract_delegate': 'contractDelegate',
        'code': 'code',
        'storage': 'storage',
        'diffs': 'diffs',
        'status': 'status',
        'errors': 'errors',
        'originated_contract': 'originatedContract',
        'token_transfers_count': 'tokenTransfersCount',
        'quote': 'quote'
    }
    if hasattr(Operation, "attribute_map"):
        attribute_map.update(Operation.attribute_map)

    def __init__(self, type=None, id=None, level=None, timestamp=None, block=None, hash=None, counter=None, initiator=None, sender=None, nonce=None, gas_limit=None, gas_used=None, storage_limit=None, storage_used=None, baker_fee=None, storage_fee=None, allocation_fee=None, contract_balance=None, contract_manager=None, contract_delegate=None, code=None, storage=None, diffs=None, status=None, errors=None, originated_contract=None, token_transfers_count=None, quote=None, *args, **kwargs):  # noqa: E501
        """OriginationOperation - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._id = None
        self._level = None
        self._timestamp = None
        self._block = None
        self._hash = None
        self._counter = None
        self._initiator = None
        self._sender = None
        self._nonce = None
        self._gas_limit = None
        self._gas_used = None
        self._storage_limit = None
        self._storage_used = None
        self._baker_fee = None
        self._storage_fee = None
        self._allocation_fee = None
        self._contract_balance = None
        self._contract_manager = None
        self._contract_delegate = None
        self._code = None
        self._storage = None
        self._diffs = None
        self._status = None
        self._errors = None
        self._originated_contract = None
        self._token_transfers_count = None
        self._quote = None
        self.discriminator = None
        if type is not None:
            self.type = type
        if id is not None:
            self.id = id
        if level is not None:
            self.level = level
        if timestamp is not None:
            self.timestamp = timestamp
        if block is not None:
            self.block = block
        if hash is not None:
            self.hash = hash
        if counter is not None:
            self.counter = counter
        if initiator is not None:
            self.initiator = initiator
        if sender is not None:
            self.sender = sender
        if nonce is not None:
            self.nonce = nonce
        if gas_limit is not None:
            self.gas_limit = gas_limit
        if gas_used is not None:
            self.gas_used = gas_used
        if storage_limit is not None:
            self.storage_limit = storage_limit
        if storage_used is not None:
            self.storage_used = storage_used
        if baker_fee is not None:
            self.baker_fee = baker_fee
        if storage_fee is not None:
            self.storage_fee = storage_fee
        if allocation_fee is not None:
            self.allocation_fee = allocation_fee
        if contract_balance is not None:
            self.contract_balance = contract_balance
        if contract_manager is not None:
            self.contract_manager = contract_manager
        if contract_delegate is not None:
            self.contract_delegate = contract_delegate
        if code is not None:
            self.code = code
        if storage is not None:
            self.storage = storage
        if diffs is not None:
            self.diffs = diffs
        if status is not None:
            self.status = status
        if errors is not None:
            self.errors = errors
        if originated_contract is not None:
            self.originated_contract = originated_contract
        if token_transfers_count is not None:
            self.token_transfers_count = token_transfers_count
        if quote is not None:
            self.quote = quote
        Operation.__init__(self, *args, **kwargs)

    @property
    def type(self):
        """Gets the type of this OriginationOperation.  # noqa: E501

        Type of the operation, `origination` - deployment / contract creation operation.  # noqa: E501

        :return: The type of this OriginationOperation.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OriginationOperation.

        Type of the operation, `origination` - deployment / contract creation operation.  # noqa: E501

        :param type: The type of this OriginationOperation.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def id(self):
        """Gets the id of this OriginationOperation.  # noqa: E501

        Unique ID of the operation, stored in the TzKT indexer database  # noqa: E501

        :return: The id of this OriginationOperation.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OriginationOperation.

        Unique ID of the operation, stored in the TzKT indexer database  # noqa: E501

        :param id: The id of this OriginationOperation.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def level(self):
        """Gets the level of this OriginationOperation.  # noqa: E501

        The height of the block from the genesis block, in which the operation was included  # noqa: E501

        :return: The level of this OriginationOperation.  # noqa: E501
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this OriginationOperation.

        The height of the block from the genesis block, in which the operation was included  # noqa: E501

        :param level: The level of this OriginationOperation.  # noqa: E501
        :type: int
        """

        self._level = level

    @property
    def timestamp(self):
        """Gets the timestamp of this OriginationOperation.  # noqa: E501

        Datetime of the block, in which the operation was included (ISO 8601, e.g. `2020-02-20T02:40:57Z`)  # noqa: E501

        :return: The timestamp of this OriginationOperation.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this OriginationOperation.

        Datetime of the block, in which the operation was included (ISO 8601, e.g. `2020-02-20T02:40:57Z`)  # noqa: E501

        :param timestamp: The timestamp of this OriginationOperation.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def block(self):
        """Gets the block of this OriginationOperation.  # noqa: E501

        Hash of the block, in which the operation was included  # noqa: E501

        :return: The block of this OriginationOperation.  # noqa: E501
        :rtype: str
        """
        return self._block

    @block.setter
    def block(self, block):
        """Sets the block of this OriginationOperation.

        Hash of the block, in which the operation was included  # noqa: E501

        :param block: The block of this OriginationOperation.  # noqa: E501
        :type: str
        """

        self._block = block

    @property
    def hash(self):
        """Gets the hash of this OriginationOperation.  # noqa: E501

        Hash of the operation  # noqa: E501

        :return: The hash of this OriginationOperation.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this OriginationOperation.

        Hash of the operation  # noqa: E501

        :param hash: The hash of this OriginationOperation.  # noqa: E501
        :type: str
        """

        self._hash = hash

    @property
    def counter(self):
        """Gets the counter of this OriginationOperation.  # noqa: E501

        An account nonce which is used to prevent operation replay  # noqa: E501

        :return: The counter of this OriginationOperation.  # noqa: E501
        :rtype: int
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this OriginationOperation.

        An account nonce which is used to prevent operation replay  # noqa: E501

        :param counter: The counter of this OriginationOperation.  # noqa: E501
        :type: int
        """

        self._counter = counter

    @property
    def initiator(self):
        """Gets the initiator of this OriginationOperation.  # noqa: E501

        Information about the initiator of the contract call  # noqa: E501

        :return: The initiator of this OriginationOperation.  # noqa: E501
        :rtype: object
        """
        return self._initiator

    @initiator.setter
    def initiator(self, initiator):
        """Sets the initiator of this OriginationOperation.

        Information about the initiator of the contract call  # noqa: E501

        :param initiator: The initiator of this OriginationOperation.  # noqa: E501
        :type: object
        """

        self._initiator = initiator

    @property
    def sender(self):
        """Gets the sender of this OriginationOperation.  # noqa: E501

        Information about the account, created a contract  # noqa: E501

        :return: The sender of this OriginationOperation.  # noqa: E501
        :rtype: object
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """Sets the sender of this OriginationOperation.

        Information about the account, created a contract  # noqa: E501

        :param sender: The sender of this OriginationOperation.  # noqa: E501
        :type: object
        """

        self._sender = sender

    @property
    def nonce(self):
        """Gets the nonce of this OriginationOperation.  # noqa: E501

        An account nonce which is used to prevent internal operation replay  # noqa: E501

        :return: The nonce of this OriginationOperation.  # noqa: E501
        :rtype: int
        """
        return self._nonce

    @nonce.setter
    def nonce(self, nonce):
        """Sets the nonce of this OriginationOperation.

        An account nonce which is used to prevent internal operation replay  # noqa: E501

        :param nonce: The nonce of this OriginationOperation.  # noqa: E501
        :type: int
        """

        self._nonce = nonce

    @property
    def gas_limit(self):
        """Gets the gas_limit of this OriginationOperation.  # noqa: E501

        A cap on the amount of gas a given operation can consume  # noqa: E501

        :return: The gas_limit of this OriginationOperation.  # noqa: E501
        :rtype: int
        """
        return self._gas_limit

    @gas_limit.setter
    def gas_limit(self, gas_limit):
        """Sets the gas_limit of this OriginationOperation.

        A cap on the amount of gas a given operation can consume  # noqa: E501

        :param gas_limit: The gas_limit of this OriginationOperation.  # noqa: E501
        :type: int
        """

        self._gas_limit = gas_limit

    @property
    def gas_used(self):
        """Gets the gas_used of this OriginationOperation.  # noqa: E501

        Amount of gas, consumed by the operation  # noqa: E501

        :return: The gas_used of this OriginationOperation.  # noqa: E501
        :rtype: int
        """
        return self._gas_used

    @gas_used.setter
    def gas_used(self, gas_used):
        """Sets the gas_used of this OriginationOperation.

        Amount of gas, consumed by the operation  # noqa: E501

        :param gas_used: The gas_used of this OriginationOperation.  # noqa: E501
        :type: int
        """

        self._gas_used = gas_used

    @property
    def storage_limit(self):
        """Gets the storage_limit of this OriginationOperation.  # noqa: E501

        A cap on the amount of storage a given operation can consume  # noqa: E501

        :return: The storage_limit of this OriginationOperation.  # noqa: E501
        :rtype: int
        """
        return self._storage_limit

    @storage_limit.setter
    def storage_limit(self, storage_limit):
        """Sets the storage_limit of this OriginationOperation.

        A cap on the amount of storage a given operation can consume  # noqa: E501

        :param storage_limit: The storage_limit of this OriginationOperation.  # noqa: E501
        :type: int
        """

        self._storage_limit = storage_limit

    @property
    def storage_used(self):
        """Gets the storage_used of this OriginationOperation.  # noqa: E501

        Amount of storage, consumed by the operation  # noqa: E501

        :return: The storage_used of this OriginationOperation.  # noqa: E501
        :rtype: int
        """
        return self._storage_used

    @storage_used.setter
    def storage_used(self, storage_used):
        """Sets the storage_used of this OriginationOperation.

        Amount of storage, consumed by the operation  # noqa: E501

        :param storage_used: The storage_used of this OriginationOperation.  # noqa: E501
        :type: int
        """

        self._storage_used = storage_used

    @property
    def baker_fee(self):
        """Gets the baker_fee of this OriginationOperation.  # noqa: E501

        Fee to the baker, produced block, in which the operation was included (micro tez)  # noqa: E501

        :return: The baker_fee of this OriginationOperation.  # noqa: E501
        :rtype: int
        """
        return self._baker_fee

    @baker_fee.setter
    def baker_fee(self, baker_fee):
        """Sets the baker_fee of this OriginationOperation.

        Fee to the baker, produced block, in which the operation was included (micro tez)  # noqa: E501

        :param baker_fee: The baker_fee of this OriginationOperation.  # noqa: E501
        :type: int
        """

        self._baker_fee = baker_fee

    @property
    def storage_fee(self):
        """Gets the storage_fee of this OriginationOperation.  # noqa: E501

        The amount of funds burned from the sender account for contract storage in the blockchain (micro tez)  # noqa: E501

        :return: The storage_fee of this OriginationOperation.  # noqa: E501
        :rtype: int
        """
        return self._storage_fee

    @storage_fee.setter
    def storage_fee(self, storage_fee):
        """Sets the storage_fee of this OriginationOperation.

        The amount of funds burned from the sender account for contract storage in the blockchain (micro tez)  # noqa: E501

        :param storage_fee: The storage_fee of this OriginationOperation.  # noqa: E501
        :type: int
        """

        self._storage_fee = storage_fee

    @property
    def allocation_fee(self):
        """Gets the allocation_fee of this OriginationOperation.  # noqa: E501

        The amount of funds burned from the sender account for contract account creation (micro tez)  # noqa: E501

        :return: The allocation_fee of this OriginationOperation.  # noqa: E501
        :rtype: int
        """
        return self._allocation_fee

    @allocation_fee.setter
    def allocation_fee(self, allocation_fee):
        """Sets the allocation_fee of this OriginationOperation.

        The amount of funds burned from the sender account for contract account creation (micro tez)  # noqa: E501

        :param allocation_fee: The allocation_fee of this OriginationOperation.  # noqa: E501
        :type: int
        """

        self._allocation_fee = allocation_fee

    @property
    def contract_balance(self):
        """Gets the contract_balance of this OriginationOperation.  # noqa: E501

        The contract origination balance (micro tez)  # noqa: E501

        :return: The contract_balance of this OriginationOperation.  # noqa: E501
        :rtype: int
        """
        return self._contract_balance

    @contract_balance.setter
    def contract_balance(self, contract_balance):
        """Sets the contract_balance of this OriginationOperation.

        The contract origination balance (micro tez)  # noqa: E501

        :param contract_balance: The contract_balance of this OriginationOperation.  # noqa: E501
        :type: int
        """

        self._contract_balance = contract_balance

    @property
    def contract_manager(self):
        """Gets the contract_manager of this OriginationOperation.  # noqa: E501

        Information about the account, which was marked as a manager in the operation  # noqa: E501

        :return: The contract_manager of this OriginationOperation.  # noqa: E501
        :rtype: object
        """
        return self._contract_manager

    @contract_manager.setter
    def contract_manager(self, contract_manager):
        """Sets the contract_manager of this OriginationOperation.

        Information about the account, which was marked as a manager in the operation  # noqa: E501

        :param contract_manager: The contract_manager of this OriginationOperation.  # noqa: E501
        :type: object
        """

        self._contract_manager = contract_manager

    @property
    def contract_delegate(self):
        """Gets the contract_delegate of this OriginationOperation.  # noqa: E501

        Information about the baker (delegate), which was marked as a delegate in the operation  # noqa: E501

        :return: The contract_delegate of this OriginationOperation.  # noqa: E501
        :rtype: object
        """
        return self._contract_delegate

    @contract_delegate.setter
    def contract_delegate(self, contract_delegate):
        """Sets the contract_delegate of this OriginationOperation.

        Information about the baker (delegate), which was marked as a delegate in the operation  # noqa: E501

        :param contract_delegate: The contract_delegate of this OriginationOperation.  # noqa: E501
        :type: object
        """

        self._contract_delegate = contract_delegate

    @property
    def code(self):
        """Gets the code of this OriginationOperation.  # noqa: E501

        Contract code. Note: you can configure code format by setting `micheline` query parameter (`0 | 2` - raw micheline, `1 | 3` - raw micheline string).  # noqa: E501

        :return: The code of this OriginationOperation.  # noqa: E501
        :rtype: object
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this OriginationOperation.

        Contract code. Note: you can configure code format by setting `micheline` query parameter (`0 | 2` - raw micheline, `1 | 3` - raw micheline string).  # noqa: E501

        :param code: The code of this OriginationOperation.  # noqa: E501
        :type: object
        """

        self._code = code

    @property
    def storage(self):
        """Gets the storage of this OriginationOperation.  # noqa: E501

        Initial contract storage value converted to human-readable JSON. Note: you can configure storage format by setting `micheline` query parameter.  # noqa: E501

        :return: The storage of this OriginationOperation.  # noqa: E501
        :rtype: object
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this OriginationOperation.

        Initial contract storage value converted to human-readable JSON. Note: you can configure storage format by setting `micheline` query parameter.  # noqa: E501

        :param storage: The storage of this OriginationOperation.  # noqa: E501
        :type: object
        """

        self._storage = storage

    @property
    def diffs(self):
        """Gets the diffs of this OriginationOperation.  # noqa: E501

        List of bigmap updates (aka big_map_diffs) caused by the origination.  # noqa: E501

        :return: The diffs of this OriginationOperation.  # noqa: E501
        :rtype: list[BigMapDiff]
        """
        return self._diffs

    @diffs.setter
    def diffs(self, diffs):
        """Sets the diffs of this OriginationOperation.

        List of bigmap updates (aka big_map_diffs) caused by the origination.  # noqa: E501

        :param diffs: The diffs of this OriginationOperation.  # noqa: E501
        :type: list[BigMapDiff]
        """

        self._diffs = diffs

    @property
    def status(self):
        """Gets the status of this OriginationOperation.  # noqa: E501

        Operation status (`applied` - an operation applied by the node and successfully added to the blockchain, `failed` - an operation which failed with some particular error (not enough balance, gas limit, etc), `backtracked` - an operation which was a successful but reverted due to one of the following operations in the same operation group was failed, `skipped` - all operations after the failed one in an operation group)  # noqa: E501

        :return: The status of this OriginationOperation.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OriginationOperation.

        Operation status (`applied` - an operation applied by the node and successfully added to the blockchain, `failed` - an operation which failed with some particular error (not enough balance, gas limit, etc), `backtracked` - an operation which was a successful but reverted due to one of the following operations in the same operation group was failed, `skipped` - all operations after the failed one in an operation group)  # noqa: E501

        :param status: The status of this OriginationOperation.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def errors(self):
        """Gets the errors of this OriginationOperation.  # noqa: E501

        List of errors provided by the node, injected the operation to the blockchain. `null` if there is no errors  # noqa: E501

        :return: The errors of this OriginationOperation.  # noqa: E501
        :rtype: list[OperationError]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this OriginationOperation.

        List of errors provided by the node, injected the operation to the blockchain. `null` if there is no errors  # noqa: E501

        :param errors: The errors of this OriginationOperation.  # noqa: E501
        :type: list[OperationError]
        """

        self._errors = errors

    @property
    def originated_contract(self):
        """Gets the originated_contract of this OriginationOperation.  # noqa: E501

        Information about the originated ( deployed / created ) contract  # noqa: E501

        :return: The originated_contract of this OriginationOperation.  # noqa: E501
        :rtype: object
        """
        return self._originated_contract

    @originated_contract.setter
    def originated_contract(self, originated_contract):
        """Sets the originated_contract of this OriginationOperation.

        Information about the originated ( deployed / created ) contract  # noqa: E501

        :param originated_contract: The originated_contract of this OriginationOperation.  # noqa: E501
        :type: object
        """

        self._originated_contract = originated_contract

    @property
    def token_transfers_count(self):
        """Gets the token_transfers_count of this OriginationOperation.  # noqa: E501

        Number of token transfers produced by the operation, or `null` if there are no transfers  # noqa: E501

        :return: The token_transfers_count of this OriginationOperation.  # noqa: E501
        :rtype: int
        """
        return self._token_transfers_count

    @token_transfers_count.setter
    def token_transfers_count(self, token_transfers_count):
        """Sets the token_transfers_count of this OriginationOperation.

        Number of token transfers produced by the operation, or `null` if there are no transfers  # noqa: E501

        :param token_transfers_count: The token_transfers_count of this OriginationOperation.  # noqa: E501
        :type: int
        """

        self._token_transfers_count = token_transfers_count

    @property
    def quote(self):
        """Gets the quote of this OriginationOperation.  # noqa: E501

        Injected historical quote at the time of operation  # noqa: E501

        :return: The quote of this OriginationOperation.  # noqa: E501
        :rtype: object
        """
        return self._quote

    @quote.setter
    def quote(self, quote):
        """Sets the quote of this OriginationOperation.

        Injected historical quote at the time of operation  # noqa: E501

        :param quote: The quote of this OriginationOperation.  # noqa: E501
        :type: object
        """

        self._quote = quote

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OriginationOperation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OriginationOperation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
