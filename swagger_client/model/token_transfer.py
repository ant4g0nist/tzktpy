# coding: utf-8

"""
    TzKT API

    # Introduction  TzKT Explorer provides free REST API and WebSocket API for accessing detailed Tezos blockchain data and helps developers build more services and applications on top of Tezos. TzKT is an open-source project, so you can easily clone and build it and use it as a self-hosted service to avoid any risks of depending on third-party services.  TzKT API is available for the following Tezos networks with the following base URLs:  - Mainnet: `https://api.tzkt.io/` or `https://api.mainnet.tzkt.io/` ([view docs](https://api.tzkt.io))  - Hangzhounet: `https://api.hangzhounet.tzkt.io/` ([view docs](https://api.hangzhounet.tzkt.io)) - Ithacanet: `https://api.ithacanet.tzkt.io/` ([view docs](https://api.ithacanet.tzkt.io))  We also provide a staging environment for testing newest features and pre-updating client applications before deploying to production:  - Mainnet staging: `https://staging.api.tzkt.io/` or `https://staging.api.mainnet.tzkt.io/` ([view docs](https://staging.api.tzkt.io))  Feel free to contact us if you have any questions or feature requests. Your feedback really helps us make TzKT better!  - Discord: https://discord.gg/aG8XKuwsQd - Telegram: https://t.me/baking_bad_chat - Slack: https://tezos-dev.slack.com/archives/CV5NX7F2L - Twitter: https://twitter.com/TezosBakingBad - Email: hello@baking-bad.org  And don't forget to star TzKT project [on GitHub](https://github.com/baking-bad/tzkt) ;)  # Terms of Use  TzKT API is free for everyone and for both commercial and non-commercial usage.  If your application or service uses the TzKT API in any forms: directly on frontend or indirectly on backend, you must mention that fact on your website or application by placing the label **\"Powered by TzKT API\"** or **\"Built with TzKT API\"** with a direct link to [tzkt.io](https://tzkt.io).   # Rate Limits  There will be no rate limits as long as our servers can handle the load without additional infrastructure costs. However, any apparent abuse will be prevented by setting targeted rate limits.  Check out [Tezos Explorer API Best Practices](https://baking-bad.org/blog/tag/TzKT/) and in particular [how to optimize requests count](https://baking-bad.org/blog/2020/07/29/tezos-explorer-api-tzkt-how-often-to-make-requests/).  ---   # noqa: E501

    OpenAPI spec version: v1.8.3
    Contact: hello@baking-bad.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TokenTransfer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'level': 'int',
        'timestamp': 'datetime',
        'token': 'OneOfTokenTransferToken',
        '_from': 'OneOfTokenTransferFrom',
        'to': 'OneOfTokenTransferTo',
        'amount': 'str',
        'transaction_id': 'int',
        'origination_id': 'int',
        'migration_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'level': 'level',
        'timestamp': 'timestamp',
        'token': 'token',
        '_from': 'from',
        'to': 'to',
        'amount': 'amount',
        'transaction_id': 'transactionId',
        'origination_id': 'originationId',
        'migration_id': 'migrationId'
    }

    def __init__(self, id=None, level=None, timestamp=None, token=None, _from=None, to=None, amount=None, transaction_id=None, origination_id=None, migration_id=None):  # noqa: E501
        """TokenTransfer - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._level = None
        self._timestamp = None
        self._token = None
        self.__from = None
        self._to = None
        self._amount = None
        self._transaction_id = None
        self._origination_id = None
        self._migration_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if level is not None:
            self.level = level
        if timestamp is not None:
            self.timestamp = timestamp
        if token is not None:
            self.token = token
        if _from is not None:
            self._from = _from
        if to is not None:
            self.to = to
        if amount is not None:
            self.amount = amount
        if transaction_id is not None:
            self.transaction_id = transaction_id
        if origination_id is not None:
            self.origination_id = origination_id
        if migration_id is not None:
            self.migration_id = migration_id

    @property
    def id(self):
        """Gets the id of this TokenTransfer.  # noqa: E501

        Internal TzKT id.   **[sortable]**  # noqa: E501

        :return: The id of this TokenTransfer.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TokenTransfer.

        Internal TzKT id.   **[sortable]**  # noqa: E501

        :param id: The id of this TokenTransfer.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def level(self):
        """Gets the level of this TokenTransfer.  # noqa: E501

        Level of the block, at which the token transfer was made.   **[sortable]**  # noqa: E501

        :return: The level of this TokenTransfer.  # noqa: E501
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this TokenTransfer.

        Level of the block, at which the token transfer was made.   **[sortable]**  # noqa: E501

        :param level: The level of this TokenTransfer.  # noqa: E501
        :type: int
        """

        self._level = level

    @property
    def timestamp(self):
        """Gets the timestamp of this TokenTransfer.  # noqa: E501

        Timestamp of the block, at which the token transfer was made.  # noqa: E501

        :return: The timestamp of this TokenTransfer.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this TokenTransfer.

        Timestamp of the block, at which the token transfer was made.  # noqa: E501

        :param timestamp: The timestamp of this TokenTransfer.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def token(self):
        """Gets the token of this TokenTransfer.  # noqa: E501

        Token info.   Click on the field to expand more details.  # noqa: E501

        :return: The token of this TokenTransfer.  # noqa: E501
        :rtype: OneOfTokenTransferToken
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this TokenTransfer.

        Token info.   Click on the field to expand more details.  # noqa: E501

        :param token: The token of this TokenTransfer.  # noqa: E501
        :type: OneOfTokenTransferToken
        """

        self._token = token

    @property
    def _from(self):
        """Gets the _from of this TokenTransfer.  # noqa: E501

        Sender account.   Click on the field to expand more details.  # noqa: E501

        :return: The _from of this TokenTransfer.  # noqa: E501
        :rtype: OneOfTokenTransferFrom
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this TokenTransfer.

        Sender account.   Click on the field to expand more details.  # noqa: E501

        :param _from: The _from of this TokenTransfer.  # noqa: E501
        :type: OneOfTokenTransferFrom
        """

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this TokenTransfer.  # noqa: E501

        Target account.   Click on the field to expand more details.  # noqa: E501

        :return: The to of this TokenTransfer.  # noqa: E501
        :rtype: OneOfTokenTransferTo
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this TokenTransfer.

        Target account.   Click on the field to expand more details.  # noqa: E501

        :param to: The to of this TokenTransfer.  # noqa: E501
        :type: OneOfTokenTransferTo
        """

        self._to = to

    @property
    def amount(self):
        """Gets the amount of this TokenTransfer.  # noqa: E501

        Amount of tokens transferred (raw value, not divided by `decimals`).   **[sortable]**  # noqa: E501

        :return: The amount of this TokenTransfer.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this TokenTransfer.

        Amount of tokens transferred (raw value, not divided by `decimals`).   **[sortable]**  # noqa: E501

        :param amount: The amount of this TokenTransfer.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def transaction_id(self):
        """Gets the transaction_id of this TokenTransfer.  # noqa: E501

        Internal TzKT id of the transaction operation, caused the token transfer.  # noqa: E501

        :return: The transaction_id of this TokenTransfer.  # noqa: E501
        :rtype: int
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this TokenTransfer.

        Internal TzKT id of the transaction operation, caused the token transfer.  # noqa: E501

        :param transaction_id: The transaction_id of this TokenTransfer.  # noqa: E501
        :type: int
        """

        self._transaction_id = transaction_id

    @property
    def origination_id(self):
        """Gets the origination_id of this TokenTransfer.  # noqa: E501

        Internal TzKT id of the origination operation, caused the token transfer.  # noqa: E501

        :return: The origination_id of this TokenTransfer.  # noqa: E501
        :rtype: int
        """
        return self._origination_id

    @origination_id.setter
    def origination_id(self, origination_id):
        """Sets the origination_id of this TokenTransfer.

        Internal TzKT id of the origination operation, caused the token transfer.  # noqa: E501

        :param origination_id: The origination_id of this TokenTransfer.  # noqa: E501
        :type: int
        """

        self._origination_id = origination_id

    @property
    def migration_id(self):
        """Gets the migration_id of this TokenTransfer.  # noqa: E501

        Internal TzKT id of the migration operation, caused the token transfer.  # noqa: E501

        :return: The migration_id of this TokenTransfer.  # noqa: E501
        :rtype: int
        """
        return self._migration_id

    @migration_id.setter
    def migration_id(self, migration_id):
        """Sets the migration_id of this TokenTransfer.

        Internal TzKT id of the migration operation, caused the token transfer.  # noqa: E501

        :param migration_id: The migration_id of this TokenTransfer.  # noqa: E501
        :type: int
        """

        self._migration_id = migration_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TokenTransfer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TokenTransfer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
