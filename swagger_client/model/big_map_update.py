# coding: utf-8

"""
    TzKT API

    # Introduction  TzKT Explorer provides free REST API and WebSocket API for accessing detailed Tezos blockchain data and helps developers build more services and applications on top of Tezos. TzKT is an open-source project, so you can easily clone and build it and use it as a self-hosted service to avoid any risks of depending on third-party services.  TzKT API is available for the following Tezos networks with the following base URLs:  - Mainnet: `https://api.tzkt.io/` or `https://api.mainnet.tzkt.io/` ([view docs](https://api.tzkt.io))  - Hangzhounet: `https://api.hangzhounet.tzkt.io/` ([view docs](https://api.hangzhounet.tzkt.io)) - Ithacanet: `https://api.ithacanet.tzkt.io/` ([view docs](https://api.ithacanet.tzkt.io))  We also provide a staging environment for testing newest features and pre-updating client applications before deploying to production:  - Mainnet staging: `https://staging.api.tzkt.io/` or `https://staging.api.mainnet.tzkt.io/` ([view docs](https://staging.api.tzkt.io))  Feel free to contact us if you have any questions or feature requests. Your feedback really helps us make TzKT better!  - Discord: https://discord.gg/aG8XKuwsQd - Telegram: https://t.me/baking_bad_chat - Slack: https://tezos-dev.slack.com/archives/CV5NX7F2L - Twitter: https://twitter.com/TezosBakingBad - Email: hello@baking-bad.org  And don't forget to star TzKT project [on GitHub](https://github.com/baking-bad/tzkt) ;)  # Terms of Use  TzKT API is free for everyone and for both commercial and non-commercial usage.  If your application or service uses the TzKT API in any forms: directly on frontend or indirectly on backend, you must mention that fact on your website or application by placing the label **\"Powered by TzKT API\"** or **\"Built with TzKT API\"** with a direct link to [tzkt.io](https://tzkt.io).   # Rate Limits  There will be no rate limits as long as our servers can handle the load without additional infrastructure costs. However, any apparent abuse will be prevented by setting targeted rate limits.  Check out [Tezos Explorer API Best Practices](https://baking-bad.org/blog/tag/TzKT/) and in particular [how to optimize requests count](https://baking-bad.org/blog/2020/07/29/tezos-explorer-api-tzkt-how-often-to-make-requests/).  ---   # noqa: E501

    OpenAPI spec version: v1.8.3
    Contact: hello@baking-bad.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BigMapUpdate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'level': 'int',
        'timestamp': 'datetime',
        'bigmap': 'int',
        'contract': 'OneOfBigMapUpdateContract',
        'path': 'str',
        'action': 'str',
        'content': 'OneOfBigMapUpdateContent'
    }

    attribute_map = {
        'id': 'id',
        'level': 'level',
        'timestamp': 'timestamp',
        'bigmap': 'bigmap',
        'contract': 'contract',
        'path': 'path',
        'action': 'action',
        'content': 'content'
    }

    def __init__(self, id=None, level=None, timestamp=None, bigmap=None, contract=None, path=None, action=None, content=None):  # noqa: E501
        """BigMapUpdate - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._level = None
        self._timestamp = None
        self._bigmap = None
        self._contract = None
        self._path = None
        self._action = None
        self._content = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if level is not None:
            self.level = level
        if timestamp is not None:
            self.timestamp = timestamp
        if bigmap is not None:
            self.bigmap = bigmap
        if contract is not None:
            self.contract = contract
        if path is not None:
            self.path = path
        if action is not None:
            self.action = action
        if content is not None:
            self.content = content

    @property
    def id(self):
        """Gets the id of this BigMapUpdate.  # noqa: E501

        Internal Id, can be used for pagination  # noqa: E501

        :return: The id of this BigMapUpdate.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BigMapUpdate.

        Internal Id, can be used for pagination  # noqa: E501

        :param id: The id of this BigMapUpdate.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def level(self):
        """Gets the level of this BigMapUpdate.  # noqa: E501

        Level of the block where the bigmap was updated  # noqa: E501

        :return: The level of this BigMapUpdate.  # noqa: E501
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this BigMapUpdate.

        Level of the block where the bigmap was updated  # noqa: E501

        :param level: The level of this BigMapUpdate.  # noqa: E501
        :type: int
        """

        self._level = level

    @property
    def timestamp(self):
        """Gets the timestamp of this BigMapUpdate.  # noqa: E501

        Timestamp of the block where the bigmap was updated  # noqa: E501

        :return: The timestamp of this BigMapUpdate.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this BigMapUpdate.

        Timestamp of the block where the bigmap was updated  # noqa: E501

        :param timestamp: The timestamp of this BigMapUpdate.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def bigmap(self):
        """Gets the bigmap of this BigMapUpdate.  # noqa: E501

        Bigmap ptr  # noqa: E501

        :return: The bigmap of this BigMapUpdate.  # noqa: E501
        :rtype: int
        """
        return self._bigmap

    @bigmap.setter
    def bigmap(self, bigmap):
        """Sets the bigmap of this BigMapUpdate.

        Bigmap ptr  # noqa: E501

        :param bigmap: The bigmap of this BigMapUpdate.  # noqa: E501
        :type: int
        """

        self._bigmap = bigmap

    @property
    def contract(self):
        """Gets the contract of this BigMapUpdate.  # noqa: E501

        Smart contract in which's storage the bigmap is allocated  # noqa: E501

        :return: The contract of this BigMapUpdate.  # noqa: E501
        :rtype: OneOfBigMapUpdateContract
        """
        return self._contract

    @contract.setter
    def contract(self, contract):
        """Sets the contract of this BigMapUpdate.

        Smart contract in which's storage the bigmap is allocated  # noqa: E501

        :param contract: The contract of this BigMapUpdate.  # noqa: E501
        :type: OneOfBigMapUpdateContract
        """

        self._contract = contract

    @property
    def path(self):
        """Gets the path of this BigMapUpdate.  # noqa: E501

        Path to the bigmap in the contract storage  # noqa: E501

        :return: The path of this BigMapUpdate.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this BigMapUpdate.

        Path to the bigmap in the contract storage  # noqa: E501

        :param path: The path of this BigMapUpdate.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def action(self):
        """Gets the action of this BigMapUpdate.  # noqa: E501

        Action with the bigmap (`allocate`, `add_key`, `update_key`, `remove_key`, `remove`)  # noqa: E501

        :return: The action of this BigMapUpdate.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this BigMapUpdate.

        Action with the bigmap (`allocate`, `add_key`, `update_key`, `remove_key`, `remove`)  # noqa: E501

        :param action: The action of this BigMapUpdate.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def content(self):
        """Gets the content of this BigMapUpdate.  # noqa: E501

        Updated key. If the action is `allocate` or `remove` the content will be `null`.  # noqa: E501

        :return: The content of this BigMapUpdate.  # noqa: E501
        :rtype: OneOfBigMapUpdateContent
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this BigMapUpdate.

        Updated key. If the action is `allocate` or `remove` the content will be `null`.  # noqa: E501

        :param content: The content of this BigMapUpdate.  # noqa: E501
        :type: OneOfBigMapUpdateContent
        """

        self._content = content

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BigMapUpdate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BigMapUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
