# coding: utf-8

"""
    TzKT API

    # Introduction  TzKT Explorer provides free REST API and WebSocket API for accessing detailed Tezos blockchain data and helps developers build more services and applications on top of Tezos. TzKT is an open-source project, so you can easily clone and build it and use it as a self-hosted service to avoid any risks of depending on third-party services.  TzKT API is available for the following Tezos networks with the following base URLs:  - Mainnet: `https://api.tzkt.io/` or `https://api.mainnet.tzkt.io/` ([view docs](https://api.tzkt.io))  - Hangzhounet: `https://api.hangzhounet.tzkt.io/` ([view docs](https://api.hangzhounet.tzkt.io)) - Ithacanet: `https://api.ithacanet.tzkt.io/` ([view docs](https://api.ithacanet.tzkt.io))  We also provide a staging environment for testing newest features and pre-updating client applications before deploying to production:  - Mainnet staging: `https://staging.api.tzkt.io/` or `https://staging.api.mainnet.tzkt.io/` ([view docs](https://staging.api.tzkt.io))  Feel free to contact us if you have any questions or feature requests. Your feedback really helps us make TzKT better!  - Discord: https://discord.gg/aG8XKuwsQd - Telegram: https://t.me/baking_bad_chat - Slack: https://tezos-dev.slack.com/archives/CV5NX7F2L - Twitter: https://twitter.com/TezosBakingBad - Email: hello@baking-bad.org  And don't forget to star TzKT project [on GitHub](https://github.com/baking-bad/tzkt) ;)  # Terms of Use  TzKT API is free for everyone and for both commercial and non-commercial usage.  If your application or service uses the TzKT API in any forms: directly on frontend or indirectly on backend, you must mention that fact on your website or application by placing the label **\"Powered by TzKT API\"** or **\"Built with TzKT API\"** with a direct link to [tzkt.io](https://tzkt.io).   # Rate Limits  There will be no rate limits as long as our servers can handle the load without additional infrastructure costs. However, any apparent abuse will be prevented by setting targeted rate limits.  Check out [Tezos Explorer API Best Practices](https://baking-bad.org/blog/tag/TzKT/) and in particular [how to optimize requests count](https://baking-bad.org/blog/2020/07/29/tezos-explorer-api-tzkt-how-often-to-make-requests/).  ---   # noqa: E501

    OpenAPI spec version: v1.8.3
    Contact: hello@baking-bad.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SourceOperation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'hash': 'str',
        'counter': 'int',
        'nonce': 'int',
        'parameter': 'OneOfSourceOperationParameter'
    }

    attribute_map = {
        'type': 'type',
        'hash': 'hash',
        'counter': 'counter',
        'nonce': 'nonce',
        'parameter': 'parameter'
    }

    def __init__(self, type=None, hash=None, counter=None, nonce=None, parameter=None):  # noqa: E501
        """SourceOperation - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._hash = None
        self._counter = None
        self._nonce = None
        self._parameter = None
        self.discriminator = None
        if type is not None:
            self.type = type
        if hash is not None:
            self.hash = hash
        if counter is not None:
            self.counter = counter
        if nonce is not None:
            self.nonce = nonce
        if parameter is not None:
            self.parameter = parameter

    @property
    def type(self):
        """Gets the type of this SourceOperation.  # noqa: E501

        Operation type  # noqa: E501

        :return: The type of this SourceOperation.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SourceOperation.

        Operation type  # noqa: E501

        :param type: The type of this SourceOperation.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def hash(self):
        """Gets the hash of this SourceOperation.  # noqa: E501

        Operation hash  # noqa: E501

        :return: The hash of this SourceOperation.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this SourceOperation.

        Operation hash  # noqa: E501

        :param hash: The hash of this SourceOperation.  # noqa: E501
        :type: str
        """

        self._hash = hash

    @property
    def counter(self):
        """Gets the counter of this SourceOperation.  # noqa: E501

        Operation counter (null in case of synthetic operations)  # noqa: E501

        :return: The counter of this SourceOperation.  # noqa: E501
        :rtype: int
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this SourceOperation.

        Operation counter (null in case of synthetic operations)  # noqa: E501

        :param counter: The counter of this SourceOperation.  # noqa: E501
        :type: int
        """

        self._counter = counter

    @property
    def nonce(self):
        """Gets the nonce of this SourceOperation.  # noqa: E501

        Operation nonce (null in case of non-internal or synthetic operations)  # noqa: E501

        :return: The nonce of this SourceOperation.  # noqa: E501
        :rtype: int
        """
        return self._nonce

    @nonce.setter
    def nonce(self, nonce):
        """Sets the nonce of this SourceOperation.

        Operation nonce (null in case of non-internal or synthetic operations)  # noqa: E501

        :param nonce: The nonce of this SourceOperation.  # noqa: E501
        :type: int
        """

        self._nonce = nonce

    @property
    def parameter(self):
        """Gets the parameter of this SourceOperation.  # noqa: E501

        Transaction parameter, including called entrypoint and value passed to the entrypoint.  # noqa: E501

        :return: The parameter of this SourceOperation.  # noqa: E501
        :rtype: OneOfSourceOperationParameter
        """
        return self._parameter

    @parameter.setter
    def parameter(self, parameter):
        """Sets the parameter of this SourceOperation.

        Transaction parameter, including called entrypoint and value passed to the entrypoint.  # noqa: E501

        :param parameter: The parameter of this SourceOperation.  # noqa: E501
        :type: OneOfSourceOperationParameter
        """

        self._parameter = parameter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SourceOperation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SourceOperation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
