# coding: utf-8

"""
    TzKT API

    # Introduction  TzKT Explorer provides free REST API and WebSocket API for accessing detailed Tezos blockchain data and helps developers build more services and applications on top of Tezos. TzKT is an open-source project, so you can easily clone and build it and use it as a self-hosted service to avoid any risks of depending on third-party services.  TzKT API is available for the following Tezos networks with the following base URLs:  - Mainnet: `https://api.tzkt.io/` or `https://api.mainnet.tzkt.io/` ([view docs](https://api.tzkt.io))  - Hangzhounet: `https://api.hangzhounet.tzkt.io/` ([view docs](https://api.hangzhounet.tzkt.io)) - Ithacanet: `https://api.ithacanet.tzkt.io/` ([view docs](https://api.ithacanet.tzkt.io))  We also provide a staging environment for testing newest features and pre-updating client applications before deploying to production:  - Mainnet staging: `https://staging.api.tzkt.io/` or `https://staging.api.mainnet.tzkt.io/` ([view docs](https://staging.api.tzkt.io))  Feel free to contact us if you have any questions or feature requests. Your feedback really helps us make TzKT better!  - Discord: https://discord.gg/aG8XKuwsQd - Telegram: https://t.me/baking_bad_chat - Slack: https://tezos-dev.slack.com/archives/CV5NX7F2L - Twitter: https://twitter.com/TezosBakingBad - Email: hello@baking-bad.org  And don't forget to star TzKT project [on GitHub](https://github.com/baking-bad/tzkt) ;)  # Terms of Use  TzKT API is free for everyone and for both commercial and non-commercial usage.  If your application or service uses the TzKT API in any forms: directly on frontend or indirectly on backend, you must mention that fact on your website or application by placing the label **\"Powered by TzKT API\"** or **\"Built with TzKT API\"** with a direct link to [tzkt.io](https://tzkt.io).   # Rate Limits  There will be no rate limits as long as our servers can handle the load without additional infrastructure costs. However, any apparent abuse will be prevented by setting targeted rate limits.  Check out [Tezos Explorer API Best Practices](https://baking-bad.org/blog/tag/TzKT/) and in particular [how to optimize requests count](https://baking-bad.org/blog/2020/07/29/tezos-explorer-api-tzkt-how-often-to-make-requests/).  ---   # noqa: E501

    OpenAPI spec version: v1.8.3
    Contact: hello@baking-bad.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ContractView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'json_parameter_type': 'object',
        'json_return_type': 'object',
        'micheline_parameter_type': 'OneOfContractViewMichelineParameterType',
        'micheline_return_type': 'OneOfContractViewMichelineReturnType',
        'michelson_parameter_type': 'str',
        'michelson_return_type': 'str'
    }

    attribute_map = {
        'name': 'name',
        'json_parameter_type': 'jsonParameterType',
        'json_return_type': 'jsonReturnType',
        'micheline_parameter_type': 'michelineParameterType',
        'micheline_return_type': 'michelineReturnType',
        'michelson_parameter_type': 'michelsonParameterType',
        'michelson_return_type': 'michelsonReturnType'
    }

    def __init__(self, name=None, json_parameter_type=None, json_return_type=None, micheline_parameter_type=None, micheline_return_type=None, michelson_parameter_type=None, michelson_return_type=None):  # noqa: E501
        """ContractView - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._json_parameter_type = None
        self._json_return_type = None
        self._micheline_parameter_type = None
        self._micheline_return_type = None
        self._michelson_parameter_type = None
        self._michelson_return_type = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if json_parameter_type is not None:
            self.json_parameter_type = json_parameter_type
        if json_return_type is not None:
            self.json_return_type = json_return_type
        if micheline_parameter_type is not None:
            self.micheline_parameter_type = micheline_parameter_type
        if micheline_return_type is not None:
            self.micheline_return_type = micheline_return_type
        if michelson_parameter_type is not None:
            self.michelson_parameter_type = michelson_parameter_type
        if michelson_return_type is not None:
            self.michelson_return_type = michelson_return_type

    @property
    def name(self):
        """Gets the name of this ContractView.  # noqa: E501

        Contract view name  # noqa: E501

        :return: The name of this ContractView.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContractView.

        Contract view name  # noqa: E501

        :param name: The name of this ContractView.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def json_parameter_type(self):
        """Gets the json_parameter_type of this ContractView.  # noqa: E501

        Parameter type in human-readable JSON format  # noqa: E501

        :return: The json_parameter_type of this ContractView.  # noqa: E501
        :rtype: object
        """
        return self._json_parameter_type

    @json_parameter_type.setter
    def json_parameter_type(self, json_parameter_type):
        """Sets the json_parameter_type of this ContractView.

        Parameter type in human-readable JSON format  # noqa: E501

        :param json_parameter_type: The json_parameter_type of this ContractView.  # noqa: E501
        :type: object
        """

        self._json_parameter_type = json_parameter_type

    @property
    def json_return_type(self):
        """Gets the json_return_type of this ContractView.  # noqa: E501

        Return type in human-readable JSON format  # noqa: E501

        :return: The json_return_type of this ContractView.  # noqa: E501
        :rtype: object
        """
        return self._json_return_type

    @json_return_type.setter
    def json_return_type(self, json_return_type):
        """Sets the json_return_type of this ContractView.

        Return type in human-readable JSON format  # noqa: E501

        :param json_return_type: The json_return_type of this ContractView.  # noqa: E501
        :type: object
        """

        self._json_return_type = json_return_type

    @property
    def micheline_parameter_type(self):
        """Gets the micheline_parameter_type of this ContractView.  # noqa: E501

        Parameter type in micheline format  # noqa: E501

        :return: The micheline_parameter_type of this ContractView.  # noqa: E501
        :rtype: OneOfContractViewMichelineParameterType
        """
        return self._micheline_parameter_type

    @micheline_parameter_type.setter
    def micheline_parameter_type(self, micheline_parameter_type):
        """Sets the micheline_parameter_type of this ContractView.

        Parameter type in micheline format  # noqa: E501

        :param micheline_parameter_type: The micheline_parameter_type of this ContractView.  # noqa: E501
        :type: OneOfContractViewMichelineParameterType
        """

        self._micheline_parameter_type = micheline_parameter_type

    @property
    def micheline_return_type(self):
        """Gets the micheline_return_type of this ContractView.  # noqa: E501

        Return type in micheline format  # noqa: E501

        :return: The micheline_return_type of this ContractView.  # noqa: E501
        :rtype: OneOfContractViewMichelineReturnType
        """
        return self._micheline_return_type

    @micheline_return_type.setter
    def micheline_return_type(self, micheline_return_type):
        """Sets the micheline_return_type of this ContractView.

        Return type in micheline format  # noqa: E501

        :param micheline_return_type: The micheline_return_type of this ContractView.  # noqa: E501
        :type: OneOfContractViewMichelineReturnType
        """

        self._micheline_return_type = micheline_return_type

    @property
    def michelson_parameter_type(self):
        """Gets the michelson_parameter_type of this ContractView.  # noqa: E501

        Parameter type in michelson format  # noqa: E501

        :return: The michelson_parameter_type of this ContractView.  # noqa: E501
        :rtype: str
        """
        return self._michelson_parameter_type

    @michelson_parameter_type.setter
    def michelson_parameter_type(self, michelson_parameter_type):
        """Sets the michelson_parameter_type of this ContractView.

        Parameter type in michelson format  # noqa: E501

        :param michelson_parameter_type: The michelson_parameter_type of this ContractView.  # noqa: E501
        :type: str
        """

        self._michelson_parameter_type = michelson_parameter_type

    @property
    def michelson_return_type(self):
        """Gets the michelson_return_type of this ContractView.  # noqa: E501

        Return type in michelson format  # noqa: E501

        :return: The michelson_return_type of this ContractView.  # noqa: E501
        :rtype: str
        """
        return self._michelson_return_type

    @michelson_return_type.setter
    def michelson_return_type(self, michelson_return_type):
        """Sets the michelson_return_type of this ContractView.

        Return type in michelson format  # noqa: E501

        :param michelson_return_type: The michelson_return_type of this ContractView.  # noqa: E501
        :type: str
        """

        self._michelson_return_type = michelson_return_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContractView, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContractView):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
