# coding: utf-8

"""
    TzKT API

    # Introduction  TzKT Explorer provides free REST API and WebSocket API for accessing detailed Tezos blockchain data and helps developers build more services and applications on top of Tezos. TzKT is an open-source project, so you can easily clone and build it and use it as a self-hosted service to avoid any risks of depending on third-party services.  TzKT API is available for the following Tezos networks with the following base URLs:  - Mainnet: `https://api.tzkt.io/` or `https://api.mainnet.tzkt.io/` ([view docs](https://api.tzkt.io))  - Hangzhounet: `https://api.hangzhounet.tzkt.io/` ([view docs](https://api.hangzhounet.tzkt.io)) - Ithacanet: `https://api.ithacanet.tzkt.io/` ([view docs](https://api.ithacanet.tzkt.io))  We also provide a staging environment for testing newest features and pre-updating client applications before deploying to production:  - Mainnet staging: `https://staging.api.tzkt.io/` or `https://staging.api.mainnet.tzkt.io/` ([view docs](https://staging.api.tzkt.io))  Feel free to contact us if you have any questions or feature requests. Your feedback really helps us make TzKT better!  - Discord: https://discord.gg/aG8XKuwsQd - Telegram: https://t.me/baking_bad_chat - Slack: https://tezos-dev.slack.com/archives/CV5NX7F2L - Twitter: https://twitter.com/TezosBakingBad - Email: hello@baking-bad.org  And don't forget to star TzKT project [on GitHub](https://github.com/baking-bad/tzkt) ;)  # Terms of Use  TzKT API is free for everyone and for both commercial and non-commercial usage.  If your application or service uses the TzKT API in any forms: directly on frontend or indirectly on backend, you must mention that fact on your website or application by placing the label **\"Powered by TzKT API\"** or **\"Built with TzKT API\"** with a direct link to [tzkt.io](https://tzkt.io).   # Rate Limits  There will be no rate limits as long as our servers can handle the load without additional infrastructure costs. However, any apparent abuse will be prevented by setting targeted rate limits.  Check out [Tezos Explorer API Best Practices](https://baking-bad.org/blog/tag/TzKT/) and in particular [how to optimize requests count](https://baking-bad.org/blog/2020/07/29/tezos-explorer-api-tzkt-how-often-to-make-requests/).  ---   # noqa: E501

    OpenAPI spec version: v1.8.3
    Contact: hello@baking-bad.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.model.operation import Operation  # noqa: F401,E501

class DoubleBakingOperation(Operation):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'id': 'int',
        'level': 'int',
        'timestamp': 'datetime',
        'block': 'str',
        'hash': 'str',
        'accused_level': 'int',
        'accuser': 'object',
        'accuser_reward': 'int',
        'offender': 'object',
        'offender_loss': 'int',
        'quote': 'object',
        'accuser_rewards': 'int',
        'offender_lost_deposits': 'int',
        'offender_lost_rewards': 'int',
        'offender_lost_fees': 'int'
    }
    if hasattr(Operation, "swagger_types"):
        swagger_types.update(Operation.swagger_types)

    attribute_map = {
        'type': 'type',
        'id': 'id',
        'level': 'level',
        'timestamp': 'timestamp',
        'block': 'block',
        'hash': 'hash',
        'accused_level': 'accusedLevel',
        'accuser': 'accuser',
        'accuser_reward': 'accuserReward',
        'offender': 'offender',
        'offender_loss': 'offenderLoss',
        'quote': 'quote',
        'accuser_rewards': 'accuserRewards',
        'offender_lost_deposits': 'offenderLostDeposits',
        'offender_lost_rewards': 'offenderLostRewards',
        'offender_lost_fees': 'offenderLostFees'
    }
    if hasattr(Operation, "attribute_map"):
        attribute_map.update(Operation.attribute_map)

    def __init__(self, type=None, id=None, level=None, timestamp=None, block=None, hash=None, accused_level=None, accuser=None, accuser_reward=None, offender=None, offender_loss=None, quote=None, accuser_rewards=None, offender_lost_deposits=None, offender_lost_rewards=None, offender_lost_fees=None, *args, **kwargs):  # noqa: E501
        """DoubleBakingOperation - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._id = None
        self._level = None
        self._timestamp = None
        self._block = None
        self._hash = None
        self._accused_level = None
        self._accuser = None
        self._accuser_reward = None
        self._offender = None
        self._offender_loss = None
        self._quote = None
        self._accuser_rewards = None
        self._offender_lost_deposits = None
        self._offender_lost_rewards = None
        self._offender_lost_fees = None
        self.discriminator = None
        if type is not None:
            self.type = type
        if id is not None:
            self.id = id
        if level is not None:
            self.level = level
        if timestamp is not None:
            self.timestamp = timestamp
        if block is not None:
            self.block = block
        if hash is not None:
            self.hash = hash
        if accused_level is not None:
            self.accused_level = accused_level
        if accuser is not None:
            self.accuser = accuser
        if accuser_reward is not None:
            self.accuser_reward = accuser_reward
        if offender is not None:
            self.offender = offender
        if offender_loss is not None:
            self.offender_loss = offender_loss
        if quote is not None:
            self.quote = quote
        if accuser_rewards is not None:
            self.accuser_rewards = accuser_rewards
        if offender_lost_deposits is not None:
            self.offender_lost_deposits = offender_lost_deposits
        if offender_lost_rewards is not None:
            self.offender_lost_rewards = offender_lost_rewards
        if offender_lost_fees is not None:
            self.offender_lost_fees = offender_lost_fees
        Operation.__init__(self, *args, **kwargs)

    @property
    def type(self):
        """Gets the type of this DoubleBakingOperation.  # noqa: E501

        Type of the operation, `double_baking` - is used by bakers to provide evidence of double baking (baking two different blocks at the same height) by a baker  # noqa: E501

        :return: The type of this DoubleBakingOperation.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DoubleBakingOperation.

        Type of the operation, `double_baking` - is used by bakers to provide evidence of double baking (baking two different blocks at the same height) by a baker  # noqa: E501

        :param type: The type of this DoubleBakingOperation.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def id(self):
        """Gets the id of this DoubleBakingOperation.  # noqa: E501

        Unique ID of the operation, stored in the TzKT indexer database  # noqa: E501

        :return: The id of this DoubleBakingOperation.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DoubleBakingOperation.

        Unique ID of the operation, stored in the TzKT indexer database  # noqa: E501

        :param id: The id of this DoubleBakingOperation.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def level(self):
        """Gets the level of this DoubleBakingOperation.  # noqa: E501

        Height of the block from the genesis block, in which the operation was included  # noqa: E501

        :return: The level of this DoubleBakingOperation.  # noqa: E501
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this DoubleBakingOperation.

        Height of the block from the genesis block, in which the operation was included  # noqa: E501

        :param level: The level of this DoubleBakingOperation.  # noqa: E501
        :type: int
        """

        self._level = level

    @property
    def timestamp(self):
        """Gets the timestamp of this DoubleBakingOperation.  # noqa: E501

        Datetime of the block, in which the operation was included (ISO 8601, e.g. `2020-02-20T02:40:57Z`)  # noqa: E501

        :return: The timestamp of this DoubleBakingOperation.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this DoubleBakingOperation.

        Datetime of the block, in which the operation was included (ISO 8601, e.g. `2020-02-20T02:40:57Z`)  # noqa: E501

        :param timestamp: The timestamp of this DoubleBakingOperation.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def block(self):
        """Gets the block of this DoubleBakingOperation.  # noqa: E501

        Hash of the block, in which the operation was included  # noqa: E501

        :return: The block of this DoubleBakingOperation.  # noqa: E501
        :rtype: str
        """
        return self._block

    @block.setter
    def block(self, block):
        """Sets the block of this DoubleBakingOperation.

        Hash of the block, in which the operation was included  # noqa: E501

        :param block: The block of this DoubleBakingOperation.  # noqa: E501
        :type: str
        """

        self._block = block

    @property
    def hash(self):
        """Gets the hash of this DoubleBakingOperation.  # noqa: E501

        Hash of the operation  # noqa: E501

        :return: The hash of this DoubleBakingOperation.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this DoubleBakingOperation.

        Hash of the operation  # noqa: E501

        :param hash: The hash of this DoubleBakingOperation.  # noqa: E501
        :type: str
        """

        self._hash = hash

    @property
    def accused_level(self):
        """Gets the accused_level of this DoubleBakingOperation.  # noqa: E501

        Height of the block from the genesis, which was double baked  # noqa: E501

        :return: The accused_level of this DoubleBakingOperation.  # noqa: E501
        :rtype: int
        """
        return self._accused_level

    @accused_level.setter
    def accused_level(self, accused_level):
        """Sets the accused_level of this DoubleBakingOperation.

        Height of the block from the genesis, which was double baked  # noqa: E501

        :param accused_level: The accused_level of this DoubleBakingOperation.  # noqa: E501
        :type: int
        """

        self._accused_level = accused_level

    @property
    def accuser(self):
        """Gets the accuser of this DoubleBakingOperation.  # noqa: E501

        Information about the baker, produced the block, in which the accusation was included  # noqa: E501

        :return: The accuser of this DoubleBakingOperation.  # noqa: E501
        :rtype: object
        """
        return self._accuser

    @accuser.setter
    def accuser(self, accuser):
        """Sets the accuser of this DoubleBakingOperation.

        Information about the baker, produced the block, in which the accusation was included  # noqa: E501

        :param accuser: The accuser of this DoubleBakingOperation.  # noqa: E501
        :type: object
        """

        self._accuser = accuser

    @property
    def accuser_reward(self):
        """Gets the accuser_reward of this DoubleBakingOperation.  # noqa: E501

        Reward of the baker, produced the block, in which the accusation was included  # noqa: E501

        :return: The accuser_reward of this DoubleBakingOperation.  # noqa: E501
        :rtype: int
        """
        return self._accuser_reward

    @accuser_reward.setter
    def accuser_reward(self, accuser_reward):
        """Sets the accuser_reward of this DoubleBakingOperation.

        Reward of the baker, produced the block, in which the accusation was included  # noqa: E501

        :param accuser_reward: The accuser_reward of this DoubleBakingOperation.  # noqa: E501
        :type: int
        """

        self._accuser_reward = accuser_reward

    @property
    def offender(self):
        """Gets the offender of this DoubleBakingOperation.  # noqa: E501

        Information about the baker, accused for producing two different blocks at the same level  # noqa: E501

        :return: The offender of this DoubleBakingOperation.  # noqa: E501
        :rtype: object
        """
        return self._offender

    @offender.setter
    def offender(self, offender):
        """Sets the offender of this DoubleBakingOperation.

        Information about the baker, accused for producing two different blocks at the same level  # noqa: E501

        :param offender: The offender of this DoubleBakingOperation.  # noqa: E501
        :type: object
        """

        self._offender = offender

    @property
    def offender_loss(self):
        """Gets the offender_loss of this DoubleBakingOperation.  # noqa: E501

        Amount of frozen deposits lost by accused baker  # noqa: E501

        :return: The offender_loss of this DoubleBakingOperation.  # noqa: E501
        :rtype: int
        """
        return self._offender_loss

    @offender_loss.setter
    def offender_loss(self, offender_loss):
        """Sets the offender_loss of this DoubleBakingOperation.

        Amount of frozen deposits lost by accused baker  # noqa: E501

        :param offender_loss: The offender_loss of this DoubleBakingOperation.  # noqa: E501
        :type: int
        """

        self._offender_loss = offender_loss

    @property
    def quote(self):
        """Gets the quote of this DoubleBakingOperation.  # noqa: E501

        Injected historical quote at the time of operation  # noqa: E501

        :return: The quote of this DoubleBakingOperation.  # noqa: E501
        :rtype: object
        """
        return self._quote

    @quote.setter
    def quote(self, quote):
        """Sets the quote of this DoubleBakingOperation.

        Injected historical quote at the time of operation  # noqa: E501

        :param quote: The quote of this DoubleBakingOperation.  # noqa: E501
        :type: object
        """

        self._quote = quote

    @property
    def accuser_rewards(self):
        """Gets the accuser_rewards of this DoubleBakingOperation.  # noqa: E501

        [DEPRECATED]  # noqa: E501

        :return: The accuser_rewards of this DoubleBakingOperation.  # noqa: E501
        :rtype: int
        """
        return self._accuser_rewards

    @accuser_rewards.setter
    def accuser_rewards(self, accuser_rewards):
        """Sets the accuser_rewards of this DoubleBakingOperation.

        [DEPRECATED]  # noqa: E501

        :param accuser_rewards: The accuser_rewards of this DoubleBakingOperation.  # noqa: E501
        :type: int
        """

        self._accuser_rewards = accuser_rewards

    @property
    def offender_lost_deposits(self):
        """Gets the offender_lost_deposits of this DoubleBakingOperation.  # noqa: E501

        [DEPRECATED]  # noqa: E501

        :return: The offender_lost_deposits of this DoubleBakingOperation.  # noqa: E501
        :rtype: int
        """
        return self._offender_lost_deposits

    @offender_lost_deposits.setter
    def offender_lost_deposits(self, offender_lost_deposits):
        """Sets the offender_lost_deposits of this DoubleBakingOperation.

        [DEPRECATED]  # noqa: E501

        :param offender_lost_deposits: The offender_lost_deposits of this DoubleBakingOperation.  # noqa: E501
        :type: int
        """

        self._offender_lost_deposits = offender_lost_deposits

    @property
    def offender_lost_rewards(self):
        """Gets the offender_lost_rewards of this DoubleBakingOperation.  # noqa: E501

        [DEPRECATED]  # noqa: E501

        :return: The offender_lost_rewards of this DoubleBakingOperation.  # noqa: E501
        :rtype: int
        """
        return self._offender_lost_rewards

    @offender_lost_rewards.setter
    def offender_lost_rewards(self, offender_lost_rewards):
        """Sets the offender_lost_rewards of this DoubleBakingOperation.

        [DEPRECATED]  # noqa: E501

        :param offender_lost_rewards: The offender_lost_rewards of this DoubleBakingOperation.  # noqa: E501
        :type: int
        """

        self._offender_lost_rewards = offender_lost_rewards

    @property
    def offender_lost_fees(self):
        """Gets the offender_lost_fees of this DoubleBakingOperation.  # noqa: E501

        [DEPRECATED]  # noqa: E501

        :return: The offender_lost_fees of this DoubleBakingOperation.  # noqa: E501
        :rtype: int
        """
        return self._offender_lost_fees

    @offender_lost_fees.setter
    def offender_lost_fees(self, offender_lost_fees):
        """Sets the offender_lost_fees of this DoubleBakingOperation.

        [DEPRECATED]  # noqa: E501

        :param offender_lost_fees: The offender_lost_fees of this DoubleBakingOperation.  # noqa: E501
        :type: int
        """

        self._offender_lost_fees = offender_lost_fees

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DoubleBakingOperation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DoubleBakingOperation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
