# coding: utf-8

"""
    TzKT API

    # Introduction  TzKT Explorer provides free REST API and WebSocket API for accessing detailed Tezos blockchain data and helps developers build more services and applications on top of Tezos. TzKT is an open-source project, so you can easily clone and build it and use it as a self-hosted service to avoid any risks of depending on third-party services.  TzKT API is available for the following Tezos networks with the following base URLs:  - Mainnet: `https://api.tzkt.io/` or `https://api.mainnet.tzkt.io/` ([view docs](https://api.tzkt.io))  - Hangzhounet: `https://api.hangzhounet.tzkt.io/` ([view docs](https://api.hangzhounet.tzkt.io)) - Ithacanet: `https://api.ithacanet.tzkt.io/` ([view docs](https://api.ithacanet.tzkt.io))  We also provide a staging environment for testing newest features and pre-updating client applications before deploying to production:  - Mainnet staging: `https://staging.api.tzkt.io/` or `https://staging.api.mainnet.tzkt.io/` ([view docs](https://staging.api.tzkt.io))  Feel free to contact us if you have any questions or feature requests. Your feedback really helps us make TzKT better!  - Discord: https://discord.gg/aG8XKuwsQd - Telegram: https://t.me/baking_bad_chat - Slack: https://tezos-dev.slack.com/archives/CV5NX7F2L - Twitter: https://twitter.com/TezosBakingBad - Email: hello@baking-bad.org  And don't forget to star TzKT project [on GitHub](https://github.com/baking-bad/tzkt) ;)  # Terms of Use  TzKT API is free for everyone and for both commercial and non-commercial usage.  If your application or service uses the TzKT API in any forms: directly on frontend or indirectly on backend, you must mention that fact on your website or application by placing the label **\"Powered by TzKT API\"** or **\"Built with TzKT API\"** with a direct link to [tzkt.io](https://tzkt.io).   # Rate Limits  There will be no rate limits as long as our servers can handle the load without additional infrastructure costs. However, any apparent abuse will be prevented by setting targeted rate limits.  Check out [Tezos Explorer API Best Practices](https://baking-bad.org/blog/tag/TzKT/) and in particular [how to optimize requests count](https://baking-bad.org/blog/2020/07/29/tezos-explorer-api-tzkt-how-often-to-make-requests/).  ---   # noqa: E501

    OpenAPI spec version: v1.8.3
    Contact: hello@baking-bad.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Token(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'contract': 'OneOfTokenContract',
        'token_id': 'str',
        'standard': 'str',
        'first_level': 'int',
        'first_time': 'datetime',
        'last_level': 'int',
        'last_time': 'datetime',
        'transfers_count': 'int',
        'balances_count': 'int',
        'holders_count': 'int',
        'total_minted': 'str',
        'total_burned': 'str',
        'total_supply': 'str',
        'metadata': 'object'
    }

    attribute_map = {
        'id': 'id',
        'contract': 'contract',
        'token_id': 'tokenId',
        'standard': 'standard',
        'first_level': 'firstLevel',
        'first_time': 'firstTime',
        'last_level': 'lastLevel',
        'last_time': 'lastTime',
        'transfers_count': 'transfersCount',
        'balances_count': 'balancesCount',
        'holders_count': 'holdersCount',
        'total_minted': 'totalMinted',
        'total_burned': 'totalBurned',
        'total_supply': 'totalSupply',
        'metadata': 'metadata'
    }

    def __init__(self, id=None, contract=None, token_id=None, standard=None, first_level=None, first_time=None, last_level=None, last_time=None, transfers_count=None, balances_count=None, holders_count=None, total_minted=None, total_burned=None, total_supply=None, metadata=None):  # noqa: E501
        """Token - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._contract = None
        self._token_id = None
        self._standard = None
        self._first_level = None
        self._first_time = None
        self._last_level = None
        self._last_time = None
        self._transfers_count = None
        self._balances_count = None
        self._holders_count = None
        self._total_minted = None
        self._total_burned = None
        self._total_supply = None
        self._metadata = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if contract is not None:
            self.contract = contract
        if token_id is not None:
            self.token_id = token_id
        if standard is not None:
            self.standard = standard
        if first_level is not None:
            self.first_level = first_level
        if first_time is not None:
            self.first_time = first_time
        if last_level is not None:
            self.last_level = last_level
        if last_time is not None:
            self.last_time = last_time
        if transfers_count is not None:
            self.transfers_count = transfers_count
        if balances_count is not None:
            self.balances_count = balances_count
        if holders_count is not None:
            self.holders_count = holders_count
        if total_minted is not None:
            self.total_minted = total_minted
        if total_burned is not None:
            self.total_burned = total_burned
        if total_supply is not None:
            self.total_supply = total_supply
        if metadata is not None:
            self.metadata = metadata

    @property
    def id(self):
        """Gets the id of this Token.  # noqa: E501

        Internal TzKT id (not the same as `tokenId`).   **[sortable]**  # noqa: E501

        :return: The id of this Token.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Token.

        Internal TzKT id (not the same as `tokenId`).   **[sortable]**  # noqa: E501

        :param id: The id of this Token.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def contract(self):
        """Gets the contract of this Token.  # noqa: E501

        Contract, created the token.  # noqa: E501

        :return: The contract of this Token.  # noqa: E501
        :rtype: OneOfTokenContract
        """
        return self._contract

    @contract.setter
    def contract(self, contract):
        """Sets the contract of this Token.

        Contract, created the token.  # noqa: E501

        :param contract: The contract of this Token.  # noqa: E501
        :type: OneOfTokenContract
        """

        self._contract = contract

    @property
    def token_id(self):
        """Gets the token_id of this Token.  # noqa: E501

        Token id, unique within the contract.   **[sortable]**  # noqa: E501

        :return: The token_id of this Token.  # noqa: E501
        :rtype: str
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id):
        """Sets the token_id of this Token.

        Token id, unique within the contract.   **[sortable]**  # noqa: E501

        :param token_id: The token_id of this Token.  # noqa: E501
        :type: str
        """

        self._token_id = token_id

    @property
    def standard(self):
        """Gets the standard of this Token.  # noqa: E501

        Token standard (`fa1.2` or `fa2`).  # noqa: E501

        :return: The standard of this Token.  # noqa: E501
        :rtype: str
        """
        return self._standard

    @standard.setter
    def standard(self, standard):
        """Sets the standard of this Token.

        Token standard (`fa1.2` or `fa2`).  # noqa: E501

        :param standard: The standard of this Token.  # noqa: E501
        :type: str
        """

        self._standard = standard

    @property
    def first_level(self):
        """Gets the first_level of this Token.  # noqa: E501

        Level of the block where the token was first seen.   **[sortable]**  # noqa: E501

        :return: The first_level of this Token.  # noqa: E501
        :rtype: int
        """
        return self._first_level

    @first_level.setter
    def first_level(self, first_level):
        """Sets the first_level of this Token.

        Level of the block where the token was first seen.   **[sortable]**  # noqa: E501

        :param first_level: The first_level of this Token.  # noqa: E501
        :type: int
        """

        self._first_level = first_level

    @property
    def first_time(self):
        """Gets the first_time of this Token.  # noqa: E501

        Timestamp of the block where the token was first seen.  # noqa: E501

        :return: The first_time of this Token.  # noqa: E501
        :rtype: datetime
        """
        return self._first_time

    @first_time.setter
    def first_time(self, first_time):
        """Sets the first_time of this Token.

        Timestamp of the block where the token was first seen.  # noqa: E501

        :param first_time: The first_time of this Token.  # noqa: E501
        :type: datetime
        """

        self._first_time = first_time

    @property
    def last_level(self):
        """Gets the last_level of this Token.  # noqa: E501

        Level of the block where the token was last seen.   **[sortable]**  # noqa: E501

        :return: The last_level of this Token.  # noqa: E501
        :rtype: int
        """
        return self._last_level

    @last_level.setter
    def last_level(self, last_level):
        """Sets the last_level of this Token.

        Level of the block where the token was last seen.   **[sortable]**  # noqa: E501

        :param last_level: The last_level of this Token.  # noqa: E501
        :type: int
        """

        self._last_level = last_level

    @property
    def last_time(self):
        """Gets the last_time of this Token.  # noqa: E501

        Timestamp of the block where the token was last seen.  # noqa: E501

        :return: The last_time of this Token.  # noqa: E501
        :rtype: datetime
        """
        return self._last_time

    @last_time.setter
    def last_time(self, last_time):
        """Sets the last_time of this Token.

        Timestamp of the block where the token was last seen.  # noqa: E501

        :param last_time: The last_time of this Token.  # noqa: E501
        :type: datetime
        """

        self._last_time = last_time

    @property
    def transfers_count(self):
        """Gets the transfers_count of this Token.  # noqa: E501

        Total number of transfers.   **[sortable]**  # noqa: E501

        :return: The transfers_count of this Token.  # noqa: E501
        :rtype: int
        """
        return self._transfers_count

    @transfers_count.setter
    def transfers_count(self, transfers_count):
        """Sets the transfers_count of this Token.

        Total number of transfers.   **[sortable]**  # noqa: E501

        :param transfers_count: The transfers_count of this Token.  # noqa: E501
        :type: int
        """

        self._transfers_count = transfers_count

    @property
    def balances_count(self):
        """Gets the balances_count of this Token.  # noqa: E501

        Total number of holders ever seen.   **[sortable]**  # noqa: E501

        :return: The balances_count of this Token.  # noqa: E501
        :rtype: int
        """
        return self._balances_count

    @balances_count.setter
    def balances_count(self, balances_count):
        """Sets the balances_count of this Token.

        Total number of holders ever seen.   **[sortable]**  # noqa: E501

        :param balances_count: The balances_count of this Token.  # noqa: E501
        :type: int
        """

        self._balances_count = balances_count

    @property
    def holders_count(self):
        """Gets the holders_count of this Token.  # noqa: E501

        Total number of current holders.   **[sortable]**  # noqa: E501

        :return: The holders_count of this Token.  # noqa: E501
        :rtype: int
        """
        return self._holders_count

    @holders_count.setter
    def holders_count(self, holders_count):
        """Sets the holders_count of this Token.

        Total number of current holders.   **[sortable]**  # noqa: E501

        :param holders_count: The holders_count of this Token.  # noqa: E501
        :type: int
        """

        self._holders_count = holders_count

    @property
    def total_minted(self):
        """Gets the total_minted of this Token.  # noqa: E501

        Total number of minted tokens (raw value, not divided by `decimals`).  # noqa: E501

        :return: The total_minted of this Token.  # noqa: E501
        :rtype: str
        """
        return self._total_minted

    @total_minted.setter
    def total_minted(self, total_minted):
        """Sets the total_minted of this Token.

        Total number of minted tokens (raw value, not divided by `decimals`).  # noqa: E501

        :param total_minted: The total_minted of this Token.  # noqa: E501
        :type: str
        """

        self._total_minted = total_minted

    @property
    def total_burned(self):
        """Gets the total_burned of this Token.  # noqa: E501

        Total number of burned tokens (raw value, not divided by `decimals`).  # noqa: E501

        :return: The total_burned of this Token.  # noqa: E501
        :rtype: str
        """
        return self._total_burned

    @total_burned.setter
    def total_burned(self, total_burned):
        """Sets the total_burned of this Token.

        Total number of burned tokens (raw value, not divided by `decimals`).  # noqa: E501

        :param total_burned: The total_burned of this Token.  # noqa: E501
        :type: str
        """

        self._total_burned = total_burned

    @property
    def total_supply(self):
        """Gets the total_supply of this Token.  # noqa: E501

        Total number of existing tokens (raw value, not divided by `decimals`).  # noqa: E501

        :return: The total_supply of this Token.  # noqa: E501
        :rtype: str
        """
        return self._total_supply

    @total_supply.setter
    def total_supply(self, total_supply):
        """Sets the total_supply of this Token.

        Total number of existing tokens (raw value, not divided by `decimals`).  # noqa: E501

        :param total_supply: The total_supply of this Token.  # noqa: E501
        :type: str
        """

        self._total_supply = total_supply

    @property
    def metadata(self):
        """Gets the metadata of this Token.  # noqa: E501

        Token metadata.   **[sortable]**  # noqa: E501

        :return: The metadata of this Token.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Token.

        Token metadata.   **[sortable]**  # noqa: E501

        :param metadata: The metadata of this Token.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Token, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Token):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
