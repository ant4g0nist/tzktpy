# coding: utf-8

"""
    TzKT API

    # Introduction  TzKT Explorer provides free REST API and WebSocket API for accessing detailed Tezos blockchain data and helps developers build more services and applications on top of Tezos. TzKT is an open-source project, so you can easily clone and build it and use it as a self-hosted service to avoid any risks of depending on third-party services.  TzKT API is available for the following Tezos networks with the following base URLs:  - Mainnet: `https://api.tzkt.io/` or `https://api.mainnet.tzkt.io/` ([view docs](https://api.tzkt.io))  - Hangzhounet: `https://api.hangzhounet.tzkt.io/` ([view docs](https://api.hangzhounet.tzkt.io)) - Ithacanet: `https://api.ithacanet.tzkt.io/` ([view docs](https://api.ithacanet.tzkt.io))  We also provide a staging environment for testing newest features and pre-updating client applications before deploying to production:  - Mainnet staging: `https://staging.api.tzkt.io/` or `https://staging.api.mainnet.tzkt.io/` ([view docs](https://staging.api.tzkt.io))  Feel free to contact us if you have any questions or feature requests. Your feedback really helps us make TzKT better!  - Discord: https://discord.gg/aG8XKuwsQd - Telegram: https://t.me/baking_bad_chat - Slack: https://tezos-dev.slack.com/archives/CV5NX7F2L - Twitter: https://twitter.com/TezosBakingBad - Email: hello@baking-bad.org  And don't forget to star TzKT project [on GitHub](https://github.com/baking-bad/tzkt) ;)  # Terms of Use  TzKT API is free for everyone and for both commercial and non-commercial usage.  If your application or service uses the TzKT API in any forms: directly on frontend or indirectly on backend, you must mention that fact on your website or application by placing the label **\"Powered by TzKT API\"** or **\"Built with TzKT API\"** with a direct link to [tzkt.io](https://tzkt.io).   # Rate Limits  There will be no rate limits as long as our servers can handle the load without additional infrastructure costs. However, any apparent abuse will be prevented by setting targeted rate limits.  Check out [Tezos Explorer API Best Practices](https://baking-bad.org/blog/tag/TzKT/) and in particular [how to optimize requests count](https://baking-bad.org/blog/2020/07/29/tezos-explorer-api-tzkt-how-often-to-make-requests/).  ---   # noqa: E501

    OpenAPI spec version: v1.8.3
    Contact: hello@baking-bad.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PeriodInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'index': 'int',
        'epoch': 'int',
        'kind': 'str',
        'first_level': 'int',
        'last_level': 'int'
    }

    attribute_map = {
        'index': 'index',
        'epoch': 'epoch',
        'kind': 'kind',
        'first_level': 'firstLevel',
        'last_level': 'lastLevel'
    }

    def __init__(self, index=None, epoch=None, kind=None, first_level=None, last_level=None):  # noqa: E501
        """PeriodInfo - a model defined in Swagger"""  # noqa: E501
        self._index = None
        self._epoch = None
        self._kind = None
        self._first_level = None
        self._last_level = None
        self.discriminator = None
        if index is not None:
            self.index = index
        if epoch is not None:
            self.epoch = epoch
        if kind is not None:
            self.kind = kind
        if first_level is not None:
            self.first_level = first_level
        if last_level is not None:
            self.last_level = last_level

    @property
    def index(self):
        """Gets the index of this PeriodInfo.  # noqa: E501

        Voting period index, starting from zero  # noqa: E501

        :return: The index of this PeriodInfo.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this PeriodInfo.

        Voting period index, starting from zero  # noqa: E501

        :param index: The index of this PeriodInfo.  # noqa: E501
        :type: int
        """

        self._index = index

    @property
    def epoch(self):
        """Gets the epoch of this PeriodInfo.  # noqa: E501

        Voting epoch index, starting from zero  # noqa: E501

        :return: The epoch of this PeriodInfo.  # noqa: E501
        :rtype: int
        """
        return self._epoch

    @epoch.setter
    def epoch(self, epoch):
        """Sets the epoch of this PeriodInfo.

        Voting epoch index, starting from zero  # noqa: E501

        :param epoch: The epoch of this PeriodInfo.  # noqa: E501
        :type: int
        """

        self._epoch = epoch

    @property
    def kind(self):
        """Gets the kind of this PeriodInfo.  # noqa: E501

        Kind of the voting period `proposal` - delegates can submit protocol amendment proposals using the proposal operation `exploration` -  bakers (delegates) may vote on the top-ranked proposal from the previous Proposal Period using the ballot operation `testing` - If the proposal is approved in the Exploration Period, the testing (or 'cooldown') period begins and bakers start testing the new protocol `promotion` - delegates can cast one vote to promote or not the tested proposal using the ballot operation `adoption` - after the proposal is actually accepted, the ecosystem has some time to prepare to the upgrade Learn more: https://tezos.gitlab.io/whitedoc/voting.html  # noqa: E501

        :return: The kind of this PeriodInfo.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this PeriodInfo.

        Kind of the voting period `proposal` - delegates can submit protocol amendment proposals using the proposal operation `exploration` -  bakers (delegates) may vote on the top-ranked proposal from the previous Proposal Period using the ballot operation `testing` - If the proposal is approved in the Exploration Period, the testing (or 'cooldown') period begins and bakers start testing the new protocol `promotion` - delegates can cast one vote to promote or not the tested proposal using the ballot operation `adoption` - after the proposal is actually accepted, the ecosystem has some time to prepare to the upgrade Learn more: https://tezos.gitlab.io/whitedoc/voting.html  # noqa: E501

        :param kind: The kind of this PeriodInfo.  # noqa: E501
        :type: str
        """

        self._kind = kind

    @property
    def first_level(self):
        """Gets the first_level of this PeriodInfo.  # noqa: E501

        The height of the block in which the period starts  # noqa: E501

        :return: The first_level of this PeriodInfo.  # noqa: E501
        :rtype: int
        """
        return self._first_level

    @first_level.setter
    def first_level(self, first_level):
        """Sets the first_level of this PeriodInfo.

        The height of the block in which the period starts  # noqa: E501

        :param first_level: The first_level of this PeriodInfo.  # noqa: E501
        :type: int
        """

        self._first_level = first_level

    @property
    def last_level(self):
        """Gets the last_level of this PeriodInfo.  # noqa: E501

        The height of the block in which the period ends  # noqa: E501

        :return: The last_level of this PeriodInfo.  # noqa: E501
        :rtype: int
        """
        return self._last_level

    @last_level.setter
    def last_level(self, last_level):
        """Sets the last_level of this PeriodInfo.

        The height of the block in which the period ends  # noqa: E501

        :param last_level: The last_level of this PeriodInfo.  # noqa: E501
        :type: int
        """

        self._last_level = last_level

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PeriodInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PeriodInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
