# coding: utf-8

"""
    TzKT API

    # Introduction  TzKT Explorer provides free REST API and WebSocket API for accessing detailed Tezos blockchain data and helps developers build more services and applications on top of Tezos. TzKT is an open-source project, so you can easily clone and build it and use it as a self-hosted service to avoid any risks of depending on third-party services.  TzKT API is available for the following Tezos networks with the following base URLs:  - Mainnet: `https://api.tzkt.io/` or `https://api.mainnet.tzkt.io/` ([view docs](https://api.tzkt.io))  - Hangzhounet: `https://api.hangzhounet.tzkt.io/` ([view docs](https://api.hangzhounet.tzkt.io)) - Ithacanet: `https://api.ithacanet.tzkt.io/` ([view docs](https://api.ithacanet.tzkt.io))  We also provide a staging environment for testing newest features and pre-updating client applications before deploying to production:  - Mainnet staging: `https://staging.api.tzkt.io/` or `https://staging.api.mainnet.tzkt.io/` ([view docs](https://staging.api.tzkt.io))  Feel free to contact us if you have any questions or feature requests. Your feedback really helps us make TzKT better!  - Discord: https://discord.gg/aG8XKuwsQd - Telegram: https://t.me/baking_bad_chat - Slack: https://tezos-dev.slack.com/archives/CV5NX7F2L - Twitter: https://twitter.com/TezosBakingBad - Email: hello@baking-bad.org  And don't forget to star TzKT project [on GitHub](https://github.com/baking-bad/tzkt) ;)  # Terms of Use  TzKT API is free for everyone and for both commercial and non-commercial usage.  If your application or service uses the TzKT API in any forms: directly on frontend or indirectly on backend, you must mention that fact on your website or application by placing the label **\"Powered by TzKT API\"** or **\"Built with TzKT API\"** with a direct link to [tzkt.io](https://tzkt.io).   # Rate Limits  There will be no rate limits as long as our servers can handle the load without additional infrastructure costs. However, any apparent abuse will be prevented by setting targeted rate limits.  Check out [Tezos Explorer API Best Practices](https://baking-bad.org/blog/tag/TzKT/) and in particular [how to optimize requests count](https://baking-bad.org/blog/2020/07/29/tezos-explorer-api-tzkt-how-often-to-make-requests/).  ---   # noqa: E501

    OpenAPI spec version: v1.8.3
    Contact: hello@baking-bad.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProtocolConstants(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ramp_up_cycles': 'int',
        'no_reward_cycles': 'int',
        'preserved_cycles': 'int',
        'blocks_per_cycle': 'int',
        'blocks_per_commitment': 'int',
        'blocks_per_snapshot': 'int',
        'blocks_per_voting': 'int',
        'time_between_blocks': 'int',
        'endorsers_per_block': 'int',
        'hard_operation_gas_limit': 'int',
        'hard_operation_storage_limit': 'int',
        'hard_block_gas_limit': 'int',
        'tokens_per_roll': 'int',
        'revelation_reward': 'int',
        'block_deposit': 'int',
        'block_reward': 'list[int]',
        'endorsement_deposit': 'int',
        'endorsement_reward': 'list[int]',
        'origination_size': 'int',
        'byte_cost': 'int',
        'proposal_quorum': 'float',
        'ballot_quorum_min': 'float',
        'ballot_quorum_max': 'float',
        'lb_subsidy': 'int',
        'lb_sunset_level': 'int',
        'lb_escape_threshold': 'int',
        'consensus_threshold': 'int',
        'min_participation_numerator': 'int',
        'min_participation_denominator': 'int',
        'max_slashing_period': 'int',
        'frozen_deposits_percentage': 'int',
        'double_baking_punishment': 'int',
        'double_endorsing_punishment_numerator': 'int',
        'double_endorsing_punishment_denominator': 'int'
    }

    attribute_map = {
        'ramp_up_cycles': 'rampUpCycles',
        'no_reward_cycles': 'noRewardCycles',
        'preserved_cycles': 'preservedCycles',
        'blocks_per_cycle': 'blocksPerCycle',
        'blocks_per_commitment': 'blocksPerCommitment',
        'blocks_per_snapshot': 'blocksPerSnapshot',
        'blocks_per_voting': 'blocksPerVoting',
        'time_between_blocks': 'timeBetweenBlocks',
        'endorsers_per_block': 'endorsersPerBlock',
        'hard_operation_gas_limit': 'hardOperationGasLimit',
        'hard_operation_storage_limit': 'hardOperationStorageLimit',
        'hard_block_gas_limit': 'hardBlockGasLimit',
        'tokens_per_roll': 'tokensPerRoll',
        'revelation_reward': 'revelationReward',
        'block_deposit': 'blockDeposit',
        'block_reward': 'blockReward',
        'endorsement_deposit': 'endorsementDeposit',
        'endorsement_reward': 'endorsementReward',
        'origination_size': 'originationSize',
        'byte_cost': 'byteCost',
        'proposal_quorum': 'proposalQuorum',
        'ballot_quorum_min': 'ballotQuorumMin',
        'ballot_quorum_max': 'ballotQuorumMax',
        'lb_subsidy': 'lbSubsidy',
        'lb_sunset_level': 'lbSunsetLevel',
        'lb_escape_threshold': 'lbEscapeThreshold',
        'consensus_threshold': 'consensusThreshold',
        'min_participation_numerator': 'minParticipationNumerator',
        'min_participation_denominator': 'minParticipationDenominator',
        'max_slashing_period': 'maxSlashingPeriod',
        'frozen_deposits_percentage': 'frozenDepositsPercentage',
        'double_baking_punishment': 'doubleBakingPunishment',
        'double_endorsing_punishment_numerator': 'doubleEndorsingPunishmentNumerator',
        'double_endorsing_punishment_denominator': 'doubleEndorsingPunishmentDenominator'
    }

    def __init__(self, ramp_up_cycles=None, no_reward_cycles=None, preserved_cycles=None, blocks_per_cycle=None, blocks_per_commitment=None, blocks_per_snapshot=None, blocks_per_voting=None, time_between_blocks=None, endorsers_per_block=None, hard_operation_gas_limit=None, hard_operation_storage_limit=None, hard_block_gas_limit=None, tokens_per_roll=None, revelation_reward=None, block_deposit=None, block_reward=None, endorsement_deposit=None, endorsement_reward=None, origination_size=None, byte_cost=None, proposal_quorum=None, ballot_quorum_min=None, ballot_quorum_max=None, lb_subsidy=None, lb_sunset_level=None, lb_escape_threshold=None, consensus_threshold=None, min_participation_numerator=None, min_participation_denominator=None, max_slashing_period=None, frozen_deposits_percentage=None, double_baking_punishment=None, double_endorsing_punishment_numerator=None, double_endorsing_punishment_denominator=None):  # noqa: E501
        """ProtocolConstants - a model defined in Swagger"""  # noqa: E501
        self._ramp_up_cycles = None
        self._no_reward_cycles = None
        self._preserved_cycles = None
        self._blocks_per_cycle = None
        self._blocks_per_commitment = None
        self._blocks_per_snapshot = None
        self._blocks_per_voting = None
        self._time_between_blocks = None
        self._endorsers_per_block = None
        self._hard_operation_gas_limit = None
        self._hard_operation_storage_limit = None
        self._hard_block_gas_limit = None
        self._tokens_per_roll = None
        self._revelation_reward = None
        self._block_deposit = None
        self._block_reward = None
        self._endorsement_deposit = None
        self._endorsement_reward = None
        self._origination_size = None
        self._byte_cost = None
        self._proposal_quorum = None
        self._ballot_quorum_min = None
        self._ballot_quorum_max = None
        self._lb_subsidy = None
        self._lb_sunset_level = None
        self._lb_escape_threshold = None
        self._consensus_threshold = None
        self._min_participation_numerator = None
        self._min_participation_denominator = None
        self._max_slashing_period = None
        self._frozen_deposits_percentage = None
        self._double_baking_punishment = None
        self._double_endorsing_punishment_numerator = None
        self._double_endorsing_punishment_denominator = None
        self.discriminator = None
        if ramp_up_cycles is not None:
            self.ramp_up_cycles = ramp_up_cycles
        if no_reward_cycles is not None:
            self.no_reward_cycles = no_reward_cycles
        if preserved_cycles is not None:
            self.preserved_cycles = preserved_cycles
        if blocks_per_cycle is not None:
            self.blocks_per_cycle = blocks_per_cycle
        if blocks_per_commitment is not None:
            self.blocks_per_commitment = blocks_per_commitment
        if blocks_per_snapshot is not None:
            self.blocks_per_snapshot = blocks_per_snapshot
        if blocks_per_voting is not None:
            self.blocks_per_voting = blocks_per_voting
        if time_between_blocks is not None:
            self.time_between_blocks = time_between_blocks
        if endorsers_per_block is not None:
            self.endorsers_per_block = endorsers_per_block
        if hard_operation_gas_limit is not None:
            self.hard_operation_gas_limit = hard_operation_gas_limit
        if hard_operation_storage_limit is not None:
            self.hard_operation_storage_limit = hard_operation_storage_limit
        if hard_block_gas_limit is not None:
            self.hard_block_gas_limit = hard_block_gas_limit
        if tokens_per_roll is not None:
            self.tokens_per_roll = tokens_per_roll
        if revelation_reward is not None:
            self.revelation_reward = revelation_reward
        if block_deposit is not None:
            self.block_deposit = block_deposit
        if block_reward is not None:
            self.block_reward = block_reward
        if endorsement_deposit is not None:
            self.endorsement_deposit = endorsement_deposit
        if endorsement_reward is not None:
            self.endorsement_reward = endorsement_reward
        if origination_size is not None:
            self.origination_size = origination_size
        if byte_cost is not None:
            self.byte_cost = byte_cost
        if proposal_quorum is not None:
            self.proposal_quorum = proposal_quorum
        if ballot_quorum_min is not None:
            self.ballot_quorum_min = ballot_quorum_min
        if ballot_quorum_max is not None:
            self.ballot_quorum_max = ballot_quorum_max
        if lb_subsidy is not None:
            self.lb_subsidy = lb_subsidy
        if lb_sunset_level is not None:
            self.lb_sunset_level = lb_sunset_level
        if lb_escape_threshold is not None:
            self.lb_escape_threshold = lb_escape_threshold
        if consensus_threshold is not None:
            self.consensus_threshold = consensus_threshold
        if min_participation_numerator is not None:
            self.min_participation_numerator = min_participation_numerator
        if min_participation_denominator is not None:
            self.min_participation_denominator = min_participation_denominator
        if max_slashing_period is not None:
            self.max_slashing_period = max_slashing_period
        if frozen_deposits_percentage is not None:
            self.frozen_deposits_percentage = frozen_deposits_percentage
        if double_baking_punishment is not None:
            self.double_baking_punishment = double_baking_punishment
        if double_endorsing_punishment_numerator is not None:
            self.double_endorsing_punishment_numerator = double_endorsing_punishment_numerator
        if double_endorsing_punishment_denominator is not None:
            self.double_endorsing_punishment_denominator = double_endorsing_punishment_denominator

    @property
    def ramp_up_cycles(self):
        """Gets the ramp_up_cycles of this ProtocolConstants.  # noqa: E501

        The number of cycles where security deposit is ramping up  # noqa: E501

        :return: The ramp_up_cycles of this ProtocolConstants.  # noqa: E501
        :rtype: int
        """
        return self._ramp_up_cycles

    @ramp_up_cycles.setter
    def ramp_up_cycles(self, ramp_up_cycles):
        """Sets the ramp_up_cycles of this ProtocolConstants.

        The number of cycles where security deposit is ramping up  # noqa: E501

        :param ramp_up_cycles: The ramp_up_cycles of this ProtocolConstants.  # noqa: E501
        :type: int
        """

        self._ramp_up_cycles = ramp_up_cycles

    @property
    def no_reward_cycles(self):
        """Gets the no_reward_cycles of this ProtocolConstants.  # noqa: E501

        The number of cycles with no baking rewards  # noqa: E501

        :return: The no_reward_cycles of this ProtocolConstants.  # noqa: E501
        :rtype: int
        """
        return self._no_reward_cycles

    @no_reward_cycles.setter
    def no_reward_cycles(self, no_reward_cycles):
        """Sets the no_reward_cycles of this ProtocolConstants.

        The number of cycles with no baking rewards  # noqa: E501

        :param no_reward_cycles: The no_reward_cycles of this ProtocolConstants.  # noqa: E501
        :type: int
        """

        self._no_reward_cycles = no_reward_cycles

    @property
    def preserved_cycles(self):
        """Gets the preserved_cycles of this ProtocolConstants.  # noqa: E501

        A number of cycles in which baker's security deposit and rewards are frozen  # noqa: E501

        :return: The preserved_cycles of this ProtocolConstants.  # noqa: E501
        :rtype: int
        """
        return self._preserved_cycles

    @preserved_cycles.setter
    def preserved_cycles(self, preserved_cycles):
        """Sets the preserved_cycles of this ProtocolConstants.

        A number of cycles in which baker's security deposit and rewards are frozen  # noqa: E501

        :param preserved_cycles: The preserved_cycles of this ProtocolConstants.  # noqa: E501
        :type: int
        """

        self._preserved_cycles = preserved_cycles

    @property
    def blocks_per_cycle(self):
        """Gets the blocks_per_cycle of this ProtocolConstants.  # noqa: E501

        A number of blocks the cycle contains  # noqa: E501

        :return: The blocks_per_cycle of this ProtocolConstants.  # noqa: E501
        :rtype: int
        """
        return self._blocks_per_cycle

    @blocks_per_cycle.setter
    def blocks_per_cycle(self, blocks_per_cycle):
        """Sets the blocks_per_cycle of this ProtocolConstants.

        A number of blocks the cycle contains  # noqa: E501

        :param blocks_per_cycle: The blocks_per_cycle of this ProtocolConstants.  # noqa: E501
        :type: int
        """

        self._blocks_per_cycle = blocks_per_cycle

    @property
    def blocks_per_commitment(self):
        """Gets the blocks_per_commitment of this ProtocolConstants.  # noqa: E501

        A number of blocks that indicates how often seed nonce hash is included in a block. Seed nonce hash presents in only one out of `blocksPerCommitment`  # noqa: E501

        :return: The blocks_per_commitment of this ProtocolConstants.  # noqa: E501
        :rtype: int
        """
        return self._blocks_per_commitment

    @blocks_per_commitment.setter
    def blocks_per_commitment(self, blocks_per_commitment):
        """Sets the blocks_per_commitment of this ProtocolConstants.

        A number of blocks that indicates how often seed nonce hash is included in a block. Seed nonce hash presents in only one out of `blocksPerCommitment`  # noqa: E501

        :param blocks_per_commitment: The blocks_per_commitment of this ProtocolConstants.  # noqa: E501
        :type: int
        """

        self._blocks_per_commitment = blocks_per_commitment

    @property
    def blocks_per_snapshot(self):
        """Gets the blocks_per_snapshot of this ProtocolConstants.  # noqa: E501

        A number of blocks that indicates how often a snapshot (snapshots are records of the state of rolls distributions) is taken  # noqa: E501

        :return: The blocks_per_snapshot of this ProtocolConstants.  # noqa: E501
        :rtype: int
        """
        return self._blocks_per_snapshot

    @blocks_per_snapshot.setter
    def blocks_per_snapshot(self, blocks_per_snapshot):
        """Sets the blocks_per_snapshot of this ProtocolConstants.

        A number of blocks that indicates how often a snapshot (snapshots are records of the state of rolls distributions) is taken  # noqa: E501

        :param blocks_per_snapshot: The blocks_per_snapshot of this ProtocolConstants.  # noqa: E501
        :type: int
        """

        self._blocks_per_snapshot = blocks_per_snapshot

    @property
    def blocks_per_voting(self):
        """Gets the blocks_per_voting of this ProtocolConstants.  # noqa: E501

        A number of block that indicates how long a voting period takes  # noqa: E501

        :return: The blocks_per_voting of this ProtocolConstants.  # noqa: E501
        :rtype: int
        """
        return self._blocks_per_voting

    @blocks_per_voting.setter
    def blocks_per_voting(self, blocks_per_voting):
        """Sets the blocks_per_voting of this ProtocolConstants.

        A number of block that indicates how long a voting period takes  # noqa: E501

        :param blocks_per_voting: The blocks_per_voting of this ProtocolConstants.  # noqa: E501
        :type: int
        """

        self._blocks_per_voting = blocks_per_voting

    @property
    def time_between_blocks(self):
        """Gets the time_between_blocks of this ProtocolConstants.  # noqa: E501

        Minimum amount of seconds between blocks  # noqa: E501

        :return: The time_between_blocks of this ProtocolConstants.  # noqa: E501
        :rtype: int
        """
        return self._time_between_blocks

    @time_between_blocks.setter
    def time_between_blocks(self, time_between_blocks):
        """Sets the time_between_blocks of this ProtocolConstants.

        Minimum amount of seconds between blocks  # noqa: E501

        :param time_between_blocks: The time_between_blocks of this ProtocolConstants.  # noqa: E501
        :type: int
        """

        self._time_between_blocks = time_between_blocks

    @property
    def endorsers_per_block(self):
        """Gets the endorsers_per_block of this ProtocolConstants.  # noqa: E501

        Number of bakers that assigned to endorse a block  # noqa: E501

        :return: The endorsers_per_block of this ProtocolConstants.  # noqa: E501
        :rtype: int
        """
        return self._endorsers_per_block

    @endorsers_per_block.setter
    def endorsers_per_block(self, endorsers_per_block):
        """Sets the endorsers_per_block of this ProtocolConstants.

        Number of bakers that assigned to endorse a block  # noqa: E501

        :param endorsers_per_block: The endorsers_per_block of this ProtocolConstants.  # noqa: E501
        :type: int
        """

        self._endorsers_per_block = endorsers_per_block

    @property
    def hard_operation_gas_limit(self):
        """Gets the hard_operation_gas_limit of this ProtocolConstants.  # noqa: E501

        Maximum amount of gas that one operation can consume  # noqa: E501

        :return: The hard_operation_gas_limit of this ProtocolConstants.  # noqa: E501
        :rtype: int
        """
        return self._hard_operation_gas_limit

    @hard_operation_gas_limit.setter
    def hard_operation_gas_limit(self, hard_operation_gas_limit):
        """Sets the hard_operation_gas_limit of this ProtocolConstants.

        Maximum amount of gas that one operation can consume  # noqa: E501

        :param hard_operation_gas_limit: The hard_operation_gas_limit of this ProtocolConstants.  # noqa: E501
        :type: int
        """

        self._hard_operation_gas_limit = hard_operation_gas_limit

    @property
    def hard_operation_storage_limit(self):
        """Gets the hard_operation_storage_limit of this ProtocolConstants.  # noqa: E501

        Maximum amount of storage that one operation can consume  # noqa: E501

        :return: The hard_operation_storage_limit of this ProtocolConstants.  # noqa: E501
        :rtype: int
        """
        return self._hard_operation_storage_limit

    @hard_operation_storage_limit.setter
    def hard_operation_storage_limit(self, hard_operation_storage_limit):
        """Sets the hard_operation_storage_limit of this ProtocolConstants.

        Maximum amount of storage that one operation can consume  # noqa: E501

        :param hard_operation_storage_limit: The hard_operation_storage_limit of this ProtocolConstants.  # noqa: E501
        :type: int
        """

        self._hard_operation_storage_limit = hard_operation_storage_limit

    @property
    def hard_block_gas_limit(self):
        """Gets the hard_block_gas_limit of this ProtocolConstants.  # noqa: E501

        Maximum amount of total gas usage of a single block  # noqa: E501

        :return: The hard_block_gas_limit of this ProtocolConstants.  # noqa: E501
        :rtype: int
        """
        return self._hard_block_gas_limit

    @hard_block_gas_limit.setter
    def hard_block_gas_limit(self, hard_block_gas_limit):
        """Sets the hard_block_gas_limit of this ProtocolConstants.

        Maximum amount of total gas usage of a single block  # noqa: E501

        :param hard_block_gas_limit: The hard_block_gas_limit of this ProtocolConstants.  # noqa: E501
        :type: int
        """

        self._hard_block_gas_limit = hard_block_gas_limit

    @property
    def tokens_per_roll(self):
        """Gets the tokens_per_roll of this ProtocolConstants.  # noqa: E501

        Required number of tokens to get 1 roll (micro tez)  # noqa: E501

        :return: The tokens_per_roll of this ProtocolConstants.  # noqa: E501
        :rtype: int
        """
        return self._tokens_per_roll

    @tokens_per_roll.setter
    def tokens_per_roll(self, tokens_per_roll):
        """Sets the tokens_per_roll of this ProtocolConstants.

        Required number of tokens to get 1 roll (micro tez)  # noqa: E501

        :param tokens_per_roll: The tokens_per_roll of this ProtocolConstants.  # noqa: E501
        :type: int
        """

        self._tokens_per_roll = tokens_per_roll

    @property
    def revelation_reward(self):
        """Gets the revelation_reward of this ProtocolConstants.  # noqa: E501

        Reward for seed nonce revelation (micro tez)  # noqa: E501

        :return: The revelation_reward of this ProtocolConstants.  # noqa: E501
        :rtype: int
        """
        return self._revelation_reward

    @revelation_reward.setter
    def revelation_reward(self, revelation_reward):
        """Sets the revelation_reward of this ProtocolConstants.

        Reward for seed nonce revelation (micro tez)  # noqa: E501

        :param revelation_reward: The revelation_reward of this ProtocolConstants.  # noqa: E501
        :type: int
        """

        self._revelation_reward = revelation_reward

    @property
    def block_deposit(self):
        """Gets the block_deposit of this ProtocolConstants.  # noqa: E501

        Security deposit for baking (producing) a block (micro tez)  # noqa: E501

        :return: The block_deposit of this ProtocolConstants.  # noqa: E501
        :rtype: int
        """
        return self._block_deposit

    @block_deposit.setter
    def block_deposit(self, block_deposit):
        """Sets the block_deposit of this ProtocolConstants.

        Security deposit for baking (producing) a block (micro tez)  # noqa: E501

        :param block_deposit: The block_deposit of this ProtocolConstants.  # noqa: E501
        :type: int
        """

        self._block_deposit = block_deposit

    @property
    def block_reward(self):
        """Gets the block_reward of this ProtocolConstants.  # noqa: E501

        Reward for baking (producing) a block (micro tez)  # noqa: E501

        :return: The block_reward of this ProtocolConstants.  # noqa: E501
        :rtype: list[int]
        """
        return self._block_reward

    @block_reward.setter
    def block_reward(self, block_reward):
        """Sets the block_reward of this ProtocolConstants.

        Reward for baking (producing) a block (micro tez)  # noqa: E501

        :param block_reward: The block_reward of this ProtocolConstants.  # noqa: E501
        :type: list[int]
        """

        self._block_reward = block_reward

    @property
    def endorsement_deposit(self):
        """Gets the endorsement_deposit of this ProtocolConstants.  # noqa: E501

        Security deposit for sending an endorsement operation (micro tez)  # noqa: E501

        :return: The endorsement_deposit of this ProtocolConstants.  # noqa: E501
        :rtype: int
        """
        return self._endorsement_deposit

    @endorsement_deposit.setter
    def endorsement_deposit(self, endorsement_deposit):
        """Sets the endorsement_deposit of this ProtocolConstants.

        Security deposit for sending an endorsement operation (micro tez)  # noqa: E501

        :param endorsement_deposit: The endorsement_deposit of this ProtocolConstants.  # noqa: E501
        :type: int
        """

        self._endorsement_deposit = endorsement_deposit

    @property
    def endorsement_reward(self):
        """Gets the endorsement_reward of this ProtocolConstants.  # noqa: E501

        Reward for sending an endorsement operation (micro tez)  # noqa: E501

        :return: The endorsement_reward of this ProtocolConstants.  # noqa: E501
        :rtype: list[int]
        """
        return self._endorsement_reward

    @endorsement_reward.setter
    def endorsement_reward(self, endorsement_reward):
        """Sets the endorsement_reward of this ProtocolConstants.

        Reward for sending an endorsement operation (micro tez)  # noqa: E501

        :param endorsement_reward: The endorsement_reward of this ProtocolConstants.  # noqa: E501
        :type: list[int]
        """

        self._endorsement_reward = endorsement_reward

    @property
    def origination_size(self):
        """Gets the origination_size of this ProtocolConstants.  # noqa: E501

        Initial storage size of an originated (created) account (bytes)  # noqa: E501

        :return: The origination_size of this ProtocolConstants.  # noqa: E501
        :rtype: int
        """
        return self._origination_size

    @origination_size.setter
    def origination_size(self, origination_size):
        """Sets the origination_size of this ProtocolConstants.

        Initial storage size of an originated (created) account (bytes)  # noqa: E501

        :param origination_size: The origination_size of this ProtocolConstants.  # noqa: E501
        :type: int
        """

        self._origination_size = origination_size

    @property
    def byte_cost(self):
        """Gets the byte_cost of this ProtocolConstants.  # noqa: E501

        Cost of one storage byte in the blockchain (micro tez)  # noqa: E501

        :return: The byte_cost of this ProtocolConstants.  # noqa: E501
        :rtype: int
        """
        return self._byte_cost

    @byte_cost.setter
    def byte_cost(self, byte_cost):
        """Sets the byte_cost of this ProtocolConstants.

        Cost of one storage byte in the blockchain (micro tez)  # noqa: E501

        :param byte_cost: The byte_cost of this ProtocolConstants.  # noqa: E501
        :type: int
        """

        self._byte_cost = byte_cost

    @property
    def proposal_quorum(self):
        """Gets the proposal_quorum of this ProtocolConstants.  # noqa: E501

        Percentage of the total number of rolls required to select a proposal on the proposal period  # noqa: E501

        :return: The proposal_quorum of this ProtocolConstants.  # noqa: E501
        :rtype: float
        """
        return self._proposal_quorum

    @proposal_quorum.setter
    def proposal_quorum(self, proposal_quorum):
        """Sets the proposal_quorum of this ProtocolConstants.

        Percentage of the total number of rolls required to select a proposal on the proposal period  # noqa: E501

        :param proposal_quorum: The proposal_quorum of this ProtocolConstants.  # noqa: E501
        :type: float
        """

        self._proposal_quorum = proposal_quorum

    @property
    def ballot_quorum_min(self):
        """Gets the ballot_quorum_min of this ProtocolConstants.  # noqa: E501

        The minimum value of quorum percentage on the exploration and promotion periods  # noqa: E501

        :return: The ballot_quorum_min of this ProtocolConstants.  # noqa: E501
        :rtype: float
        """
        return self._ballot_quorum_min

    @ballot_quorum_min.setter
    def ballot_quorum_min(self, ballot_quorum_min):
        """Sets the ballot_quorum_min of this ProtocolConstants.

        The minimum value of quorum percentage on the exploration and promotion periods  # noqa: E501

        :param ballot_quorum_min: The ballot_quorum_min of this ProtocolConstants.  # noqa: E501
        :type: float
        """

        self._ballot_quorum_min = ballot_quorum_min

    @property
    def ballot_quorum_max(self):
        """Gets the ballot_quorum_max of this ProtocolConstants.  # noqa: E501

        The maximum value of quorum percentage on the exploration and promotion periods  # noqa: E501

        :return: The ballot_quorum_max of this ProtocolConstants.  # noqa: E501
        :rtype: float
        """
        return self._ballot_quorum_max

    @ballot_quorum_max.setter
    def ballot_quorum_max(self, ballot_quorum_max):
        """Sets the ballot_quorum_max of this ProtocolConstants.

        The maximum value of quorum percentage on the exploration and promotion periods  # noqa: E501

        :param ballot_quorum_max: The ballot_quorum_max of this ProtocolConstants.  # noqa: E501
        :type: float
        """

        self._ballot_quorum_max = ballot_quorum_max

    @property
    def lb_subsidy(self):
        """Gets the lb_subsidy of this ProtocolConstants.  # noqa: E501

        Liquidity baking subsidy is 1/16th of total rewards for a block of priority 0 with all endorsements  # noqa: E501

        :return: The lb_subsidy of this ProtocolConstants.  # noqa: E501
        :rtype: int
        """
        return self._lb_subsidy

    @lb_subsidy.setter
    def lb_subsidy(self, lb_subsidy):
        """Sets the lb_subsidy of this ProtocolConstants.

        Liquidity baking subsidy is 1/16th of total rewards for a block of priority 0 with all endorsements  # noqa: E501

        :param lb_subsidy: The lb_subsidy of this ProtocolConstants.  # noqa: E501
        :type: int
        """

        self._lb_subsidy = lb_subsidy

    @property
    def lb_sunset_level(self):
        """Gets the lb_sunset_level of this ProtocolConstants.  # noqa: E501

        Level after protocol activation when liquidity baking shuts off  # noqa: E501

        :return: The lb_sunset_level of this ProtocolConstants.  # noqa: E501
        :rtype: int
        """
        return self._lb_sunset_level

    @lb_sunset_level.setter
    def lb_sunset_level(self, lb_sunset_level):
        """Sets the lb_sunset_level of this ProtocolConstants.

        Level after protocol activation when liquidity baking shuts off  # noqa: E501

        :param lb_sunset_level: The lb_sunset_level of this ProtocolConstants.  # noqa: E501
        :type: int
        """

        self._lb_sunset_level = lb_sunset_level

    @property
    def lb_escape_threshold(self):
        """Gets the lb_escape_threshold of this ProtocolConstants.  # noqa: E501

        1/2 window size of 2000 blocks with precision of 1000 for integer computation  # noqa: E501

        :return: The lb_escape_threshold of this ProtocolConstants.  # noqa: E501
        :rtype: int
        """
        return self._lb_escape_threshold

    @lb_escape_threshold.setter
    def lb_escape_threshold(self, lb_escape_threshold):
        """Sets the lb_escape_threshold of this ProtocolConstants.

        1/2 window size of 2000 blocks with precision of 1000 for integer computation  # noqa: E501

        :param lb_escape_threshold: The lb_escape_threshold of this ProtocolConstants.  # noqa: E501
        :type: int
        """

        self._lb_escape_threshold = lb_escape_threshold

    @property
    def consensus_threshold(self):
        """Gets the consensus_threshold of this ProtocolConstants.  # noqa: E501

        Endorsement quorum  # noqa: E501

        :return: The consensus_threshold of this ProtocolConstants.  # noqa: E501
        :rtype: int
        """
        return self._consensus_threshold

    @consensus_threshold.setter
    def consensus_threshold(self, consensus_threshold):
        """Sets the consensus_threshold of this ProtocolConstants.

        Endorsement quorum  # noqa: E501

        :param consensus_threshold: The consensus_threshold of this ProtocolConstants.  # noqa: E501
        :type: int
        """

        self._consensus_threshold = consensus_threshold

    @property
    def min_participation_numerator(self):
        """Gets the min_participation_numerator of this ProtocolConstants.  # noqa: E501

        Number of endorsed slots needed to receive endorsing rewards  # noqa: E501

        :return: The min_participation_numerator of this ProtocolConstants.  # noqa: E501
        :rtype: int
        """
        return self._min_participation_numerator

    @min_participation_numerator.setter
    def min_participation_numerator(self, min_participation_numerator):
        """Sets the min_participation_numerator of this ProtocolConstants.

        Number of endorsed slots needed to receive endorsing rewards  # noqa: E501

        :param min_participation_numerator: The min_participation_numerator of this ProtocolConstants.  # noqa: E501
        :type: int
        """

        self._min_participation_numerator = min_participation_numerator

    @property
    def min_participation_denominator(self):
        """Gets the min_participation_denominator of this ProtocolConstants.  # noqa: E501

        Number of endorsed slots needed to receive endorsing rewards  # noqa: E501

        :return: The min_participation_denominator of this ProtocolConstants.  # noqa: E501
        :rtype: int
        """
        return self._min_participation_denominator

    @min_participation_denominator.setter
    def min_participation_denominator(self, min_participation_denominator):
        """Sets the min_participation_denominator of this ProtocolConstants.

        Number of endorsed slots needed to receive endorsing rewards  # noqa: E501

        :param min_participation_denominator: The min_participation_denominator of this ProtocolConstants.  # noqa: E501
        :type: int
        """

        self._min_participation_denominator = min_participation_denominator

    @property
    def max_slashing_period(self):
        """Gets the max_slashing_period of this ProtocolConstants.  # noqa: E501

        Number of cycles after double baking/(pre)endorsing where an accusation operation can be injected  # noqa: E501

        :return: The max_slashing_period of this ProtocolConstants.  # noqa: E501
        :rtype: int
        """
        return self._max_slashing_period

    @max_slashing_period.setter
    def max_slashing_period(self, max_slashing_period):
        """Sets the max_slashing_period of this ProtocolConstants.

        Number of cycles after double baking/(pre)endorsing where an accusation operation can be injected  # noqa: E501

        :param max_slashing_period: The max_slashing_period of this ProtocolConstants.  # noqa: E501
        :type: int
        """

        self._max_slashing_period = max_slashing_period

    @property
    def frozen_deposits_percentage(self):
        """Gets the frozen_deposits_percentage of this ProtocolConstants.  # noqa: E501

        How much of baker's active stake is frozen as a security deposit  # noqa: E501

        :return: The frozen_deposits_percentage of this ProtocolConstants.  # noqa: E501
        :rtype: int
        """
        return self._frozen_deposits_percentage

    @frozen_deposits_percentage.setter
    def frozen_deposits_percentage(self, frozen_deposits_percentage):
        """Sets the frozen_deposits_percentage of this ProtocolConstants.

        How much of baker's active stake is frozen as a security deposit  # noqa: E501

        :param frozen_deposits_percentage: The frozen_deposits_percentage of this ProtocolConstants.  # noqa: E501
        :type: int
        """

        self._frozen_deposits_percentage = frozen_deposits_percentage

    @property
    def double_baking_punishment(self):
        """Gets the double_baking_punishment of this ProtocolConstants.  # noqa: E501

        How much mutez is burned from baker's frozen deposits, in case of double baking  # noqa: E501

        :return: The double_baking_punishment of this ProtocolConstants.  # noqa: E501
        :rtype: int
        """
        return self._double_baking_punishment

    @double_baking_punishment.setter
    def double_baking_punishment(self, double_baking_punishment):
        """Sets the double_baking_punishment of this ProtocolConstants.

        How much mutez is burned from baker's frozen deposits, in case of double baking  # noqa: E501

        :param double_baking_punishment: The double_baking_punishment of this ProtocolConstants.  # noqa: E501
        :type: int
        """

        self._double_baking_punishment = double_baking_punishment

    @property
    def double_endorsing_punishment_numerator(self):
        """Gets the double_endorsing_punishment_numerator of this ProtocolConstants.  # noqa: E501

        How much is burned from baker's frozen deposits, in case of double (pre)endorsing  # noqa: E501

        :return: The double_endorsing_punishment_numerator of this ProtocolConstants.  # noqa: E501
        :rtype: int
        """
        return self._double_endorsing_punishment_numerator

    @double_endorsing_punishment_numerator.setter
    def double_endorsing_punishment_numerator(self, double_endorsing_punishment_numerator):
        """Sets the double_endorsing_punishment_numerator of this ProtocolConstants.

        How much is burned from baker's frozen deposits, in case of double (pre)endorsing  # noqa: E501

        :param double_endorsing_punishment_numerator: The double_endorsing_punishment_numerator of this ProtocolConstants.  # noqa: E501
        :type: int
        """

        self._double_endorsing_punishment_numerator = double_endorsing_punishment_numerator

    @property
    def double_endorsing_punishment_denominator(self):
        """Gets the double_endorsing_punishment_denominator of this ProtocolConstants.  # noqa: E501

        How much is burned from baker's frozen deposits, in case of double (pre)endorsing  # noqa: E501

        :return: The double_endorsing_punishment_denominator of this ProtocolConstants.  # noqa: E501
        :rtype: int
        """
        return self._double_endorsing_punishment_denominator

    @double_endorsing_punishment_denominator.setter
    def double_endorsing_punishment_denominator(self, double_endorsing_punishment_denominator):
        """Sets the double_endorsing_punishment_denominator of this ProtocolConstants.

        How much is burned from baker's frozen deposits, in case of double (pre)endorsing  # noqa: E501

        :param double_endorsing_punishment_denominator: The double_endorsing_punishment_denominator of this ProtocolConstants.  # noqa: E501
        :type: int
        """

        self._double_endorsing_punishment_denominator = double_endorsing_punishment_denominator

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProtocolConstants, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProtocolConstants):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
