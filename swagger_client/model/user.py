# coding: utf-8

"""
    TzKT API

    # Introduction  TzKT Explorer provides free REST API and WebSocket API for accessing detailed Tezos blockchain data and helps developers build more services and applications on top of Tezos. TzKT is an open-source project, so you can easily clone and build it and use it as a self-hosted service to avoid any risks of depending on third-party services.  TzKT API is available for the following Tezos networks with the following base URLs:  - Mainnet: `https://api.tzkt.io/` or `https://api.mainnet.tzkt.io/` ([view docs](https://api.tzkt.io))  - Hangzhounet: `https://api.hangzhounet.tzkt.io/` ([view docs](https://api.hangzhounet.tzkt.io)) - Ithacanet: `https://api.ithacanet.tzkt.io/` ([view docs](https://api.ithacanet.tzkt.io))  We also provide a staging environment for testing newest features and pre-updating client applications before deploying to production:  - Mainnet staging: `https://staging.api.tzkt.io/` or `https://staging.api.mainnet.tzkt.io/` ([view docs](https://staging.api.tzkt.io))  Feel free to contact us if you have any questions or feature requests. Your feedback really helps us make TzKT better!  - Discord: https://discord.gg/aG8XKuwsQd - Telegram: https://t.me/baking_bad_chat - Slack: https://tezos-dev.slack.com/archives/CV5NX7F2L - Twitter: https://twitter.com/TezosBakingBad - Email: hello@baking-bad.org  And don't forget to star TzKT project [on GitHub](https://github.com/baking-bad/tzkt) ;)  # Terms of Use  TzKT API is free for everyone and for both commercial and non-commercial usage.  If your application or service uses the TzKT API in any forms: directly on frontend or indirectly on backend, you must mention that fact on your website or application by placing the label **\"Powered by TzKT API\"** or **\"Built with TzKT API\"** with a direct link to [tzkt.io](https://tzkt.io).   # Rate Limits  There will be no rate limits as long as our servers can handle the load without additional infrastructure costs. However, any apparent abuse will be prevented by setting targeted rate limits.  Check out [Tezos Explorer API Best Practices](https://baking-bad.org/blog/tag/TzKT/) and in particular [how to optimize requests count](https://baking-bad.org/blog/2020/07/29/tezos-explorer-api-tzkt-how-often-to-make-requests/).  ---   # noqa: E501

    OpenAPI spec version: v1.8.3
    Contact: hello@baking-bad.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.model.account import Account  # noqa: F401,E501

class User(Account):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'address': 'str',
        'alias': 'str',
        'public_key': 'str',
        'revealed': 'bool',
        'balance': 'int',
        'counter': 'int',
        'delegate': 'object',
        'delegation_level': 'int',
        'delegation_time': 'datetime',
        'num_contracts': 'int',
        'active_tokens_count': 'int',
        'token_balances_count': 'int',
        'token_transfers_count': 'int',
        'num_activations': 'int',
        'num_delegations': 'int',
        'num_originations': 'int',
        'num_transactions': 'int',
        'num_reveals': 'int',
        'num_register_constants': 'int',
        'num_set_deposits_limits': 'int',
        'num_migrations': 'int',
        'first_activity': 'int',
        'first_activity_time': 'datetime',
        'last_activity': 'int',
        'last_activity_time': 'datetime',
        'metadata': 'object'
    }
    if hasattr(Account, "swagger_types"):
        swagger_types.update(Account.swagger_types)

    attribute_map = {
        'type': 'type',
        'address': 'address',
        'alias': 'alias',
        'public_key': 'publicKey',
        'revealed': 'revealed',
        'balance': 'balance',
        'counter': 'counter',
        'delegate': 'delegate',
        'delegation_level': 'delegationLevel',
        'delegation_time': 'delegationTime',
        'num_contracts': 'numContracts',
        'active_tokens_count': 'activeTokensCount',
        'token_balances_count': 'tokenBalancesCount',
        'token_transfers_count': 'tokenTransfersCount',
        'num_activations': 'numActivations',
        'num_delegations': 'numDelegations',
        'num_originations': 'numOriginations',
        'num_transactions': 'numTransactions',
        'num_reveals': 'numReveals',
        'num_register_constants': 'numRegisterConstants',
        'num_set_deposits_limits': 'numSetDepositsLimits',
        'num_migrations': 'numMigrations',
        'first_activity': 'firstActivity',
        'first_activity_time': 'firstActivityTime',
        'last_activity': 'lastActivity',
        'last_activity_time': 'lastActivityTime',
        'metadata': 'metadata'
    }
    if hasattr(Account, "attribute_map"):
        attribute_map.update(Account.attribute_map)

    def __init__(self, type=None, address=None, alias=None, public_key=None, revealed=None, balance=None, counter=None, delegate=None, delegation_level=None, delegation_time=None, num_contracts=None, active_tokens_count=None, token_balances_count=None, token_transfers_count=None, num_activations=None, num_delegations=None, num_originations=None, num_transactions=None, num_reveals=None, num_register_constants=None, num_set_deposits_limits=None, num_migrations=None, first_activity=None, first_activity_time=None, last_activity=None, last_activity_time=None, metadata=None, *args, **kwargs):  # noqa: E501
        """User - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._address = None
        self._alias = None
        self._public_key = None
        self._revealed = None
        self._balance = None
        self._counter = None
        self._delegate = None
        self._delegation_level = None
        self._delegation_time = None
        self._num_contracts = None
        self._active_tokens_count = None
        self._token_balances_count = None
        self._token_transfers_count = None
        self._num_activations = None
        self._num_delegations = None
        self._num_originations = None
        self._num_transactions = None
        self._num_reveals = None
        self._num_register_constants = None
        self._num_set_deposits_limits = None
        self._num_migrations = None
        self._first_activity = None
        self._first_activity_time = None
        self._last_activity = None
        self._last_activity_time = None
        self._metadata = None
        self.discriminator = None
        if type is not None:
            self.type = type
        if address is not None:
            self.address = address
        if alias is not None:
            self.alias = alias
        if public_key is not None:
            self.public_key = public_key
        if revealed is not None:
            self.revealed = revealed
        if balance is not None:
            self.balance = balance
        if counter is not None:
            self.counter = counter
        if delegate is not None:
            self.delegate = delegate
        if delegation_level is not None:
            self.delegation_level = delegation_level
        if delegation_time is not None:
            self.delegation_time = delegation_time
        if num_contracts is not None:
            self.num_contracts = num_contracts
        if active_tokens_count is not None:
            self.active_tokens_count = active_tokens_count
        if token_balances_count is not None:
            self.token_balances_count = token_balances_count
        if token_transfers_count is not None:
            self.token_transfers_count = token_transfers_count
        if num_activations is not None:
            self.num_activations = num_activations
        if num_delegations is not None:
            self.num_delegations = num_delegations
        if num_originations is not None:
            self.num_originations = num_originations
        if num_transactions is not None:
            self.num_transactions = num_transactions
        if num_reveals is not None:
            self.num_reveals = num_reveals
        if num_register_constants is not None:
            self.num_register_constants = num_register_constants
        if num_set_deposits_limits is not None:
            self.num_set_deposits_limits = num_set_deposits_limits
        if num_migrations is not None:
            self.num_migrations = num_migrations
        if first_activity is not None:
            self.first_activity = first_activity
        if first_activity_time is not None:
            self.first_activity_time = first_activity_time
        if last_activity is not None:
            self.last_activity = last_activity
        if last_activity_time is not None:
            self.last_activity_time = last_activity_time
        if metadata is not None:
            self.metadata = metadata
        Account.__init__(self, *args, **kwargs)

    @property
    def type(self):
        """Gets the type of this User.  # noqa: E501


        :return: The type of this User.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this User.


        :param type: The type of this User.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def address(self):
        """Gets the address of this User.  # noqa: E501

        Public key hash of the account  # noqa: E501

        :return: The address of this User.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this User.

        Public key hash of the account  # noqa: E501

        :param address: The address of this User.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def alias(self):
        """Gets the alias of this User.  # noqa: E501

        Name of the project behind the account or account description  # noqa: E501

        :return: The alias of this User.  # noqa: E501
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this User.

        Name of the project behind the account or account description  # noqa: E501

        :param alias: The alias of this User.  # noqa: E501
        :type: str
        """

        self._alias = alias

    @property
    def public_key(self):
        """Gets the public_key of this User.  # noqa: E501

        Base58 representation of account's public key, revealed by the account  # noqa: E501

        :return: The public_key of this User.  # noqa: E501
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this User.

        Base58 representation of account's public key, revealed by the account  # noqa: E501

        :param public_key: The public_key of this User.  # noqa: E501
        :type: str
        """

        self._public_key = public_key

    @property
    def revealed(self):
        """Gets the revealed of this User.  # noqa: E501

        Public key revelation status. Unrevealed account can't send manager operation (transaction, origination etc.)  # noqa: E501

        :return: The revealed of this User.  # noqa: E501
        :rtype: bool
        """
        return self._revealed

    @revealed.setter
    def revealed(self, revealed):
        """Sets the revealed of this User.

        Public key revelation status. Unrevealed account can't send manager operation (transaction, origination etc.)  # noqa: E501

        :param revealed: The revealed of this User.  # noqa: E501
        :type: bool
        """

        self._revealed = revealed

    @property
    def balance(self):
        """Gets the balance of this User.  # noqa: E501

        Account balance  # noqa: E501

        :return: The balance of this User.  # noqa: E501
        :rtype: int
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this User.

        Account balance  # noqa: E501

        :param balance: The balance of this User.  # noqa: E501
        :type: int
        """

        self._balance = balance

    @property
    def counter(self):
        """Gets the counter of this User.  # noqa: E501

        An account nonce which is used to prevent operation replay  # noqa: E501

        :return: The counter of this User.  # noqa: E501
        :rtype: int
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this User.

        An account nonce which is used to prevent operation replay  # noqa: E501

        :param counter: The counter of this User.  # noqa: E501
        :type: int
        """

        self._counter = counter

    @property
    def delegate(self):
        """Gets the delegate of this User.  # noqa: E501

        Information about the current delegate of the account. `null` if it's not delegated  # noqa: E501

        :return: The delegate of this User.  # noqa: E501
        :rtype: object
        """
        return self._delegate

    @delegate.setter
    def delegate(self, delegate):
        """Sets the delegate of this User.

        Information about the current delegate of the account. `null` if it's not delegated  # noqa: E501

        :param delegate: The delegate of this User.  # noqa: E501
        :type: object
        """

        self._delegate = delegate

    @property
    def delegation_level(self):
        """Gets the delegation_level of this User.  # noqa: E501

        Block height of latest delegation. `null` if it's not delegated  # noqa: E501

        :return: The delegation_level of this User.  # noqa: E501
        :rtype: int
        """
        return self._delegation_level

    @delegation_level.setter
    def delegation_level(self, delegation_level):
        """Sets the delegation_level of this User.

        Block height of latest delegation. `null` if it's not delegated  # noqa: E501

        :param delegation_level: The delegation_level of this User.  # noqa: E501
        :type: int
        """

        self._delegation_level = delegation_level

    @property
    def delegation_time(self):
        """Gets the delegation_time of this User.  # noqa: E501

        Block datetime of latest delegation (ISO 8601, e.g. `2020-02-20T02:40:57Z`). `null` if it's not delegated  # noqa: E501

        :return: The delegation_time of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._delegation_time

    @delegation_time.setter
    def delegation_time(self, delegation_time):
        """Sets the delegation_time of this User.

        Block datetime of latest delegation (ISO 8601, e.g. `2020-02-20T02:40:57Z`). `null` if it's not delegated  # noqa: E501

        :param delegation_time: The delegation_time of this User.  # noqa: E501
        :type: datetime
        """

        self._delegation_time = delegation_time

    @property
    def num_contracts(self):
        """Gets the num_contracts of this User.  # noqa: E501

        Number of contracts, created (originated) and/or managed by the contract  # noqa: E501

        :return: The num_contracts of this User.  # noqa: E501
        :rtype: int
        """
        return self._num_contracts

    @num_contracts.setter
    def num_contracts(self, num_contracts):
        """Sets the num_contracts of this User.

        Number of contracts, created (originated) and/or managed by the contract  # noqa: E501

        :param num_contracts: The num_contracts of this User.  # noqa: E501
        :type: int
        """

        self._num_contracts = num_contracts

    @property
    def active_tokens_count(self):
        """Gets the active_tokens_count of this User.  # noqa: E501

        Number of account tokens with non-zero balances  # noqa: E501

        :return: The active_tokens_count of this User.  # noqa: E501
        :rtype: int
        """
        return self._active_tokens_count

    @active_tokens_count.setter
    def active_tokens_count(self, active_tokens_count):
        """Sets the active_tokens_count of this User.

        Number of account tokens with non-zero balances  # noqa: E501

        :param active_tokens_count: The active_tokens_count of this User.  # noqa: E501
        :type: int
        """

        self._active_tokens_count = active_tokens_count

    @property
    def token_balances_count(self):
        """Gets the token_balances_count of this User.  # noqa: E501

        Number of tokens the account ever had  # noqa: E501

        :return: The token_balances_count of this User.  # noqa: E501
        :rtype: int
        """
        return self._token_balances_count

    @token_balances_count.setter
    def token_balances_count(self, token_balances_count):
        """Sets the token_balances_count of this User.

        Number of tokens the account ever had  # noqa: E501

        :param token_balances_count: The token_balances_count of this User.  # noqa: E501
        :type: int
        """

        self._token_balances_count = token_balances_count

    @property
    def token_transfers_count(self):
        """Gets the token_transfers_count of this User.  # noqa: E501

        Number of token transfers from/to the account  # noqa: E501

        :return: The token_transfers_count of this User.  # noqa: E501
        :rtype: int
        """
        return self._token_transfers_count

    @token_transfers_count.setter
    def token_transfers_count(self, token_transfers_count):
        """Sets the token_transfers_count of this User.

        Number of token transfers from/to the account  # noqa: E501

        :param token_transfers_count: The token_transfers_count of this User.  # noqa: E501
        :type: int
        """

        self._token_transfers_count = token_transfers_count

    @property
    def num_activations(self):
        """Gets the num_activations of this User.  # noqa: E501

        Number of account activation operations. Are used to activate accounts that were recommended allocations of tezos tokens for donations to the Tezos Foundation’s fundraiser  # noqa: E501

        :return: The num_activations of this User.  # noqa: E501
        :rtype: int
        """
        return self._num_activations

    @num_activations.setter
    def num_activations(self, num_activations):
        """Sets the num_activations of this User.

        Number of account activation operations. Are used to activate accounts that were recommended allocations of tezos tokens for donations to the Tezos Foundation’s fundraiser  # noqa: E501

        :param num_activations: The num_activations of this User.  # noqa: E501
        :type: int
        """

        self._num_activations = num_activations

    @property
    def num_delegations(self):
        """Gets the num_delegations of this User.  # noqa: E501

        Number of delegation operations, related to the account  # noqa: E501

        :return: The num_delegations of this User.  # noqa: E501
        :rtype: int
        """
        return self._num_delegations

    @num_delegations.setter
    def num_delegations(self, num_delegations):
        """Sets the num_delegations of this User.

        Number of delegation operations, related to the account  # noqa: E501

        :param num_delegations: The num_delegations of this User.  # noqa: E501
        :type: int
        """

        self._num_delegations = num_delegations

    @property
    def num_originations(self):
        """Gets the num_originations of this User.  # noqa: E501

        Number of all origination (deployment / contract creation) operations, related to the account  # noqa: E501

        :return: The num_originations of this User.  # noqa: E501
        :rtype: int
        """
        return self._num_originations

    @num_originations.setter
    def num_originations(self, num_originations):
        """Sets the num_originations of this User.

        Number of all origination (deployment / contract creation) operations, related to the account  # noqa: E501

        :param num_originations: The num_originations of this User.  # noqa: E501
        :type: int
        """

        self._num_originations = num_originations

    @property
    def num_transactions(self):
        """Gets the num_transactions of this User.  # noqa: E501

        Number of all transaction (tez transfer) operations, related to the account  # noqa: E501

        :return: The num_transactions of this User.  # noqa: E501
        :rtype: int
        """
        return self._num_transactions

    @num_transactions.setter
    def num_transactions(self, num_transactions):
        """Sets the num_transactions of this User.

        Number of all transaction (tez transfer) operations, related to the account  # noqa: E501

        :param num_transactions: The num_transactions of this User.  # noqa: E501
        :type: int
        """

        self._num_transactions = num_transactions

    @property
    def num_reveals(self):
        """Gets the num_reveals of this User.  # noqa: E501

        Number of reveal (is used to reveal the public key associated with an account) operations of the contract  # noqa: E501

        :return: The num_reveals of this User.  # noqa: E501
        :rtype: int
        """
        return self._num_reveals

    @num_reveals.setter
    def num_reveals(self, num_reveals):
        """Sets the num_reveals of this User.

        Number of reveal (is used to reveal the public key associated with an account) operations of the contract  # noqa: E501

        :param num_reveals: The num_reveals of this User.  # noqa: E501
        :type: int
        """

        self._num_reveals = num_reveals

    @property
    def num_register_constants(self):
        """Gets the num_register_constants of this User.  # noqa: E501

        Number of register global constant operations sent by the account  # noqa: E501

        :return: The num_register_constants of this User.  # noqa: E501
        :rtype: int
        """
        return self._num_register_constants

    @num_register_constants.setter
    def num_register_constants(self, num_register_constants):
        """Sets the num_register_constants of this User.

        Number of register global constant operations sent by the account  # noqa: E501

        :param num_register_constants: The num_register_constants of this User.  # noqa: E501
        :type: int
        """

        self._num_register_constants = num_register_constants

    @property
    def num_set_deposits_limits(self):
        """Gets the num_set_deposits_limits of this User.  # noqa: E501

        Number of set deposits limit operations sent by the account  # noqa: E501

        :return: The num_set_deposits_limits of this User.  # noqa: E501
        :rtype: int
        """
        return self._num_set_deposits_limits

    @num_set_deposits_limits.setter
    def num_set_deposits_limits(self, num_set_deposits_limits):
        """Sets the num_set_deposits_limits of this User.

        Number of set deposits limit operations sent by the account  # noqa: E501

        :param num_set_deposits_limits: The num_set_deposits_limits of this User.  # noqa: E501
        :type: int
        """

        self._num_set_deposits_limits = num_set_deposits_limits

    @property
    def num_migrations(self):
        """Gets the num_migrations of this User.  # noqa: E501

        Number of migration (result of the context (database) migration during a protocol update) operations, related to the account (synthetic type)   # noqa: E501

        :return: The num_migrations of this User.  # noqa: E501
        :rtype: int
        """
        return self._num_migrations

    @num_migrations.setter
    def num_migrations(self, num_migrations):
        """Sets the num_migrations of this User.

        Number of migration (result of the context (database) migration during a protocol update) operations, related to the account (synthetic type)   # noqa: E501

        :param num_migrations: The num_migrations of this User.  # noqa: E501
        :type: int
        """

        self._num_migrations = num_migrations

    @property
    def first_activity(self):
        """Gets the first_activity of this User.  # noqa: E501

        Block height of the first operation, related to the account  # noqa: E501

        :return: The first_activity of this User.  # noqa: E501
        :rtype: int
        """
        return self._first_activity

    @first_activity.setter
    def first_activity(self, first_activity):
        """Sets the first_activity of this User.

        Block height of the first operation, related to the account  # noqa: E501

        :param first_activity: The first_activity of this User.  # noqa: E501
        :type: int
        """

        self._first_activity = first_activity

    @property
    def first_activity_time(self):
        """Gets the first_activity_time of this User.  # noqa: E501

        Block datetime of the first operation, related to the account (ISO 8601, e.g. `2020-02-20T02:40:57Z`)  # noqa: E501

        :return: The first_activity_time of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._first_activity_time

    @first_activity_time.setter
    def first_activity_time(self, first_activity_time):
        """Sets the first_activity_time of this User.

        Block datetime of the first operation, related to the account (ISO 8601, e.g. `2020-02-20T02:40:57Z`)  # noqa: E501

        :param first_activity_time: The first_activity_time of this User.  # noqa: E501
        :type: datetime
        """

        self._first_activity_time = first_activity_time

    @property
    def last_activity(self):
        """Gets the last_activity of this User.  # noqa: E501

        Height of the block in which the account state was changed last time  # noqa: E501

        :return: The last_activity of this User.  # noqa: E501
        :rtype: int
        """
        return self._last_activity

    @last_activity.setter
    def last_activity(self, last_activity):
        """Sets the last_activity of this User.

        Height of the block in which the account state was changed last time  # noqa: E501

        :param last_activity: The last_activity of this User.  # noqa: E501
        :type: int
        """

        self._last_activity = last_activity

    @property
    def last_activity_time(self):
        """Gets the last_activity_time of this User.  # noqa: E501

        Datetime of the block in which the account state was changed last time (ISO 8601, e.g. `2020-02-20T02:40:57Z`)  # noqa: E501

        :return: The last_activity_time of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._last_activity_time

    @last_activity_time.setter
    def last_activity_time(self, last_activity_time):
        """Sets the last_activity_time of this User.

        Datetime of the block in which the account state was changed last time (ISO 8601, e.g. `2020-02-20T02:40:57Z`)  # noqa: E501

        :param last_activity_time: The last_activity_time of this User.  # noqa: E501
        :type: datetime
        """

        self._last_activity_time = last_activity_time

    @property
    def metadata(self):
        """Gets the metadata of this User.  # noqa: E501

        Metadata of the account (alias, logo, website, contacts, etc)  # noqa: E501

        :return: The metadata of this User.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this User.

        Metadata of the account (alias, logo, website, contacts, etc)  # noqa: E501

        :param metadata: The metadata of this User.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(User, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
