# coding: utf-8

"""
    TzKT API

    # Introduction  TzKT Explorer provides free REST API and WebSocket API for accessing detailed Tezos blockchain data and helps developers build more services and applications on top of Tezos. TzKT is an open-source project, so you can easily clone and build it and use it as a self-hosted service to avoid any risks of depending on third-party services.  TzKT API is available for the following Tezos networks with the following base URLs:  - Mainnet: `https://api.tzkt.io/` or `https://api.mainnet.tzkt.io/` ([view docs](https://api.tzkt.io))  - Hangzhounet: `https://api.hangzhounet.tzkt.io/` ([view docs](https://api.hangzhounet.tzkt.io)) - Ithacanet: `https://api.ithacanet.tzkt.io/` ([view docs](https://api.ithacanet.tzkt.io))  We also provide a staging environment for testing newest features and pre-updating client applications before deploying to production:  - Mainnet staging: `https://staging.api.tzkt.io/` or `https://staging.api.mainnet.tzkt.io/` ([view docs](https://staging.api.tzkt.io))  Feel free to contact us if you have any questions or feature requests. Your feedback really helps us make TzKT better!  - Discord: https://discord.gg/aG8XKuwsQd - Telegram: https://t.me/baking_bad_chat - Slack: https://tezos-dev.slack.com/archives/CV5NX7F2L - Twitter: https://twitter.com/TezosBakingBad - Email: hello@baking-bad.org  And don't forget to star TzKT project [on GitHub](https://github.com/baking-bad/tzkt) ;)  # Terms of Use  TzKT API is free for everyone and for both commercial and non-commercial usage.  If your application or service uses the TzKT API in any forms: directly on frontend or indirectly on backend, you must mention that fact on your website or application by placing the label **\"Powered by TzKT API\"** or **\"Built with TzKT API\"** with a direct link to [tzkt.io](https://tzkt.io).   # Rate Limits  There will be no rate limits as long as our servers can handle the load without additional infrastructure costs. However, any apparent abuse will be prevented by setting targeted rate limits.  Check out [Tezos Explorer API Best Practices](https://baking-bad.org/blog/tag/TzKT/) and in particular [how to optimize requests count](https://baking-bad.org/blog/2020/07/29/tezos-explorer-api-tzkt-how-often-to-make-requests/).  ---   # noqa: E501

    OpenAPI spec version: v1.8.3
    Contact: hello@baking-bad.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RewardSplit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cycle': 'int',
        'staking_balance': 'int',
        'active_stake': 'int',
        'selected_stake': 'int',
        'delegated_balance': 'int',
        'num_delegators': 'int',
        'expected_blocks': 'float',
        'expected_endorsements': 'float',
        'future_blocks': 'int',
        'future_block_rewards': 'int',
        'blocks': 'int',
        'block_rewards': 'int',
        'missed_blocks': 'int',
        'missed_block_rewards': 'int',
        'future_endorsements': 'int',
        'future_endorsement_rewards': 'int',
        'endorsements': 'int',
        'endorsement_rewards': 'int',
        'missed_endorsements': 'int',
        'missed_endorsement_rewards': 'int',
        'block_fees': 'int',
        'missed_block_fees': 'int',
        'double_baking_rewards': 'int',
        'double_baking_losses': 'int',
        'double_endorsing_rewards': 'int',
        'double_endorsing_losses': 'int',
        'double_preendorsing_rewards': 'int',
        'double_preendorsing_losses': 'int',
        'revelation_rewards': 'int',
        'revelation_losses': 'int',
        'delegators': 'list[SplitDelegator]',
        'own_blocks': 'int',
        'extra_blocks': 'int',
        'missed_own_blocks': 'int',
        'missed_extra_blocks': 'int',
        'uncovered_own_blocks': 'int',
        'uncovered_extra_blocks': 'int',
        'uncovered_endorsements': 'int',
        'own_block_rewards': 'int',
        'extra_block_rewards': 'int',
        'missed_own_block_rewards': 'int',
        'missed_extra_block_rewards': 'int',
        'uncovered_own_block_rewards': 'int',
        'uncovered_extra_block_rewards': 'int',
        'uncovered_endorsement_rewards': 'int',
        'own_block_fees': 'int',
        'extra_block_fees': 'int',
        'missed_own_block_fees': 'int',
        'missed_extra_block_fees': 'int',
        'uncovered_own_block_fees': 'int',
        'uncovered_extra_block_fees': 'int',
        'double_baking_lost_deposits': 'int',
        'double_baking_lost_rewards': 'int',
        'double_baking_lost_fees': 'int',
        'double_endorsing_lost_deposits': 'int',
        'double_endorsing_lost_rewards': 'int',
        'double_endorsing_lost_fees': 'int',
        'revelation_lost_rewards': 'int',
        'revelation_lost_fees': 'int',
        'future_block_deposits': 'int',
        'block_deposits': 'int',
        'future_endorsement_deposits': 'int',
        'endorsement_deposits': 'int'
    }

    attribute_map = {
        'cycle': 'cycle',
        'staking_balance': 'stakingBalance',
        'active_stake': 'activeStake',
        'selected_stake': 'selectedStake',
        'delegated_balance': 'delegatedBalance',
        'num_delegators': 'numDelegators',
        'expected_blocks': 'expectedBlocks',
        'expected_endorsements': 'expectedEndorsements',
        'future_blocks': 'futureBlocks',
        'future_block_rewards': 'futureBlockRewards',
        'blocks': 'blocks',
        'block_rewards': 'blockRewards',
        'missed_blocks': 'missedBlocks',
        'missed_block_rewards': 'missedBlockRewards',
        'future_endorsements': 'futureEndorsements',
        'future_endorsement_rewards': 'futureEndorsementRewards',
        'endorsements': 'endorsements',
        'endorsement_rewards': 'endorsementRewards',
        'missed_endorsements': 'missedEndorsements',
        'missed_endorsement_rewards': 'missedEndorsementRewards',
        'block_fees': 'blockFees',
        'missed_block_fees': 'missedBlockFees',
        'double_baking_rewards': 'doubleBakingRewards',
        'double_baking_losses': 'doubleBakingLosses',
        'double_endorsing_rewards': 'doubleEndorsingRewards',
        'double_endorsing_losses': 'doubleEndorsingLosses',
        'double_preendorsing_rewards': 'doublePreendorsingRewards',
        'double_preendorsing_losses': 'doublePreendorsingLosses',
        'revelation_rewards': 'revelationRewards',
        'revelation_losses': 'revelationLosses',
        'delegators': 'delegators',
        'own_blocks': 'ownBlocks',
        'extra_blocks': 'extraBlocks',
        'missed_own_blocks': 'missedOwnBlocks',
        'missed_extra_blocks': 'missedExtraBlocks',
        'uncovered_own_blocks': 'uncoveredOwnBlocks',
        'uncovered_extra_blocks': 'uncoveredExtraBlocks',
        'uncovered_endorsements': 'uncoveredEndorsements',
        'own_block_rewards': 'ownBlockRewards',
        'extra_block_rewards': 'extraBlockRewards',
        'missed_own_block_rewards': 'missedOwnBlockRewards',
        'missed_extra_block_rewards': 'missedExtraBlockRewards',
        'uncovered_own_block_rewards': 'uncoveredOwnBlockRewards',
        'uncovered_extra_block_rewards': 'uncoveredExtraBlockRewards',
        'uncovered_endorsement_rewards': 'uncoveredEndorsementRewards',
        'own_block_fees': 'ownBlockFees',
        'extra_block_fees': 'extraBlockFees',
        'missed_own_block_fees': 'missedOwnBlockFees',
        'missed_extra_block_fees': 'missedExtraBlockFees',
        'uncovered_own_block_fees': 'uncoveredOwnBlockFees',
        'uncovered_extra_block_fees': 'uncoveredExtraBlockFees',
        'double_baking_lost_deposits': 'doubleBakingLostDeposits',
        'double_baking_lost_rewards': 'doubleBakingLostRewards',
        'double_baking_lost_fees': 'doubleBakingLostFees',
        'double_endorsing_lost_deposits': 'doubleEndorsingLostDeposits',
        'double_endorsing_lost_rewards': 'doubleEndorsingLostRewards',
        'double_endorsing_lost_fees': 'doubleEndorsingLostFees',
        'revelation_lost_rewards': 'revelationLostRewards',
        'revelation_lost_fees': 'revelationLostFees',
        'future_block_deposits': 'futureBlockDeposits',
        'block_deposits': 'blockDeposits',
        'future_endorsement_deposits': 'futureEndorsementDeposits',
        'endorsement_deposits': 'endorsementDeposits'
    }

    def __init__(self, cycle=None, staking_balance=None, active_stake=None, selected_stake=None, delegated_balance=None, num_delegators=None, expected_blocks=None, expected_endorsements=None, future_blocks=None, future_block_rewards=None, blocks=None, block_rewards=None, missed_blocks=None, missed_block_rewards=None, future_endorsements=None, future_endorsement_rewards=None, endorsements=None, endorsement_rewards=None, missed_endorsements=None, missed_endorsement_rewards=None, block_fees=None, missed_block_fees=None, double_baking_rewards=None, double_baking_losses=None, double_endorsing_rewards=None, double_endorsing_losses=None, double_preendorsing_rewards=None, double_preendorsing_losses=None, revelation_rewards=None, revelation_losses=None, delegators=None, own_blocks=None, extra_blocks=None, missed_own_blocks=None, missed_extra_blocks=None, uncovered_own_blocks=None, uncovered_extra_blocks=None, uncovered_endorsements=None, own_block_rewards=None, extra_block_rewards=None, missed_own_block_rewards=None, missed_extra_block_rewards=None, uncovered_own_block_rewards=None, uncovered_extra_block_rewards=None, uncovered_endorsement_rewards=None, own_block_fees=None, extra_block_fees=None, missed_own_block_fees=None, missed_extra_block_fees=None, uncovered_own_block_fees=None, uncovered_extra_block_fees=None, double_baking_lost_deposits=None, double_baking_lost_rewards=None, double_baking_lost_fees=None, double_endorsing_lost_deposits=None, double_endorsing_lost_rewards=None, double_endorsing_lost_fees=None, revelation_lost_rewards=None, revelation_lost_fees=None, future_block_deposits=None, block_deposits=None, future_endorsement_deposits=None, endorsement_deposits=None):  # noqa: E501
        """RewardSplit - a model defined in Swagger"""  # noqa: E501
        self._cycle = None
        self._staking_balance = None
        self._active_stake = None
        self._selected_stake = None
        self._delegated_balance = None
        self._num_delegators = None
        self._expected_blocks = None
        self._expected_endorsements = None
        self._future_blocks = None
        self._future_block_rewards = None
        self._blocks = None
        self._block_rewards = None
        self._missed_blocks = None
        self._missed_block_rewards = None
        self._future_endorsements = None
        self._future_endorsement_rewards = None
        self._endorsements = None
        self._endorsement_rewards = None
        self._missed_endorsements = None
        self._missed_endorsement_rewards = None
        self._block_fees = None
        self._missed_block_fees = None
        self._double_baking_rewards = None
        self._double_baking_losses = None
        self._double_endorsing_rewards = None
        self._double_endorsing_losses = None
        self._double_preendorsing_rewards = None
        self._double_preendorsing_losses = None
        self._revelation_rewards = None
        self._revelation_losses = None
        self._delegators = None
        self._own_blocks = None
        self._extra_blocks = None
        self._missed_own_blocks = None
        self._missed_extra_blocks = None
        self._uncovered_own_blocks = None
        self._uncovered_extra_blocks = None
        self._uncovered_endorsements = None
        self._own_block_rewards = None
        self._extra_block_rewards = None
        self._missed_own_block_rewards = None
        self._missed_extra_block_rewards = None
        self._uncovered_own_block_rewards = None
        self._uncovered_extra_block_rewards = None
        self._uncovered_endorsement_rewards = None
        self._own_block_fees = None
        self._extra_block_fees = None
        self._missed_own_block_fees = None
        self._missed_extra_block_fees = None
        self._uncovered_own_block_fees = None
        self._uncovered_extra_block_fees = None
        self._double_baking_lost_deposits = None
        self._double_baking_lost_rewards = None
        self._double_baking_lost_fees = None
        self._double_endorsing_lost_deposits = None
        self._double_endorsing_lost_rewards = None
        self._double_endorsing_lost_fees = None
        self._revelation_lost_rewards = None
        self._revelation_lost_fees = None
        self._future_block_deposits = None
        self._block_deposits = None
        self._future_endorsement_deposits = None
        self._endorsement_deposits = None
        self.discriminator = None
        if cycle is not None:
            self.cycle = cycle
        if staking_balance is not None:
            self.staking_balance = staking_balance
        if active_stake is not None:
            self.active_stake = active_stake
        if selected_stake is not None:
            self.selected_stake = selected_stake
        if delegated_balance is not None:
            self.delegated_balance = delegated_balance
        if num_delegators is not None:
            self.num_delegators = num_delegators
        if expected_blocks is not None:
            self.expected_blocks = expected_blocks
        if expected_endorsements is not None:
            self.expected_endorsements = expected_endorsements
        if future_blocks is not None:
            self.future_blocks = future_blocks
        if future_block_rewards is not None:
            self.future_block_rewards = future_block_rewards
        if blocks is not None:
            self.blocks = blocks
        if block_rewards is not None:
            self.block_rewards = block_rewards
        if missed_blocks is not None:
            self.missed_blocks = missed_blocks
        if missed_block_rewards is not None:
            self.missed_block_rewards = missed_block_rewards
        if future_endorsements is not None:
            self.future_endorsements = future_endorsements
        if future_endorsement_rewards is not None:
            self.future_endorsement_rewards = future_endorsement_rewards
        if endorsements is not None:
            self.endorsements = endorsements
        if endorsement_rewards is not None:
            self.endorsement_rewards = endorsement_rewards
        if missed_endorsements is not None:
            self.missed_endorsements = missed_endorsements
        if missed_endorsement_rewards is not None:
            self.missed_endorsement_rewards = missed_endorsement_rewards
        if block_fees is not None:
            self.block_fees = block_fees
        if missed_block_fees is not None:
            self.missed_block_fees = missed_block_fees
        if double_baking_rewards is not None:
            self.double_baking_rewards = double_baking_rewards
        if double_baking_losses is not None:
            self.double_baking_losses = double_baking_losses
        if double_endorsing_rewards is not None:
            self.double_endorsing_rewards = double_endorsing_rewards
        if double_endorsing_losses is not None:
            self.double_endorsing_losses = double_endorsing_losses
        if double_preendorsing_rewards is not None:
            self.double_preendorsing_rewards = double_preendorsing_rewards
        if double_preendorsing_losses is not None:
            self.double_preendorsing_losses = double_preendorsing_losses
        if revelation_rewards is not None:
            self.revelation_rewards = revelation_rewards
        if revelation_losses is not None:
            self.revelation_losses = revelation_losses
        if delegators is not None:
            self.delegators = delegators
        if own_blocks is not None:
            self.own_blocks = own_blocks
        if extra_blocks is not None:
            self.extra_blocks = extra_blocks
        if missed_own_blocks is not None:
            self.missed_own_blocks = missed_own_blocks
        if missed_extra_blocks is not None:
            self.missed_extra_blocks = missed_extra_blocks
        if uncovered_own_blocks is not None:
            self.uncovered_own_blocks = uncovered_own_blocks
        if uncovered_extra_blocks is not None:
            self.uncovered_extra_blocks = uncovered_extra_blocks
        if uncovered_endorsements is not None:
            self.uncovered_endorsements = uncovered_endorsements
        if own_block_rewards is not None:
            self.own_block_rewards = own_block_rewards
        if extra_block_rewards is not None:
            self.extra_block_rewards = extra_block_rewards
        if missed_own_block_rewards is not None:
            self.missed_own_block_rewards = missed_own_block_rewards
        if missed_extra_block_rewards is not None:
            self.missed_extra_block_rewards = missed_extra_block_rewards
        if uncovered_own_block_rewards is not None:
            self.uncovered_own_block_rewards = uncovered_own_block_rewards
        if uncovered_extra_block_rewards is not None:
            self.uncovered_extra_block_rewards = uncovered_extra_block_rewards
        if uncovered_endorsement_rewards is not None:
            self.uncovered_endorsement_rewards = uncovered_endorsement_rewards
        if own_block_fees is not None:
            self.own_block_fees = own_block_fees
        if extra_block_fees is not None:
            self.extra_block_fees = extra_block_fees
        if missed_own_block_fees is not None:
            self.missed_own_block_fees = missed_own_block_fees
        if missed_extra_block_fees is not None:
            self.missed_extra_block_fees = missed_extra_block_fees
        if uncovered_own_block_fees is not None:
            self.uncovered_own_block_fees = uncovered_own_block_fees
        if uncovered_extra_block_fees is not None:
            self.uncovered_extra_block_fees = uncovered_extra_block_fees
        if double_baking_lost_deposits is not None:
            self.double_baking_lost_deposits = double_baking_lost_deposits
        if double_baking_lost_rewards is not None:
            self.double_baking_lost_rewards = double_baking_lost_rewards
        if double_baking_lost_fees is not None:
            self.double_baking_lost_fees = double_baking_lost_fees
        if double_endorsing_lost_deposits is not None:
            self.double_endorsing_lost_deposits = double_endorsing_lost_deposits
        if double_endorsing_lost_rewards is not None:
            self.double_endorsing_lost_rewards = double_endorsing_lost_rewards
        if double_endorsing_lost_fees is not None:
            self.double_endorsing_lost_fees = double_endorsing_lost_fees
        if revelation_lost_rewards is not None:
            self.revelation_lost_rewards = revelation_lost_rewards
        if revelation_lost_fees is not None:
            self.revelation_lost_fees = revelation_lost_fees
        if future_block_deposits is not None:
            self.future_block_deposits = future_block_deposits
        if block_deposits is not None:
            self.block_deposits = block_deposits
        if future_endorsement_deposits is not None:
            self.future_endorsement_deposits = future_endorsement_deposits
        if endorsement_deposits is not None:
            self.endorsement_deposits = endorsement_deposits

    @property
    def cycle(self):
        """Gets the cycle of this RewardSplit.  # noqa: E501

        Cycle in which rewards were or will be earned.  # noqa: E501

        :return: The cycle of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._cycle

    @cycle.setter
    def cycle(self, cycle):
        """Sets the cycle of this RewardSplit.

        Cycle in which rewards were or will be earned.  # noqa: E501

        :param cycle: The cycle of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._cycle = cycle

    @property
    def staking_balance(self):
        """Gets the staking_balance of this RewardSplit.  # noqa: E501

        Staking balance at the snapshot time.  # noqa: E501

        :return: The staking_balance of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._staking_balance

    @staking_balance.setter
    def staking_balance(self, staking_balance):
        """Sets the staking_balance of this RewardSplit.

        Staking balance at the snapshot time.  # noqa: E501

        :param staking_balance: The staking_balance of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._staking_balance = staking_balance

    @property
    def active_stake(self):
        """Gets the active_stake of this RewardSplit.  # noqa: E501

        Active stake participating in rights distribution.  # noqa: E501

        :return: The active_stake of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._active_stake

    @active_stake.setter
    def active_stake(self, active_stake):
        """Sets the active_stake of this RewardSplit.

        Active stake participating in rights distribution.  # noqa: E501

        :param active_stake: The active_stake of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._active_stake = active_stake

    @property
    def selected_stake(self):
        """Gets the selected_stake of this RewardSplit.  # noqa: E501

        Total active stake among all selected bakers.  # noqa: E501

        :return: The selected_stake of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._selected_stake

    @selected_stake.setter
    def selected_stake(self, selected_stake):
        """Sets the selected_stake of this RewardSplit.

        Total active stake among all selected bakers.  # noqa: E501

        :param selected_stake: The selected_stake of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._selected_stake = selected_stake

    @property
    def delegated_balance(self):
        """Gets the delegated_balance of this RewardSplit.  # noqa: E501

        Balance delegated to the baker at the snapshot time (sum of delegators' balances).  # noqa: E501

        :return: The delegated_balance of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._delegated_balance

    @delegated_balance.setter
    def delegated_balance(self, delegated_balance):
        """Sets the delegated_balance of this RewardSplit.

        Balance delegated to the baker at the snapshot time (sum of delegators' balances).  # noqa: E501

        :param delegated_balance: The delegated_balance of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._delegated_balance = delegated_balance

    @property
    def num_delegators(self):
        """Gets the num_delegators of this RewardSplit.  # noqa: E501

        Number of delegators at the snapshot time.  # noqa: E501

        :return: The num_delegators of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._num_delegators

    @num_delegators.setter
    def num_delegators(self, num_delegators):
        """Sets the num_delegators of this RewardSplit.

        Number of delegators at the snapshot time.  # noqa: E501

        :param num_delegators: The num_delegators of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._num_delegators = num_delegators

    @property
    def expected_blocks(self):
        """Gets the expected_blocks of this RewardSplit.  # noqa: E501

        Expected value of how many blocks baker should produce based on baker's active stake, selected stake and blocks per cycle.  # noqa: E501

        :return: The expected_blocks of this RewardSplit.  # noqa: E501
        :rtype: float
        """
        return self._expected_blocks

    @expected_blocks.setter
    def expected_blocks(self, expected_blocks):
        """Sets the expected_blocks of this RewardSplit.

        Expected value of how many blocks baker should produce based on baker's active stake, selected stake and blocks per cycle.  # noqa: E501

        :param expected_blocks: The expected_blocks of this RewardSplit.  # noqa: E501
        :type: float
        """

        self._expected_blocks = expected_blocks

    @property
    def expected_endorsements(self):
        """Gets the expected_endorsements of this RewardSplit.  # noqa: E501

        Expected value of how many slots baker should validate based on baker's active stake, selected stake and endorsing slots per cycle.  # noqa: E501

        :return: The expected_endorsements of this RewardSplit.  # noqa: E501
        :rtype: float
        """
        return self._expected_endorsements

    @expected_endorsements.setter
    def expected_endorsements(self, expected_endorsements):
        """Sets the expected_endorsements of this RewardSplit.

        Expected value of how many slots baker should validate based on baker's active stake, selected stake and endorsing slots per cycle.  # noqa: E501

        :param expected_endorsements: The expected_endorsements of this RewardSplit.  # noqa: E501
        :type: float
        """

        self._expected_endorsements = expected_endorsements

    @property
    def future_blocks(self):
        """Gets the future_blocks of this RewardSplit.  # noqa: E501

        Number of blocks which baker is allowed to produce in this cycle based on future baking rights.  # noqa: E501

        :return: The future_blocks of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._future_blocks

    @future_blocks.setter
    def future_blocks(self, future_blocks):
        """Sets the future_blocks of this RewardSplit.

        Number of blocks which baker is allowed to produce in this cycle based on future baking rights.  # noqa: E501

        :param future_blocks: The future_blocks of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._future_blocks = future_blocks

    @property
    def future_block_rewards(self):
        """Gets the future_block_rewards of this RewardSplit.  # noqa: E501

        Estimated value of future block rewards.  # noqa: E501

        :return: The future_block_rewards of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._future_block_rewards

    @future_block_rewards.setter
    def future_block_rewards(self, future_block_rewards):
        """Sets the future_block_rewards of this RewardSplit.

        Estimated value of future block rewards.  # noqa: E501

        :param future_block_rewards: The future_block_rewards of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._future_block_rewards = future_block_rewards

    @property
    def blocks(self):
        """Gets the blocks of this RewardSplit.  # noqa: E501

        Number of successfully baked blocks (both proposed and re-proposed blocks).  # noqa: E501

        :return: The blocks of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._blocks

    @blocks.setter
    def blocks(self, blocks):
        """Sets the blocks of this RewardSplit.

        Number of successfully baked blocks (both proposed and re-proposed blocks).  # noqa: E501

        :param blocks: The blocks of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._blocks = blocks

    @property
    def block_rewards(self):
        """Gets the block_rewards of this RewardSplit.  # noqa: E501

        Rewards received for baked blocks (both proposed and re-proposed blocks).  # noqa: E501

        :return: The block_rewards of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._block_rewards

    @block_rewards.setter
    def block_rewards(self, block_rewards):
        """Sets the block_rewards of this RewardSplit.

        Rewards received for baked blocks (both proposed and re-proposed blocks).  # noqa: E501

        :param block_rewards: The block_rewards of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._block_rewards = block_rewards

    @property
    def missed_blocks(self):
        """Gets the missed_blocks of this RewardSplit.  # noqa: E501

        Number of missed opportunities to bake block.  # noqa: E501

        :return: The missed_blocks of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._missed_blocks

    @missed_blocks.setter
    def missed_blocks(self, missed_blocks):
        """Sets the missed_blocks of this RewardSplit.

        Number of missed opportunities to bake block.  # noqa: E501

        :param missed_blocks: The missed_blocks of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._missed_blocks = missed_blocks

    @property
    def missed_block_rewards(self):
        """Gets the missed_block_rewards of this RewardSplit.  # noqa: E501

        Rewards which were not received due to missing blocks.  # noqa: E501

        :return: The missed_block_rewards of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._missed_block_rewards

    @missed_block_rewards.setter
    def missed_block_rewards(self, missed_block_rewards):
        """Sets the missed_block_rewards of this RewardSplit.

        Rewards which were not received due to missing blocks.  # noqa: E501

        :param missed_block_rewards: The missed_block_rewards of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._missed_block_rewards = missed_block_rewards

    @property
    def future_endorsements(self):
        """Gets the future_endorsements of this RewardSplit.  # noqa: E501

        Number of slots which baker is allowed to validate in this cycle based on future endorsing rights.  # noqa: E501

        :return: The future_endorsements of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._future_endorsements

    @future_endorsements.setter
    def future_endorsements(self, future_endorsements):
        """Sets the future_endorsements of this RewardSplit.

        Number of slots which baker is allowed to validate in this cycle based on future endorsing rights.  # noqa: E501

        :param future_endorsements: The future_endorsements of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._future_endorsements = future_endorsements

    @property
    def future_endorsement_rewards(self):
        """Gets the future_endorsement_rewards of this RewardSplit.  # noqa: E501

        Estimated value of future endorsing rewards.  # noqa: E501

        :return: The future_endorsement_rewards of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._future_endorsement_rewards

    @future_endorsement_rewards.setter
    def future_endorsement_rewards(self, future_endorsement_rewards):
        """Sets the future_endorsement_rewards of this RewardSplit.

        Estimated value of future endorsing rewards.  # noqa: E501

        :param future_endorsement_rewards: The future_endorsement_rewards of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._future_endorsement_rewards = future_endorsement_rewards

    @property
    def endorsements(self):
        """Gets the endorsements of this RewardSplit.  # noqa: E501

        Number of successfully endorsed slots.  # noqa: E501

        :return: The endorsements of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._endorsements

    @endorsements.setter
    def endorsements(self, endorsements):
        """Sets the endorsements of this RewardSplit.

        Number of successfully endorsed slots.  # noqa: E501

        :param endorsements: The endorsements of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._endorsements = endorsements

    @property
    def endorsement_rewards(self):
        """Gets the endorsement_rewards of this RewardSplit.  # noqa: E501

        Rewards received for endorsed slots.  # noqa: E501

        :return: The endorsement_rewards of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._endorsement_rewards

    @endorsement_rewards.setter
    def endorsement_rewards(self, endorsement_rewards):
        """Sets the endorsement_rewards of this RewardSplit.

        Rewards received for endorsed slots.  # noqa: E501

        :param endorsement_rewards: The endorsement_rewards of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._endorsement_rewards = endorsement_rewards

    @property
    def missed_endorsements(self):
        """Gets the missed_endorsements of this RewardSplit.  # noqa: E501

        Number of not endorsed (missed) slots.  # noqa: E501

        :return: The missed_endorsements of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._missed_endorsements

    @missed_endorsements.setter
    def missed_endorsements(self, missed_endorsements):
        """Sets the missed_endorsements of this RewardSplit.

        Number of not endorsed (missed) slots.  # noqa: E501

        :param missed_endorsements: The missed_endorsements of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._missed_endorsements = missed_endorsements

    @property
    def missed_endorsement_rewards(self):
        """Gets the missed_endorsement_rewards of this RewardSplit.  # noqa: E501

        Rewards which were not received due to missing endorsements.  # noqa: E501

        :return: The missed_endorsement_rewards of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._missed_endorsement_rewards

    @missed_endorsement_rewards.setter
    def missed_endorsement_rewards(self, missed_endorsement_rewards):
        """Sets the missed_endorsement_rewards of this RewardSplit.

        Rewards which were not received due to missing endorsements.  # noqa: E501

        :param missed_endorsement_rewards: The missed_endorsement_rewards of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._missed_endorsement_rewards = missed_endorsement_rewards

    @property
    def block_fees(self):
        """Gets the block_fees of this RewardSplit.  # noqa: E501

        Operation fees which were harvested from successfully baked blocks.  # noqa: E501

        :return: The block_fees of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._block_fees

    @block_fees.setter
    def block_fees(self, block_fees):
        """Sets the block_fees of this RewardSplit.

        Operation fees which were harvested from successfully baked blocks.  # noqa: E501

        :param block_fees: The block_fees of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._block_fees = block_fees

    @property
    def missed_block_fees(self):
        """Gets the missed_block_fees of this RewardSplit.  # noqa: E501

        Operation fees which were not received due to missing blocks.  # noqa: E501

        :return: The missed_block_fees of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._missed_block_fees

    @missed_block_fees.setter
    def missed_block_fees(self, missed_block_fees):
        """Sets the missed_block_fees of this RewardSplit.

        Operation fees which were not received due to missing blocks.  # noqa: E501

        :param missed_block_fees: The missed_block_fees of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._missed_block_fees = missed_block_fees

    @property
    def double_baking_rewards(self):
        """Gets the double_baking_rewards of this RewardSplit.  # noqa: E501

        Rewards for detecting double baking (accusing someone of producing two different blocks at the same level).  # noqa: E501

        :return: The double_baking_rewards of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._double_baking_rewards

    @double_baking_rewards.setter
    def double_baking_rewards(self, double_baking_rewards):
        """Sets the double_baking_rewards of this RewardSplit.

        Rewards for detecting double baking (accusing someone of producing two different blocks at the same level).  # noqa: E501

        :param double_baking_rewards: The double_baking_rewards of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._double_baking_rewards = double_baking_rewards

    @property
    def double_baking_losses(self):
        """Gets the double_baking_losses of this RewardSplit.  # noqa: E501

        Amount of frozen deposits lost due to double baking  # noqa: E501

        :return: The double_baking_losses of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._double_baking_losses

    @double_baking_losses.setter
    def double_baking_losses(self, double_baking_losses):
        """Sets the double_baking_losses of this RewardSplit.

        Amount of frozen deposits lost due to double baking  # noqa: E501

        :param double_baking_losses: The double_baking_losses of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._double_baking_losses = double_baking_losses

    @property
    def double_endorsing_rewards(self):
        """Gets the double_endorsing_rewards of this RewardSplit.  # noqa: E501

        Rewards for detecting double endorsing (accusing someone of validating two different blocks at the same level).  # noqa: E501

        :return: The double_endorsing_rewards of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._double_endorsing_rewards

    @double_endorsing_rewards.setter
    def double_endorsing_rewards(self, double_endorsing_rewards):
        """Sets the double_endorsing_rewards of this RewardSplit.

        Rewards for detecting double endorsing (accusing someone of validating two different blocks at the same level).  # noqa: E501

        :param double_endorsing_rewards: The double_endorsing_rewards of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._double_endorsing_rewards = double_endorsing_rewards

    @property
    def double_endorsing_losses(self):
        """Gets the double_endorsing_losses of this RewardSplit.  # noqa: E501

        Amount of frozen deposits lost due to double endorsing  # noqa: E501

        :return: The double_endorsing_losses of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._double_endorsing_losses

    @double_endorsing_losses.setter
    def double_endorsing_losses(self, double_endorsing_losses):
        """Sets the double_endorsing_losses of this RewardSplit.

        Amount of frozen deposits lost due to double endorsing  # noqa: E501

        :param double_endorsing_losses: The double_endorsing_losses of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._double_endorsing_losses = double_endorsing_losses

    @property
    def double_preendorsing_rewards(self):
        """Gets the double_preendorsing_rewards of this RewardSplit.  # noqa: E501

        Rewards for detecting double preendorsing (accusing someone of prevalidating two different blocks at the same level).  # noqa: E501

        :return: The double_preendorsing_rewards of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._double_preendorsing_rewards

    @double_preendorsing_rewards.setter
    def double_preendorsing_rewards(self, double_preendorsing_rewards):
        """Sets the double_preendorsing_rewards of this RewardSplit.

        Rewards for detecting double preendorsing (accusing someone of prevalidating two different blocks at the same level).  # noqa: E501

        :param double_preendorsing_rewards: The double_preendorsing_rewards of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._double_preendorsing_rewards = double_preendorsing_rewards

    @property
    def double_preendorsing_losses(self):
        """Gets the double_preendorsing_losses of this RewardSplit.  # noqa: E501

        Amount of frozen deposits lost due to double preendorsing  # noqa: E501

        :return: The double_preendorsing_losses of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._double_preendorsing_losses

    @double_preendorsing_losses.setter
    def double_preendorsing_losses(self, double_preendorsing_losses):
        """Sets the double_preendorsing_losses of this RewardSplit.

        Amount of frozen deposits lost due to double preendorsing  # noqa: E501

        :param double_preendorsing_losses: The double_preendorsing_losses of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._double_preendorsing_losses = double_preendorsing_losses

    @property
    def revelation_rewards(self):
        """Gets the revelation_rewards of this RewardSplit.  # noqa: E501

        Rewards for including into a block seed nonce revelation operations.  # noqa: E501

        :return: The revelation_rewards of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._revelation_rewards

    @revelation_rewards.setter
    def revelation_rewards(self, revelation_rewards):
        """Sets the revelation_rewards of this RewardSplit.

        Rewards for including into a block seed nonce revelation operations.  # noqa: E501

        :param revelation_rewards: The revelation_rewards of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._revelation_rewards = revelation_rewards

    @property
    def revelation_losses(self):
        """Gets the revelation_losses of this RewardSplit.  # noqa: E501

        Amount of frozen deposits lost due to missing seed nonce revelation (always zero after Ithaca).  # noqa: E501

        :return: The revelation_losses of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._revelation_losses

    @revelation_losses.setter
    def revelation_losses(self, revelation_losses):
        """Sets the revelation_losses of this RewardSplit.

        Amount of frozen deposits lost due to missing seed nonce revelation (always zero after Ithaca).  # noqa: E501

        :param revelation_losses: The revelation_losses of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._revelation_losses = revelation_losses

    @property
    def delegators(self):
        """Gets the delegators of this RewardSplit.  # noqa: E501

        List of delegators at the snapshot time  # noqa: E501

        :return: The delegators of this RewardSplit.  # noqa: E501
        :rtype: list[SplitDelegator]
        """
        return self._delegators

    @delegators.setter
    def delegators(self, delegators):
        """Sets the delegators of this RewardSplit.

        List of delegators at the snapshot time  # noqa: E501

        :param delegators: The delegators of this RewardSplit.  # noqa: E501
        :type: list[SplitDelegator]
        """

        self._delegators = delegators

    @property
    def own_blocks(self):
        """Gets the own_blocks of this RewardSplit.  # noqa: E501

        [DEPRECATED]  # noqa: E501

        :return: The own_blocks of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._own_blocks

    @own_blocks.setter
    def own_blocks(self, own_blocks):
        """Sets the own_blocks of this RewardSplit.

        [DEPRECATED]  # noqa: E501

        :param own_blocks: The own_blocks of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._own_blocks = own_blocks

    @property
    def extra_blocks(self):
        """Gets the extra_blocks of this RewardSplit.  # noqa: E501

        [DEPRECATED]  # noqa: E501

        :return: The extra_blocks of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._extra_blocks

    @extra_blocks.setter
    def extra_blocks(self, extra_blocks):
        """Sets the extra_blocks of this RewardSplit.

        [DEPRECATED]  # noqa: E501

        :param extra_blocks: The extra_blocks of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._extra_blocks = extra_blocks

    @property
    def missed_own_blocks(self):
        """Gets the missed_own_blocks of this RewardSplit.  # noqa: E501

        [DEPRECATED]  # noqa: E501

        :return: The missed_own_blocks of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._missed_own_blocks

    @missed_own_blocks.setter
    def missed_own_blocks(self, missed_own_blocks):
        """Sets the missed_own_blocks of this RewardSplit.

        [DEPRECATED]  # noqa: E501

        :param missed_own_blocks: The missed_own_blocks of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._missed_own_blocks = missed_own_blocks

    @property
    def missed_extra_blocks(self):
        """Gets the missed_extra_blocks of this RewardSplit.  # noqa: E501

        [DEPRECATED]  # noqa: E501

        :return: The missed_extra_blocks of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._missed_extra_blocks

    @missed_extra_blocks.setter
    def missed_extra_blocks(self, missed_extra_blocks):
        """Sets the missed_extra_blocks of this RewardSplit.

        [DEPRECATED]  # noqa: E501

        :param missed_extra_blocks: The missed_extra_blocks of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._missed_extra_blocks = missed_extra_blocks

    @property
    def uncovered_own_blocks(self):
        """Gets the uncovered_own_blocks of this RewardSplit.  # noqa: E501

        [DEPRECATED]  # noqa: E501

        :return: The uncovered_own_blocks of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._uncovered_own_blocks

    @uncovered_own_blocks.setter
    def uncovered_own_blocks(self, uncovered_own_blocks):
        """Sets the uncovered_own_blocks of this RewardSplit.

        [DEPRECATED]  # noqa: E501

        :param uncovered_own_blocks: The uncovered_own_blocks of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._uncovered_own_blocks = uncovered_own_blocks

    @property
    def uncovered_extra_blocks(self):
        """Gets the uncovered_extra_blocks of this RewardSplit.  # noqa: E501

        [DEPRECATED]  # noqa: E501

        :return: The uncovered_extra_blocks of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._uncovered_extra_blocks

    @uncovered_extra_blocks.setter
    def uncovered_extra_blocks(self, uncovered_extra_blocks):
        """Sets the uncovered_extra_blocks of this RewardSplit.

        [DEPRECATED]  # noqa: E501

        :param uncovered_extra_blocks: The uncovered_extra_blocks of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._uncovered_extra_blocks = uncovered_extra_blocks

    @property
    def uncovered_endorsements(self):
        """Gets the uncovered_endorsements of this RewardSplit.  # noqa: E501

        [DEPRECATED]  # noqa: E501

        :return: The uncovered_endorsements of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._uncovered_endorsements

    @uncovered_endorsements.setter
    def uncovered_endorsements(self, uncovered_endorsements):
        """Sets the uncovered_endorsements of this RewardSplit.

        [DEPRECATED]  # noqa: E501

        :param uncovered_endorsements: The uncovered_endorsements of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._uncovered_endorsements = uncovered_endorsements

    @property
    def own_block_rewards(self):
        """Gets the own_block_rewards of this RewardSplit.  # noqa: E501

        [DEPRECATED]  # noqa: E501

        :return: The own_block_rewards of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._own_block_rewards

    @own_block_rewards.setter
    def own_block_rewards(self, own_block_rewards):
        """Sets the own_block_rewards of this RewardSplit.

        [DEPRECATED]  # noqa: E501

        :param own_block_rewards: The own_block_rewards of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._own_block_rewards = own_block_rewards

    @property
    def extra_block_rewards(self):
        """Gets the extra_block_rewards of this RewardSplit.  # noqa: E501

        [DEPRECATED]  # noqa: E501

        :return: The extra_block_rewards of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._extra_block_rewards

    @extra_block_rewards.setter
    def extra_block_rewards(self, extra_block_rewards):
        """Sets the extra_block_rewards of this RewardSplit.

        [DEPRECATED]  # noqa: E501

        :param extra_block_rewards: The extra_block_rewards of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._extra_block_rewards = extra_block_rewards

    @property
    def missed_own_block_rewards(self):
        """Gets the missed_own_block_rewards of this RewardSplit.  # noqa: E501

        [DEPRECATED]  # noqa: E501

        :return: The missed_own_block_rewards of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._missed_own_block_rewards

    @missed_own_block_rewards.setter
    def missed_own_block_rewards(self, missed_own_block_rewards):
        """Sets the missed_own_block_rewards of this RewardSplit.

        [DEPRECATED]  # noqa: E501

        :param missed_own_block_rewards: The missed_own_block_rewards of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._missed_own_block_rewards = missed_own_block_rewards

    @property
    def missed_extra_block_rewards(self):
        """Gets the missed_extra_block_rewards of this RewardSplit.  # noqa: E501

        [DEPRECATED]  # noqa: E501

        :return: The missed_extra_block_rewards of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._missed_extra_block_rewards

    @missed_extra_block_rewards.setter
    def missed_extra_block_rewards(self, missed_extra_block_rewards):
        """Sets the missed_extra_block_rewards of this RewardSplit.

        [DEPRECATED]  # noqa: E501

        :param missed_extra_block_rewards: The missed_extra_block_rewards of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._missed_extra_block_rewards = missed_extra_block_rewards

    @property
    def uncovered_own_block_rewards(self):
        """Gets the uncovered_own_block_rewards of this RewardSplit.  # noqa: E501

        [DEPRECATED]  # noqa: E501

        :return: The uncovered_own_block_rewards of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._uncovered_own_block_rewards

    @uncovered_own_block_rewards.setter
    def uncovered_own_block_rewards(self, uncovered_own_block_rewards):
        """Sets the uncovered_own_block_rewards of this RewardSplit.

        [DEPRECATED]  # noqa: E501

        :param uncovered_own_block_rewards: The uncovered_own_block_rewards of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._uncovered_own_block_rewards = uncovered_own_block_rewards

    @property
    def uncovered_extra_block_rewards(self):
        """Gets the uncovered_extra_block_rewards of this RewardSplit.  # noqa: E501

        [DEPRECATED]  # noqa: E501

        :return: The uncovered_extra_block_rewards of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._uncovered_extra_block_rewards

    @uncovered_extra_block_rewards.setter
    def uncovered_extra_block_rewards(self, uncovered_extra_block_rewards):
        """Sets the uncovered_extra_block_rewards of this RewardSplit.

        [DEPRECATED]  # noqa: E501

        :param uncovered_extra_block_rewards: The uncovered_extra_block_rewards of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._uncovered_extra_block_rewards = uncovered_extra_block_rewards

    @property
    def uncovered_endorsement_rewards(self):
        """Gets the uncovered_endorsement_rewards of this RewardSplit.  # noqa: E501

        [DEPRECATED]  # noqa: E501

        :return: The uncovered_endorsement_rewards of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._uncovered_endorsement_rewards

    @uncovered_endorsement_rewards.setter
    def uncovered_endorsement_rewards(self, uncovered_endorsement_rewards):
        """Sets the uncovered_endorsement_rewards of this RewardSplit.

        [DEPRECATED]  # noqa: E501

        :param uncovered_endorsement_rewards: The uncovered_endorsement_rewards of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._uncovered_endorsement_rewards = uncovered_endorsement_rewards

    @property
    def own_block_fees(self):
        """Gets the own_block_fees of this RewardSplit.  # noqa: E501

        [DEPRECATED]  # noqa: E501

        :return: The own_block_fees of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._own_block_fees

    @own_block_fees.setter
    def own_block_fees(self, own_block_fees):
        """Sets the own_block_fees of this RewardSplit.

        [DEPRECATED]  # noqa: E501

        :param own_block_fees: The own_block_fees of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._own_block_fees = own_block_fees

    @property
    def extra_block_fees(self):
        """Gets the extra_block_fees of this RewardSplit.  # noqa: E501

        [DEPRECATED]  # noqa: E501

        :return: The extra_block_fees of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._extra_block_fees

    @extra_block_fees.setter
    def extra_block_fees(self, extra_block_fees):
        """Sets the extra_block_fees of this RewardSplit.

        [DEPRECATED]  # noqa: E501

        :param extra_block_fees: The extra_block_fees of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._extra_block_fees = extra_block_fees

    @property
    def missed_own_block_fees(self):
        """Gets the missed_own_block_fees of this RewardSplit.  # noqa: E501

        [DEPRECATED]  # noqa: E501

        :return: The missed_own_block_fees of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._missed_own_block_fees

    @missed_own_block_fees.setter
    def missed_own_block_fees(self, missed_own_block_fees):
        """Sets the missed_own_block_fees of this RewardSplit.

        [DEPRECATED]  # noqa: E501

        :param missed_own_block_fees: The missed_own_block_fees of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._missed_own_block_fees = missed_own_block_fees

    @property
    def missed_extra_block_fees(self):
        """Gets the missed_extra_block_fees of this RewardSplit.  # noqa: E501

        [DEPRECATED]  # noqa: E501

        :return: The missed_extra_block_fees of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._missed_extra_block_fees

    @missed_extra_block_fees.setter
    def missed_extra_block_fees(self, missed_extra_block_fees):
        """Sets the missed_extra_block_fees of this RewardSplit.

        [DEPRECATED]  # noqa: E501

        :param missed_extra_block_fees: The missed_extra_block_fees of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._missed_extra_block_fees = missed_extra_block_fees

    @property
    def uncovered_own_block_fees(self):
        """Gets the uncovered_own_block_fees of this RewardSplit.  # noqa: E501

        [DEPRECATED]  # noqa: E501

        :return: The uncovered_own_block_fees of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._uncovered_own_block_fees

    @uncovered_own_block_fees.setter
    def uncovered_own_block_fees(self, uncovered_own_block_fees):
        """Sets the uncovered_own_block_fees of this RewardSplit.

        [DEPRECATED]  # noqa: E501

        :param uncovered_own_block_fees: The uncovered_own_block_fees of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._uncovered_own_block_fees = uncovered_own_block_fees

    @property
    def uncovered_extra_block_fees(self):
        """Gets the uncovered_extra_block_fees of this RewardSplit.  # noqa: E501

        [DEPRECATED]  # noqa: E501

        :return: The uncovered_extra_block_fees of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._uncovered_extra_block_fees

    @uncovered_extra_block_fees.setter
    def uncovered_extra_block_fees(self, uncovered_extra_block_fees):
        """Sets the uncovered_extra_block_fees of this RewardSplit.

        [DEPRECATED]  # noqa: E501

        :param uncovered_extra_block_fees: The uncovered_extra_block_fees of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._uncovered_extra_block_fees = uncovered_extra_block_fees

    @property
    def double_baking_lost_deposits(self):
        """Gets the double_baking_lost_deposits of this RewardSplit.  # noqa: E501

        [DEPRECATED]  # noqa: E501

        :return: The double_baking_lost_deposits of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._double_baking_lost_deposits

    @double_baking_lost_deposits.setter
    def double_baking_lost_deposits(self, double_baking_lost_deposits):
        """Sets the double_baking_lost_deposits of this RewardSplit.

        [DEPRECATED]  # noqa: E501

        :param double_baking_lost_deposits: The double_baking_lost_deposits of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._double_baking_lost_deposits = double_baking_lost_deposits

    @property
    def double_baking_lost_rewards(self):
        """Gets the double_baking_lost_rewards of this RewardSplit.  # noqa: E501

        [DEPRECATED]  # noqa: E501

        :return: The double_baking_lost_rewards of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._double_baking_lost_rewards

    @double_baking_lost_rewards.setter
    def double_baking_lost_rewards(self, double_baking_lost_rewards):
        """Sets the double_baking_lost_rewards of this RewardSplit.

        [DEPRECATED]  # noqa: E501

        :param double_baking_lost_rewards: The double_baking_lost_rewards of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._double_baking_lost_rewards = double_baking_lost_rewards

    @property
    def double_baking_lost_fees(self):
        """Gets the double_baking_lost_fees of this RewardSplit.  # noqa: E501

        [DEPRECATED]  # noqa: E501

        :return: The double_baking_lost_fees of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._double_baking_lost_fees

    @double_baking_lost_fees.setter
    def double_baking_lost_fees(self, double_baking_lost_fees):
        """Sets the double_baking_lost_fees of this RewardSplit.

        [DEPRECATED]  # noqa: E501

        :param double_baking_lost_fees: The double_baking_lost_fees of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._double_baking_lost_fees = double_baking_lost_fees

    @property
    def double_endorsing_lost_deposits(self):
        """Gets the double_endorsing_lost_deposits of this RewardSplit.  # noqa: E501

        [DEPRECATED]  # noqa: E501

        :return: The double_endorsing_lost_deposits of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._double_endorsing_lost_deposits

    @double_endorsing_lost_deposits.setter
    def double_endorsing_lost_deposits(self, double_endorsing_lost_deposits):
        """Sets the double_endorsing_lost_deposits of this RewardSplit.

        [DEPRECATED]  # noqa: E501

        :param double_endorsing_lost_deposits: The double_endorsing_lost_deposits of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._double_endorsing_lost_deposits = double_endorsing_lost_deposits

    @property
    def double_endorsing_lost_rewards(self):
        """Gets the double_endorsing_lost_rewards of this RewardSplit.  # noqa: E501

        [DEPRECATED]  # noqa: E501

        :return: The double_endorsing_lost_rewards of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._double_endorsing_lost_rewards

    @double_endorsing_lost_rewards.setter
    def double_endorsing_lost_rewards(self, double_endorsing_lost_rewards):
        """Sets the double_endorsing_lost_rewards of this RewardSplit.

        [DEPRECATED]  # noqa: E501

        :param double_endorsing_lost_rewards: The double_endorsing_lost_rewards of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._double_endorsing_lost_rewards = double_endorsing_lost_rewards

    @property
    def double_endorsing_lost_fees(self):
        """Gets the double_endorsing_lost_fees of this RewardSplit.  # noqa: E501

        [DEPRECATED]  # noqa: E501

        :return: The double_endorsing_lost_fees of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._double_endorsing_lost_fees

    @double_endorsing_lost_fees.setter
    def double_endorsing_lost_fees(self, double_endorsing_lost_fees):
        """Sets the double_endorsing_lost_fees of this RewardSplit.

        [DEPRECATED]  # noqa: E501

        :param double_endorsing_lost_fees: The double_endorsing_lost_fees of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._double_endorsing_lost_fees = double_endorsing_lost_fees

    @property
    def revelation_lost_rewards(self):
        """Gets the revelation_lost_rewards of this RewardSplit.  # noqa: E501

        [DEPRECATED]  # noqa: E501

        :return: The revelation_lost_rewards of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._revelation_lost_rewards

    @revelation_lost_rewards.setter
    def revelation_lost_rewards(self, revelation_lost_rewards):
        """Sets the revelation_lost_rewards of this RewardSplit.

        [DEPRECATED]  # noqa: E501

        :param revelation_lost_rewards: The revelation_lost_rewards of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._revelation_lost_rewards = revelation_lost_rewards

    @property
    def revelation_lost_fees(self):
        """Gets the revelation_lost_fees of this RewardSplit.  # noqa: E501

        [DEPRECATED]  # noqa: E501

        :return: The revelation_lost_fees of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._revelation_lost_fees

    @revelation_lost_fees.setter
    def revelation_lost_fees(self, revelation_lost_fees):
        """Sets the revelation_lost_fees of this RewardSplit.

        [DEPRECATED]  # noqa: E501

        :param revelation_lost_fees: The revelation_lost_fees of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._revelation_lost_fees = revelation_lost_fees

    @property
    def future_block_deposits(self):
        """Gets the future_block_deposits of this RewardSplit.  # noqa: E501

        [DEPRECATED]  # noqa: E501

        :return: The future_block_deposits of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._future_block_deposits

    @future_block_deposits.setter
    def future_block_deposits(self, future_block_deposits):
        """Sets the future_block_deposits of this RewardSplit.

        [DEPRECATED]  # noqa: E501

        :param future_block_deposits: The future_block_deposits of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._future_block_deposits = future_block_deposits

    @property
    def block_deposits(self):
        """Gets the block_deposits of this RewardSplit.  # noqa: E501

        [DEPRECATED]  # noqa: E501

        :return: The block_deposits of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._block_deposits

    @block_deposits.setter
    def block_deposits(self, block_deposits):
        """Sets the block_deposits of this RewardSplit.

        [DEPRECATED]  # noqa: E501

        :param block_deposits: The block_deposits of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._block_deposits = block_deposits

    @property
    def future_endorsement_deposits(self):
        """Gets the future_endorsement_deposits of this RewardSplit.  # noqa: E501

        [DEPRECATED]  # noqa: E501

        :return: The future_endorsement_deposits of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._future_endorsement_deposits

    @future_endorsement_deposits.setter
    def future_endorsement_deposits(self, future_endorsement_deposits):
        """Sets the future_endorsement_deposits of this RewardSplit.

        [DEPRECATED]  # noqa: E501

        :param future_endorsement_deposits: The future_endorsement_deposits of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._future_endorsement_deposits = future_endorsement_deposits

    @property
    def endorsement_deposits(self):
        """Gets the endorsement_deposits of this RewardSplit.  # noqa: E501

        [DEPRECATED]  # noqa: E501

        :return: The endorsement_deposits of this RewardSplit.  # noqa: E501
        :rtype: int
        """
        return self._endorsement_deposits

    @endorsement_deposits.setter
    def endorsement_deposits(self, endorsement_deposits):
        """Sets the endorsement_deposits of this RewardSplit.

        [DEPRECATED]  # noqa: E501

        :param endorsement_deposits: The endorsement_deposits of this RewardSplit.  # noqa: E501
        :type: int
        """

        self._endorsement_deposits = endorsement_deposits

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RewardSplit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RewardSplit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
