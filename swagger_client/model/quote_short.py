# coding: utf-8

"""
    TzKT API

    # Introduction  TzKT Explorer provides free REST API and WebSocket API for accessing detailed Tezos blockchain data and helps developers build more services and applications on top of Tezos. TzKT is an open-source project, so you can easily clone and build it and use it as a self-hosted service to avoid any risks of depending on third-party services.  TzKT API is available for the following Tezos networks with the following base URLs:  - Mainnet: `https://api.tzkt.io/` or `https://api.mainnet.tzkt.io/` ([view docs](https://api.tzkt.io))  - Hangzhounet: `https://api.hangzhounet.tzkt.io/` ([view docs](https://api.hangzhounet.tzkt.io)) - Ithacanet: `https://api.ithacanet.tzkt.io/` ([view docs](https://api.ithacanet.tzkt.io))  We also provide a staging environment for testing newest features and pre-updating client applications before deploying to production:  - Mainnet staging: `https://staging.api.tzkt.io/` or `https://staging.api.mainnet.tzkt.io/` ([view docs](https://staging.api.tzkt.io))  Feel free to contact us if you have any questions or feature requests. Your feedback really helps us make TzKT better!  - Discord: https://discord.gg/aG8XKuwsQd - Telegram: https://t.me/baking_bad_chat - Slack: https://tezos-dev.slack.com/archives/CV5NX7F2L - Twitter: https://twitter.com/TezosBakingBad - Email: hello@baking-bad.org  And don't forget to star TzKT project [on GitHub](https://github.com/baking-bad/tzkt) ;)  # Terms of Use  TzKT API is free for everyone and for both commercial and non-commercial usage.  If your application or service uses the TzKT API in any forms: directly on frontend or indirectly on backend, you must mention that fact on your website or application by placing the label **\"Powered by TzKT API\"** or **\"Built with TzKT API\"** with a direct link to [tzkt.io](https://tzkt.io).   # Rate Limits  There will be no rate limits as long as our servers can handle the load without additional infrastructure costs. However, any apparent abuse will be prevented by setting targeted rate limits.  Check out [Tezos Explorer API Best Practices](https://baking-bad.org/blog/tag/TzKT/) and in particular [how to optimize requests count](https://baking-bad.org/blog/2020/07/29/tezos-explorer-api-tzkt-how-often-to-make-requests/).  ---   # noqa: E501

    OpenAPI spec version: v1.8.3
    Contact: hello@baking-bad.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class QuoteShort(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'btc': 'float',
        'eur': 'float',
        'usd': 'float',
        'cny': 'float',
        'jpy': 'float',
        'krw': 'float',
        'eth': 'float',
        'gbp': 'float'
    }

    attribute_map = {
        'btc': 'btc',
        'eur': 'eur',
        'usd': 'usd',
        'cny': 'cny',
        'jpy': 'jpy',
        'krw': 'krw',
        'eth': 'eth',
        'gbp': 'gbp'
    }

    def __init__(self, btc=None, eur=None, usd=None, cny=None, jpy=None, krw=None, eth=None, gbp=None):  # noqa: E501
        """QuoteShort - a model defined in Swagger"""  # noqa: E501
        self._btc = None
        self._eur = None
        self._usd = None
        self._cny = None
        self._jpy = None
        self._krw = None
        self._eth = None
        self._gbp = None
        self.discriminator = None
        if btc is not None:
            self.btc = btc
        if eur is not None:
            self.eur = eur
        if usd is not None:
            self.usd = usd
        if cny is not None:
            self.cny = cny
        if jpy is not None:
            self.jpy = jpy
        if krw is not None:
            self.krw = krw
        if eth is not None:
            self.eth = eth
        if gbp is not None:
            self.gbp = gbp

    @property
    def btc(self):
        """Gets the btc of this QuoteShort.  # noqa: E501

        XTZ/BTC price  # noqa: E501

        :return: The btc of this QuoteShort.  # noqa: E501
        :rtype: float
        """
        return self._btc

    @btc.setter
    def btc(self, btc):
        """Sets the btc of this QuoteShort.

        XTZ/BTC price  # noqa: E501

        :param btc: The btc of this QuoteShort.  # noqa: E501
        :type: float
        """

        self._btc = btc

    @property
    def eur(self):
        """Gets the eur of this QuoteShort.  # noqa: E501

        XTZ/EUR price  # noqa: E501

        :return: The eur of this QuoteShort.  # noqa: E501
        :rtype: float
        """
        return self._eur

    @eur.setter
    def eur(self, eur):
        """Sets the eur of this QuoteShort.

        XTZ/EUR price  # noqa: E501

        :param eur: The eur of this QuoteShort.  # noqa: E501
        :type: float
        """

        self._eur = eur

    @property
    def usd(self):
        """Gets the usd of this QuoteShort.  # noqa: E501

        XTZ/USD price  # noqa: E501

        :return: The usd of this QuoteShort.  # noqa: E501
        :rtype: float
        """
        return self._usd

    @usd.setter
    def usd(self, usd):
        """Sets the usd of this QuoteShort.

        XTZ/USD price  # noqa: E501

        :param usd: The usd of this QuoteShort.  # noqa: E501
        :type: float
        """

        self._usd = usd

    @property
    def cny(self):
        """Gets the cny of this QuoteShort.  # noqa: E501

        XTZ/CNY price  # noqa: E501

        :return: The cny of this QuoteShort.  # noqa: E501
        :rtype: float
        """
        return self._cny

    @cny.setter
    def cny(self, cny):
        """Sets the cny of this QuoteShort.

        XTZ/CNY price  # noqa: E501

        :param cny: The cny of this QuoteShort.  # noqa: E501
        :type: float
        """

        self._cny = cny

    @property
    def jpy(self):
        """Gets the jpy of this QuoteShort.  # noqa: E501

        XTZ/JPY price  # noqa: E501

        :return: The jpy of this QuoteShort.  # noqa: E501
        :rtype: float
        """
        return self._jpy

    @jpy.setter
    def jpy(self, jpy):
        """Sets the jpy of this QuoteShort.

        XTZ/JPY price  # noqa: E501

        :param jpy: The jpy of this QuoteShort.  # noqa: E501
        :type: float
        """

        self._jpy = jpy

    @property
    def krw(self):
        """Gets the krw of this QuoteShort.  # noqa: E501

        XTZ/KRW price  # noqa: E501

        :return: The krw of this QuoteShort.  # noqa: E501
        :rtype: float
        """
        return self._krw

    @krw.setter
    def krw(self, krw):
        """Sets the krw of this QuoteShort.

        XTZ/KRW price  # noqa: E501

        :param krw: The krw of this QuoteShort.  # noqa: E501
        :type: float
        """

        self._krw = krw

    @property
    def eth(self):
        """Gets the eth of this QuoteShort.  # noqa: E501

        XTZ/ETH price  # noqa: E501

        :return: The eth of this QuoteShort.  # noqa: E501
        :rtype: float
        """
        return self._eth

    @eth.setter
    def eth(self, eth):
        """Sets the eth of this QuoteShort.

        XTZ/ETH price  # noqa: E501

        :param eth: The eth of this QuoteShort.  # noqa: E501
        :type: float
        """

        self._eth = eth

    @property
    def gbp(self):
        """Gets the gbp of this QuoteShort.  # noqa: E501

        XTZ/GBP price  # noqa: E501

        :return: The gbp of this QuoteShort.  # noqa: E501
        :rtype: float
        """
        return self._gbp

    @gbp.setter
    def gbp(self, gbp):
        """Sets the gbp of this QuoteShort.

        XTZ/GBP price  # noqa: E501

        :param gbp: The gbp of this QuoteShort.  # noqa: E501
        :type: float
        """

        self._gbp = gbp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QuoteShort, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuoteShort):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
