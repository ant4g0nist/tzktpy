# coding: utf-8

"""
    TzKT API

    # Introduction  TzKT Explorer provides free REST API and WebSocket API for accessing detailed Tezos blockchain data and helps developers build more services and applications on top of Tezos. TzKT is an open-source project, so you can easily clone and build it and use it as a self-hosted service to avoid any risks of depending on third-party services.  TzKT API is available for the following Tezos networks with the following base URLs:  - Mainnet: `https://api.tzkt.io/` or `https://api.mainnet.tzkt.io/` ([view docs](https://api.tzkt.io))  - Hangzhounet: `https://api.hangzhounet.tzkt.io/` ([view docs](https://api.hangzhounet.tzkt.io)) - Ithacanet: `https://api.ithacanet.tzkt.io/` ([view docs](https://api.ithacanet.tzkt.io))  We also provide a staging environment for testing newest features and pre-updating client applications before deploying to production:  - Mainnet staging: `https://staging.api.tzkt.io/` or `https://staging.api.mainnet.tzkt.io/` ([view docs](https://staging.api.tzkt.io))  Feel free to contact us if you have any questions or feature requests. Your feedback really helps us make TzKT better!  - Discord: https://discord.gg/aG8XKuwsQd - Telegram: https://t.me/baking_bad_chat - Slack: https://tezos-dev.slack.com/archives/CV5NX7F2L - Twitter: https://twitter.com/TezosBakingBad - Email: hello@baking-bad.org  And don't forget to star TzKT project [on GitHub](https://github.com/baking-bad/tzkt) ;)  # Terms of Use  TzKT API is free for everyone and for both commercial and non-commercial usage.  If your application or service uses the TzKT API in any forms: directly on frontend or indirectly on backend, you must mention that fact on your website or application by placing the label **\"Powered by TzKT API\"** or **\"Built with TzKT API\"** with a direct link to [tzkt.io](https://tzkt.io).   # Rate Limits  There will be no rate limits as long as our servers can handle the load without additional infrastructure costs. However, any apparent abuse will be prevented by setting targeted rate limits.  Check out [Tezos Explorer API Best Practices](https://baking-bad.org/blog/tag/TzKT/) and in particular [how to optimize requests count](https://baking-bad.org/blog/2020/07/29/tezos-explorer-api-tzkt-how-often-to-make-requests/).  ---   # noqa: E501

    OpenAPI spec version: v1.8.3
    Contact: hello@baking-bad.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VotingEpoch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'index': 'int',
        'first_level': 'int',
        'start_time': 'datetime',
        'last_level': 'int',
        'end_time': 'datetime',
        'status': 'str',
        'periods': 'list[VotingPeriod]',
        'proposals': 'list[Proposal]'
    }

    attribute_map = {
        'index': 'index',
        'first_level': 'firstLevel',
        'start_time': 'startTime',
        'last_level': 'lastLevel',
        'end_time': 'endTime',
        'status': 'status',
        'periods': 'periods',
        'proposals': 'proposals'
    }

    def __init__(self, index=None, first_level=None, start_time=None, last_level=None, end_time=None, status=None, periods=None, proposals=None):  # noqa: E501
        """VotingEpoch - a model defined in Swagger"""  # noqa: E501
        self._index = None
        self._first_level = None
        self._start_time = None
        self._last_level = None
        self._end_time = None
        self._status = None
        self._periods = None
        self._proposals = None
        self.discriminator = None
        if index is not None:
            self.index = index
        if first_level is not None:
            self.first_level = first_level
        if start_time is not None:
            self.start_time = start_time
        if last_level is not None:
            self.last_level = last_level
        if end_time is not None:
            self.end_time = end_time
        if status is not None:
            self.status = status
        if periods is not None:
            self.periods = periods
        if proposals is not None:
            self.proposals = proposals

    @property
    def index(self):
        """Gets the index of this VotingEpoch.  # noqa: E501

        Index of the voting epoch, starting from zero  # noqa: E501

        :return: The index of this VotingEpoch.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this VotingEpoch.

        Index of the voting epoch, starting from zero  # noqa: E501

        :param index: The index of this VotingEpoch.  # noqa: E501
        :type: int
        """

        self._index = index

    @property
    def first_level(self):
        """Gets the first_level of this VotingEpoch.  # noqa: E501

        The height of the block in which the epoch starts  # noqa: E501

        :return: The first_level of this VotingEpoch.  # noqa: E501
        :rtype: int
        """
        return self._first_level

    @first_level.setter
    def first_level(self, first_level):
        """Sets the first_level of this VotingEpoch.

        The height of the block in which the epoch starts  # noqa: E501

        :param first_level: The first_level of this VotingEpoch.  # noqa: E501
        :type: int
        """

        self._first_level = first_level

    @property
    def start_time(self):
        """Gets the start_time of this VotingEpoch.  # noqa: E501

        The timestamp of the block in which the epoch starts  # noqa: E501

        :return: The start_time of this VotingEpoch.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this VotingEpoch.

        The timestamp of the block in which the epoch starts  # noqa: E501

        :param start_time: The start_time of this VotingEpoch.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def last_level(self):
        """Gets the last_level of this VotingEpoch.  # noqa: E501

        The height of the block in which the epoch ends  # noqa: E501

        :return: The last_level of this VotingEpoch.  # noqa: E501
        :rtype: int
        """
        return self._last_level

    @last_level.setter
    def last_level(self, last_level):
        """Sets the last_level of this VotingEpoch.

        The height of the block in which the epoch ends  # noqa: E501

        :param last_level: The last_level of this VotingEpoch.  # noqa: E501
        :type: int
        """

        self._last_level = last_level

    @property
    def end_time(self):
        """Gets the end_time of this VotingEpoch.  # noqa: E501

        The timestamp of the block in which the epoch ends  # noqa: E501

        :return: The end_time of this VotingEpoch.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this VotingEpoch.

        The timestamp of the block in which the epoch ends  # noqa: E501

        :param end_time: The end_time of this VotingEpoch.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def status(self):
        """Gets the status of this VotingEpoch.  # noqa: E501

        Status of the voting epoch: `no_proposals` - there were no proposals proposed `voting` - there was at least one proposal and the voting is in progress `completed` - voting successfully completed and the proposal was accepted `failed` - voting was not completed due to either quorum or supermajority was not reached  # noqa: E501

        :return: The status of this VotingEpoch.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this VotingEpoch.

        Status of the voting epoch: `no_proposals` - there were no proposals proposed `voting` - there was at least one proposal and the voting is in progress `completed` - voting successfully completed and the proposal was accepted `failed` - voting was not completed due to either quorum or supermajority was not reached  # noqa: E501

        :param status: The status of this VotingEpoch.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def periods(self):
        """Gets the periods of this VotingEpoch.  # noqa: E501

        Voting periods in the epoch  # noqa: E501

        :return: The periods of this VotingEpoch.  # noqa: E501
        :rtype: list[VotingPeriod]
        """
        return self._periods

    @periods.setter
    def periods(self, periods):
        """Sets the periods of this VotingEpoch.

        Voting periods in the epoch  # noqa: E501

        :param periods: The periods of this VotingEpoch.  # noqa: E501
        :type: list[VotingPeriod]
        """

        self._periods = periods

    @property
    def proposals(self):
        """Gets the proposals of this VotingEpoch.  # noqa: E501

        Proposals pushed during the voting epoch (null, if there were no proposals).  # noqa: E501

        :return: The proposals of this VotingEpoch.  # noqa: E501
        :rtype: list[Proposal]
        """
        return self._proposals

    @proposals.setter
    def proposals(self, proposals):
        """Sets the proposals of this VotingEpoch.

        Proposals pushed during the voting epoch (null, if there were no proposals).  # noqa: E501

        :param proposals: The proposals of this VotingEpoch.  # noqa: E501
        :type: list[Proposal]
        """

        self._proposals = proposals

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VotingEpoch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VotingEpoch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
