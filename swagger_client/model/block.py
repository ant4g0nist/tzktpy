# coding: utf-8

"""
    TzKT API

    # Introduction  TzKT Explorer provides free REST API and WebSocket API for accessing detailed Tezos blockchain data and helps developers build more services and applications on top of Tezos. TzKT is an open-source project, so you can easily clone and build it and use it as a self-hosted service to avoid any risks of depending on third-party services.  TzKT API is available for the following Tezos networks with the following base URLs:  - Mainnet: `https://api.tzkt.io/` or `https://api.mainnet.tzkt.io/` ([view docs](https://api.tzkt.io))  - Hangzhounet: `https://api.hangzhounet.tzkt.io/` ([view docs](https://api.hangzhounet.tzkt.io)) - Ithacanet: `https://api.ithacanet.tzkt.io/` ([view docs](https://api.ithacanet.tzkt.io))  We also provide a staging environment for testing newest features and pre-updating client applications before deploying to production:  - Mainnet staging: `https://staging.api.tzkt.io/` or `https://staging.api.mainnet.tzkt.io/` ([view docs](https://staging.api.tzkt.io))  Feel free to contact us if you have any questions or feature requests. Your feedback really helps us make TzKT better!  - Discord: https://discord.gg/aG8XKuwsQd - Telegram: https://t.me/baking_bad_chat - Slack: https://tezos-dev.slack.com/archives/CV5NX7F2L - Twitter: https://twitter.com/TezosBakingBad - Email: hello@baking-bad.org  And don't forget to star TzKT project [on GitHub](https://github.com/baking-bad/tzkt) ;)  # Terms of Use  TzKT API is free for everyone and for both commercial and non-commercial usage.  If your application or service uses the TzKT API in any forms: directly on frontend or indirectly on backend, you must mention that fact on your website or application by placing the label **\"Powered by TzKT API\"** or **\"Built with TzKT API\"** with a direct link to [tzkt.io](https://tzkt.io).   # Rate Limits  There will be no rate limits as long as our servers can handle the load without additional infrastructure costs. However, any apparent abuse will be prevented by setting targeted rate limits.  Check out [Tezos Explorer API Best Practices](https://baking-bad.org/blog/tag/TzKT/) and in particular [how to optimize requests count](https://baking-bad.org/blog/2020/07/29/tezos-explorer-api-tzkt-how-often-to-make-requests/).  ---   # noqa: E501

    OpenAPI spec version: v1.8.3
    Contact: hello@baking-bad.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Block(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cycle': 'int',
        'level': 'int',
        'hash': 'str',
        'timestamp': 'datetime',
        'proto': 'int',
        'payload_round': 'int',
        'block_round': 'int',
        'validations': 'int',
        'deposit': 'int',
        'reward': 'int',
        'bonus': 'int',
        'fees': 'int',
        'nonce_revealed': 'bool',
        'proposer': 'OneOfBlockProposer',
        'producer': 'OneOfBlockProducer',
        'software': 'OneOfBlockSoftware',
        'lb_escape_vote': 'bool',
        'lb_escape_ema': 'int',
        'endorsements': 'list[EndorsementOperation]',
        'preendorsements': 'list[PreendorsementOperation]',
        'proposals': 'list[ProposalOperation]',
        'ballots': 'list[BallotOperation]',
        'activations': 'list[ActivationOperation]',
        'double_baking': 'list[DoubleBakingOperation]',
        'double_endorsing': 'list[DoubleEndorsingOperation]',
        'double_preendorsing': 'list[DoublePreendorsingOperation]',
        'nonce_revelations': 'list[NonceRevelationOperation]',
        'delegations': 'list[DelegationOperation]',
        'originations': 'list[OriginationOperation]',
        'transactions': 'list[TransactionOperation]',
        'reveals': 'list[RevealOperation]',
        'register_constants': 'list[RegisterConstantOperation]',
        'set_deposits_limits': 'list[SetDepositsLimitOperation]',
        'migrations': 'list[MigrationOperation]',
        'revelation_penalties': 'list[RevelationPenaltyOperation]',
        'endorsing_rewards': 'list[EndorsingRewardOperation]',
        'quote': 'OneOfBlockQuote',
        'priority': 'int',
        'baker': 'OneOfBlockBaker'
    }

    attribute_map = {
        'cycle': 'cycle',
        'level': 'level',
        'hash': 'hash',
        'timestamp': 'timestamp',
        'proto': 'proto',
        'payload_round': 'payloadRound',
        'block_round': 'blockRound',
        'validations': 'validations',
        'deposit': 'deposit',
        'reward': 'reward',
        'bonus': 'bonus',
        'fees': 'fees',
        'nonce_revealed': 'nonceRevealed',
        'proposer': 'proposer',
        'producer': 'producer',
        'software': 'software',
        'lb_escape_vote': 'lbEscapeVote',
        'lb_escape_ema': 'lbEscapeEma',
        'endorsements': 'endorsements',
        'preendorsements': 'preendorsements',
        'proposals': 'proposals',
        'ballots': 'ballots',
        'activations': 'activations',
        'double_baking': 'doubleBaking',
        'double_endorsing': 'doubleEndorsing',
        'double_preendorsing': 'doublePreendorsing',
        'nonce_revelations': 'nonceRevelations',
        'delegations': 'delegations',
        'originations': 'originations',
        'transactions': 'transactions',
        'reveals': 'reveals',
        'register_constants': 'registerConstants',
        'set_deposits_limits': 'setDepositsLimits',
        'migrations': 'migrations',
        'revelation_penalties': 'revelationPenalties',
        'endorsing_rewards': 'endorsingRewards',
        'quote': 'quote',
        'priority': 'priority',
        'baker': 'baker'
    }

    def __init__(self, cycle=None, level=None, hash=None, timestamp=None, proto=None, payload_round=None, block_round=None, validations=None, deposit=None, reward=None, bonus=None, fees=None, nonce_revealed=None, proposer=None, producer=None, software=None, lb_escape_vote=None, lb_escape_ema=None, endorsements=None, preendorsements=None, proposals=None, ballots=None, activations=None, double_baking=None, double_endorsing=None, double_preendorsing=None, nonce_revelations=None, delegations=None, originations=None, transactions=None, reveals=None, register_constants=None, set_deposits_limits=None, migrations=None, revelation_penalties=None, endorsing_rewards=None, quote=None, priority=None, baker=None):  # noqa: E501
        """Block - a model defined in Swagger"""  # noqa: E501
        self._cycle = None
        self._level = None
        self._hash = None
        self._timestamp = None
        self._proto = None
        self._payload_round = None
        self._block_round = None
        self._validations = None
        self._deposit = None
        self._reward = None
        self._bonus = None
        self._fees = None
        self._nonce_revealed = None
        self._proposer = None
        self._producer = None
        self._software = None
        self._lb_escape_vote = None
        self._lb_escape_ema = None
        self._endorsements = None
        self._preendorsements = None
        self._proposals = None
        self._ballots = None
        self._activations = None
        self._double_baking = None
        self._double_endorsing = None
        self._double_preendorsing = None
        self._nonce_revelations = None
        self._delegations = None
        self._originations = None
        self._transactions = None
        self._reveals = None
        self._register_constants = None
        self._set_deposits_limits = None
        self._migrations = None
        self._revelation_penalties = None
        self._endorsing_rewards = None
        self._quote = None
        self._priority = None
        self._baker = None
        self.discriminator = None
        if cycle is not None:
            self.cycle = cycle
        if level is not None:
            self.level = level
        if hash is not None:
            self.hash = hash
        if timestamp is not None:
            self.timestamp = timestamp
        if proto is not None:
            self.proto = proto
        if payload_round is not None:
            self.payload_round = payload_round
        if block_round is not None:
            self.block_round = block_round
        if validations is not None:
            self.validations = validations
        if deposit is not None:
            self.deposit = deposit
        if reward is not None:
            self.reward = reward
        if bonus is not None:
            self.bonus = bonus
        if fees is not None:
            self.fees = fees
        if nonce_revealed is not None:
            self.nonce_revealed = nonce_revealed
        if proposer is not None:
            self.proposer = proposer
        if producer is not None:
            self.producer = producer
        if software is not None:
            self.software = software
        if lb_escape_vote is not None:
            self.lb_escape_vote = lb_escape_vote
        if lb_escape_ema is not None:
            self.lb_escape_ema = lb_escape_ema
        if endorsements is not None:
            self.endorsements = endorsements
        if preendorsements is not None:
            self.preendorsements = preendorsements
        if proposals is not None:
            self.proposals = proposals
        if ballots is not None:
            self.ballots = ballots
        if activations is not None:
            self.activations = activations
        if double_baking is not None:
            self.double_baking = double_baking
        if double_endorsing is not None:
            self.double_endorsing = double_endorsing
        if double_preendorsing is not None:
            self.double_preendorsing = double_preendorsing
        if nonce_revelations is not None:
            self.nonce_revelations = nonce_revelations
        if delegations is not None:
            self.delegations = delegations
        if originations is not None:
            self.originations = originations
        if transactions is not None:
            self.transactions = transactions
        if reveals is not None:
            self.reveals = reveals
        if register_constants is not None:
            self.register_constants = register_constants
        if set_deposits_limits is not None:
            self.set_deposits_limits = set_deposits_limits
        if migrations is not None:
            self.migrations = migrations
        if revelation_penalties is not None:
            self.revelation_penalties = revelation_penalties
        if endorsing_rewards is not None:
            self.endorsing_rewards = endorsing_rewards
        if quote is not None:
            self.quote = quote
        if priority is not None:
            self.priority = priority
        if baker is not None:
            self.baker = baker

    @property
    def cycle(self):
        """Gets the cycle of this Block.  # noqa: E501

        Index of the cycle  # noqa: E501

        :return: The cycle of this Block.  # noqa: E501
        :rtype: int
        """
        return self._cycle

    @cycle.setter
    def cycle(self, cycle):
        """Sets the cycle of this Block.

        Index of the cycle  # noqa: E501

        :param cycle: The cycle of this Block.  # noqa: E501
        :type: int
        """

        self._cycle = cycle

    @property
    def level(self):
        """Gets the level of this Block.  # noqa: E501

        Height of the block from the genesis  # noqa: E501

        :return: The level of this Block.  # noqa: E501
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this Block.

        Height of the block from the genesis  # noqa: E501

        :param level: The level of this Block.  # noqa: E501
        :type: int
        """

        self._level = level

    @property
    def hash(self):
        """Gets the hash of this Block.  # noqa: E501

        Block hash  # noqa: E501

        :return: The hash of this Block.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this Block.

        Block hash  # noqa: E501

        :param hash: The hash of this Block.  # noqa: E501
        :type: str
        """

        self._hash = hash

    @property
    def timestamp(self):
        """Gets the timestamp of this Block.  # noqa: E501

        Datetime at which the block is claimed to have been created (ISO 8601, e.g. `2020-02-20T02:40:57Z`)  # noqa: E501

        :return: The timestamp of this Block.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Block.

        Datetime at which the block is claimed to have been created (ISO 8601, e.g. `2020-02-20T02:40:57Z`)  # noqa: E501

        :param timestamp: The timestamp of this Block.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def proto(self):
        """Gets the proto of this Block.  # noqa: E501

        Protocol code, representing a number of protocol changes since genesis (mod 256, but `-1` for the genesis block)  # noqa: E501

        :return: The proto of this Block.  # noqa: E501
        :rtype: int
        """
        return self._proto

    @proto.setter
    def proto(self, proto):
        """Sets the proto of this Block.

        Protocol code, representing a number of protocol changes since genesis (mod 256, but `-1` for the genesis block)  # noqa: E501

        :param proto: The proto of this Block.  # noqa: E501
        :type: int
        """

        self._proto = proto

    @property
    def payload_round(self):
        """Gets the payload_round of this Block.  # noqa: E501

        Round at which the block payload was proposed  # noqa: E501

        :return: The payload_round of this Block.  # noqa: E501
        :rtype: int
        """
        return self._payload_round

    @payload_round.setter
    def payload_round(self, payload_round):
        """Sets the payload_round of this Block.

        Round at which the block payload was proposed  # noqa: E501

        :param payload_round: The payload_round of this Block.  # noqa: E501
        :type: int
        """

        self._payload_round = payload_round

    @property
    def block_round(self):
        """Gets the block_round of this Block.  # noqa: E501

        Round at which the block was produced  # noqa: E501

        :return: The block_round of this Block.  # noqa: E501
        :rtype: int
        """
        return self._block_round

    @block_round.setter
    def block_round(self, block_round):
        """Sets the block_round of this Block.

        Round at which the block was produced  # noqa: E501

        :param block_round: The block_round of this Block.  # noqa: E501
        :type: int
        """

        self._block_round = block_round

    @property
    def validations(self):
        """Gets the validations of this Block.  # noqa: E501

        Number of endorsements (slots), included into the block  # noqa: E501

        :return: The validations of this Block.  # noqa: E501
        :rtype: int
        """
        return self._validations

    @validations.setter
    def validations(self, validations):
        """Sets the validations of this Block.

        Number of endorsements (slots), included into the block  # noqa: E501

        :param validations: The validations of this Block.  # noqa: E501
        :type: int
        """

        self._validations = validations

    @property
    def deposit(self):
        """Gets the deposit of this Block.  # noqa: E501

        Security deposit frozen on the baker's account for producing the block (micro tez)  # noqa: E501

        :return: The deposit of this Block.  # noqa: E501
        :rtype: int
        """
        return self._deposit

    @deposit.setter
    def deposit(self, deposit):
        """Sets the deposit of this Block.

        Security deposit frozen on the baker's account for producing the block (micro tez)  # noqa: E501

        :param deposit: The deposit of this Block.  # noqa: E501
        :type: int
        """

        self._deposit = deposit

    @property
    def reward(self):
        """Gets the reward of this Block.  # noqa: E501

        Fixed reward paid to the payload proposer (micro tez)  # noqa: E501

        :return: The reward of this Block.  # noqa: E501
        :rtype: int
        """
        return self._reward

    @reward.setter
    def reward(self, reward):
        """Sets the reward of this Block.

        Fixed reward paid to the payload proposer (micro tez)  # noqa: E501

        :param reward: The reward of this Block.  # noqa: E501
        :type: int
        """

        self._reward = reward

    @property
    def bonus(self):
        """Gets the bonus of this Block.  # noqa: E501

        Bonus reward paid to the block producer (micro tez)  # noqa: E501

        :return: The bonus of this Block.  # noqa: E501
        :rtype: int
        """
        return self._bonus

    @bonus.setter
    def bonus(self, bonus):
        """Sets the bonus of this Block.

        Bonus reward paid to the block producer (micro tez)  # noqa: E501

        :param bonus: The bonus of this Block.  # noqa: E501
        :type: int
        """

        self._bonus = bonus

    @property
    def fees(self):
        """Gets the fees of this Block.  # noqa: E501

        Total fee gathered from operations, included into the block  # noqa: E501

        :return: The fees of this Block.  # noqa: E501
        :rtype: int
        """
        return self._fees

    @fees.setter
    def fees(self, fees):
        """Sets the fees of this Block.

        Total fee gathered from operations, included into the block  # noqa: E501

        :param fees: The fees of this Block.  # noqa: E501
        :type: int
        """

        self._fees = fees

    @property
    def nonce_revealed(self):
        """Gets the nonce_revealed of this Block.  # noqa: E501

        Status of the seed nonce revelation `true` - seed nonce revealed `false` - there's no `seed_nonce_hash` in the block or seed nonce revelation has missed  # noqa: E501

        :return: The nonce_revealed of this Block.  # noqa: E501
        :rtype: bool
        """
        return self._nonce_revealed

    @nonce_revealed.setter
    def nonce_revealed(self, nonce_revealed):
        """Sets the nonce_revealed of this Block.

        Status of the seed nonce revelation `true` - seed nonce revealed `false` - there's no `seed_nonce_hash` in the block or seed nonce revelation has missed  # noqa: E501

        :param nonce_revealed: The nonce_revealed of this Block.  # noqa: E501
        :type: bool
        """

        self._nonce_revealed = nonce_revealed

    @property
    def proposer(self):
        """Gets the proposer of this Block.  # noqa: E501

        Baker who proposed the block payload  # noqa: E501

        :return: The proposer of this Block.  # noqa: E501
        :rtype: OneOfBlockProposer
        """
        return self._proposer

    @proposer.setter
    def proposer(self, proposer):
        """Sets the proposer of this Block.

        Baker who proposed the block payload  # noqa: E501

        :param proposer: The proposer of this Block.  # noqa: E501
        :type: OneOfBlockProposer
        """

        self._proposer = proposer

    @property
    def producer(self):
        """Gets the producer of this Block.  # noqa: E501

        Baker who produced the block  # noqa: E501

        :return: The producer of this Block.  # noqa: E501
        :rtype: OneOfBlockProducer
        """
        return self._producer

    @producer.setter
    def producer(self, producer):
        """Sets the producer of this Block.

        Baker who produced the block  # noqa: E501

        :param producer: The producer of this Block.  # noqa: E501
        :type: OneOfBlockProducer
        """

        self._producer = producer

    @property
    def software(self):
        """Gets the software of this Block.  # noqa: E501

        Information about baker's software  # noqa: E501

        :return: The software of this Block.  # noqa: E501
        :rtype: OneOfBlockSoftware
        """
        return self._software

    @software.setter
    def software(self, software):
        """Sets the software of this Block.

        Information about baker's software  # noqa: E501

        :param software: The software of this Block.  # noqa: E501
        :type: OneOfBlockSoftware
        """

        self._software = software

    @property
    def lb_escape_vote(self):
        """Gets the lb_escape_vote of this Block.  # noqa: E501

        Flag indicating that the baker has voted for disabling liquidity baking  # noqa: E501

        :return: The lb_escape_vote of this Block.  # noqa: E501
        :rtype: bool
        """
        return self._lb_escape_vote

    @lb_escape_vote.setter
    def lb_escape_vote(self, lb_escape_vote):
        """Sets the lb_escape_vote of this Block.

        Flag indicating that the baker has voted for disabling liquidity baking  # noqa: E501

        :param lb_escape_vote: The lb_escape_vote of this Block.  # noqa: E501
        :type: bool
        """

        self._lb_escape_vote = lb_escape_vote

    @property
    def lb_escape_ema(self):
        """Gets the lb_escape_ema of this Block.  # noqa: E501

        Liquidity baking escape EMA value with precision of 1000 for integer computation  # noqa: E501

        :return: The lb_escape_ema of this Block.  # noqa: E501
        :rtype: int
        """
        return self._lb_escape_ema

    @lb_escape_ema.setter
    def lb_escape_ema(self, lb_escape_ema):
        """Sets the lb_escape_ema of this Block.

        Liquidity baking escape EMA value with precision of 1000 for integer computation  # noqa: E501

        :param lb_escape_ema: The lb_escape_ema of this Block.  # noqa: E501
        :type: int
        """

        self._lb_escape_ema = lb_escape_ema

    @property
    def endorsements(self):
        """Gets the endorsements of this Block.  # noqa: E501

        List of endorsement (is operation, which specifies the head of the chain as seen by the endorser of a given slot) operations, included in the block  # noqa: E501

        :return: The endorsements of this Block.  # noqa: E501
        :rtype: list[EndorsementOperation]
        """
        return self._endorsements

    @endorsements.setter
    def endorsements(self, endorsements):
        """Sets the endorsements of this Block.

        List of endorsement (is operation, which specifies the head of the chain as seen by the endorser of a given slot) operations, included in the block  # noqa: E501

        :param endorsements: The endorsements of this Block.  # noqa: E501
        :type: list[EndorsementOperation]
        """

        self._endorsements = endorsements

    @property
    def preendorsements(self):
        """Gets the preendorsements of this Block.  # noqa: E501

        List of preendorsement operations, included in the block  # noqa: E501

        :return: The preendorsements of this Block.  # noqa: E501
        :rtype: list[PreendorsementOperation]
        """
        return self._preendorsements

    @preendorsements.setter
    def preendorsements(self, preendorsements):
        """Sets the preendorsements of this Block.

        List of preendorsement operations, included in the block  # noqa: E501

        :param preendorsements: The preendorsements of this Block.  # noqa: E501
        :type: list[PreendorsementOperation]
        """

        self._preendorsements = preendorsements

    @property
    def proposals(self):
        """Gets the proposals of this Block.  # noqa: E501

        List of proposal (is used by bakers (delegates) to submit and/or upvote proposals to amend the protocol) operations, included in the block  # noqa: E501

        :return: The proposals of this Block.  # noqa: E501
        :rtype: list[ProposalOperation]
        """
        return self._proposals

    @proposals.setter
    def proposals(self, proposals):
        """Sets the proposals of this Block.

        List of proposal (is used by bakers (delegates) to submit and/or upvote proposals to amend the protocol) operations, included in the block  # noqa: E501

        :param proposals: The proposals of this Block.  # noqa: E501
        :type: list[ProposalOperation]
        """

        self._proposals = proposals

    @property
    def ballots(self):
        """Gets the ballots of this Block.  # noqa: E501

        List of ballot (is used to vote for a proposal in a given voting cycle) operations, included in the block  # noqa: E501

        :return: The ballots of this Block.  # noqa: E501
        :rtype: list[BallotOperation]
        """
        return self._ballots

    @ballots.setter
    def ballots(self, ballots):
        """Sets the ballots of this Block.

        List of ballot (is used to vote for a proposal in a given voting cycle) operations, included in the block  # noqa: E501

        :param ballots: The ballots of this Block.  # noqa: E501
        :type: list[BallotOperation]
        """

        self._ballots = ballots

    @property
    def activations(self):
        """Gets the activations of this Block.  # noqa: E501

        List of activation (is used to activate accounts that were recommended allocations of tezos tokens for donations to the Tezos Foundation’s fundraiser) operations, included in the block  # noqa: E501

        :return: The activations of this Block.  # noqa: E501
        :rtype: list[ActivationOperation]
        """
        return self._activations

    @activations.setter
    def activations(self, activations):
        """Sets the activations of this Block.

        List of activation (is used to activate accounts that were recommended allocations of tezos tokens for donations to the Tezos Foundation’s fundraiser) operations, included in the block  # noqa: E501

        :param activations: The activations of this Block.  # noqa: E501
        :type: list[ActivationOperation]
        """

        self._activations = activations

    @property
    def double_baking(self):
        """Gets the double_baking of this Block.  # noqa: E501

        List of double baking evidence (is used by bakers to provide evidence of double baking (baking two different blocks at the same height) by a baker) operations, included in the block  # noqa: E501

        :return: The double_baking of this Block.  # noqa: E501
        :rtype: list[DoubleBakingOperation]
        """
        return self._double_baking

    @double_baking.setter
    def double_baking(self, double_baking):
        """Sets the double_baking of this Block.

        List of double baking evidence (is used by bakers to provide evidence of double baking (baking two different blocks at the same height) by a baker) operations, included in the block  # noqa: E501

        :param double_baking: The double_baking of this Block.  # noqa: E501
        :type: list[DoubleBakingOperation]
        """

        self._double_baking = double_baking

    @property
    def double_endorsing(self):
        """Gets the double_endorsing of this Block.  # noqa: E501

        List of double endorsement evidence (is used by bakers to provide evidence of double endorsement (endorsing two different blocks at the same block height) by a baker) operations, included in the block  # noqa: E501

        :return: The double_endorsing of this Block.  # noqa: E501
        :rtype: list[DoubleEndorsingOperation]
        """
        return self._double_endorsing

    @double_endorsing.setter
    def double_endorsing(self, double_endorsing):
        """Sets the double_endorsing of this Block.

        List of double endorsement evidence (is used by bakers to provide evidence of double endorsement (endorsing two different blocks at the same block height) by a baker) operations, included in the block  # noqa: E501

        :param double_endorsing: The double_endorsing of this Block.  # noqa: E501
        :type: list[DoubleEndorsingOperation]
        """

        self._double_endorsing = double_endorsing

    @property
    def double_preendorsing(self):
        """Gets the double_preendorsing of this Block.  # noqa: E501

        List of double preendorsement evidence operations, included in the block  # noqa: E501

        :return: The double_preendorsing of this Block.  # noqa: E501
        :rtype: list[DoublePreendorsingOperation]
        """
        return self._double_preendorsing

    @double_preendorsing.setter
    def double_preendorsing(self, double_preendorsing):
        """Sets the double_preendorsing of this Block.

        List of double preendorsement evidence operations, included in the block  # noqa: E501

        :param double_preendorsing: The double_preendorsing of this Block.  # noqa: E501
        :type: list[DoublePreendorsingOperation]
        """

        self._double_preendorsing = double_preendorsing

    @property
    def nonce_revelations(self):
        """Gets the nonce_revelations of this Block.  # noqa: E501

        List of nonce revelation (are used by the blockchain to create randomness) operations, included in the block  # noqa: E501

        :return: The nonce_revelations of this Block.  # noqa: E501
        :rtype: list[NonceRevelationOperation]
        """
        return self._nonce_revelations

    @nonce_revelations.setter
    def nonce_revelations(self, nonce_revelations):
        """Sets the nonce_revelations of this Block.

        List of nonce revelation (are used by the blockchain to create randomness) operations, included in the block  # noqa: E501

        :param nonce_revelations: The nonce_revelations of this Block.  # noqa: E501
        :type: list[NonceRevelationOperation]
        """

        self._nonce_revelations = nonce_revelations

    @property
    def delegations(self):
        """Gets the delegations of this Block.  # noqa: E501

        List of delegation (is used to delegate funds to a delegate (an implicit account registered as a baker)) operations, included in the block  # noqa: E501

        :return: The delegations of this Block.  # noqa: E501
        :rtype: list[DelegationOperation]
        """
        return self._delegations

    @delegations.setter
    def delegations(self, delegations):
        """Sets the delegations of this Block.

        List of delegation (is used to delegate funds to a delegate (an implicit account registered as a baker)) operations, included in the block  # noqa: E501

        :param delegations: The delegations of this Block.  # noqa: E501
        :type: list[DelegationOperation]
        """

        self._delegations = delegations

    @property
    def originations(self):
        """Gets the originations of this Block.  # noqa: E501

        List of origination (deployment / contract creation ) operations, included in the block  # noqa: E501

        :return: The originations of this Block.  # noqa: E501
        :rtype: list[OriginationOperation]
        """
        return self._originations

    @originations.setter
    def originations(self, originations):
        """Sets the originations of this Block.

        List of origination (deployment / contract creation ) operations, included in the block  # noqa: E501

        :param originations: The originations of this Block.  # noqa: E501
        :type: list[OriginationOperation]
        """

        self._originations = originations

    @property
    def transactions(self):
        """Gets the transactions of this Block.  # noqa: E501

        List of transaction (is a standard operation used to transfer tezos tokens to an account) operations, included in the block  # noqa: E501

        :return: The transactions of this Block.  # noqa: E501
        :rtype: list[TransactionOperation]
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions):
        """Sets the transactions of this Block.

        List of transaction (is a standard operation used to transfer tezos tokens to an account) operations, included in the block  # noqa: E501

        :param transactions: The transactions of this Block.  # noqa: E501
        :type: list[TransactionOperation]
        """

        self._transactions = transactions

    @property
    def reveals(self):
        """Gets the reveals of this Block.  # noqa: E501

        List of reveal (is used to reveal the public key associated with an account) operations, included in the block  # noqa: E501

        :return: The reveals of this Block.  # noqa: E501
        :rtype: list[RevealOperation]
        """
        return self._reveals

    @reveals.setter
    def reveals(self, reveals):
        """Sets the reveals of this Block.

        List of reveal (is used to reveal the public key associated with an account) operations, included in the block  # noqa: E501

        :param reveals: The reveals of this Block.  # noqa: E501
        :type: list[RevealOperation]
        """

        self._reveals = reveals

    @property
    def register_constants(self):
        """Gets the register_constants of this Block.  # noqa: E501

        List of register global constant operations, included in the block  # noqa: E501

        :return: The register_constants of this Block.  # noqa: E501
        :rtype: list[RegisterConstantOperation]
        """
        return self._register_constants

    @register_constants.setter
    def register_constants(self, register_constants):
        """Sets the register_constants of this Block.

        List of register global constant operations, included in the block  # noqa: E501

        :param register_constants: The register_constants of this Block.  # noqa: E501
        :type: list[RegisterConstantOperation]
        """

        self._register_constants = register_constants

    @property
    def set_deposits_limits(self):
        """Gets the set_deposits_limits of this Block.  # noqa: E501

        List of set deposits limit operations, included in the block  # noqa: E501

        :return: The set_deposits_limits of this Block.  # noqa: E501
        :rtype: list[SetDepositsLimitOperation]
        """
        return self._set_deposits_limits

    @set_deposits_limits.setter
    def set_deposits_limits(self, set_deposits_limits):
        """Sets the set_deposits_limits of this Block.

        List of set deposits limit operations, included in the block  # noqa: E501

        :param set_deposits_limits: The set_deposits_limits of this Block.  # noqa: E501
        :type: list[SetDepositsLimitOperation]
        """

        self._set_deposits_limits = set_deposits_limits

    @property
    def migrations(self):
        """Gets the migrations of this Block.  # noqa: E501

        List of migration operations, implicitly applied at the end of the block  # noqa: E501

        :return: The migrations of this Block.  # noqa: E501
        :rtype: list[MigrationOperation]
        """
        return self._migrations

    @migrations.setter
    def migrations(self, migrations):
        """Sets the migrations of this Block.

        List of migration operations, implicitly applied at the end of the block  # noqa: E501

        :param migrations: The migrations of this Block.  # noqa: E501
        :type: list[MigrationOperation]
        """

        self._migrations = migrations

    @property
    def revelation_penalties(self):
        """Gets the revelation_penalties of this Block.  # noqa: E501

        List of revelation penalty operations, implicitly applied at the end of the block  # noqa: E501

        :return: The revelation_penalties of this Block.  # noqa: E501
        :rtype: list[RevelationPenaltyOperation]
        """
        return self._revelation_penalties

    @revelation_penalties.setter
    def revelation_penalties(self, revelation_penalties):
        """Sets the revelation_penalties of this Block.

        List of revelation penalty operations, implicitly applied at the end of the block  # noqa: E501

        :param revelation_penalties: The revelation_penalties of this Block.  # noqa: E501
        :type: list[RevelationPenaltyOperation]
        """

        self._revelation_penalties = revelation_penalties

    @property
    def endorsing_rewards(self):
        """Gets the endorsing_rewards of this Block.  # noqa: E501

        List of endorsing rewards, implicitly applied at the end of the block  # noqa: E501

        :return: The endorsing_rewards of this Block.  # noqa: E501
        :rtype: list[EndorsingRewardOperation]
        """
        return self._endorsing_rewards

    @endorsing_rewards.setter
    def endorsing_rewards(self, endorsing_rewards):
        """Sets the endorsing_rewards of this Block.

        List of endorsing rewards, implicitly applied at the end of the block  # noqa: E501

        :param endorsing_rewards: The endorsing_rewards of this Block.  # noqa: E501
        :type: list[EndorsingRewardOperation]
        """

        self._endorsing_rewards = endorsing_rewards

    @property
    def quote(self):
        """Gets the quote of this Block.  # noqa: E501

        Injected historical quote at the time of block  # noqa: E501

        :return: The quote of this Block.  # noqa: E501
        :rtype: OneOfBlockQuote
        """
        return self._quote

    @quote.setter
    def quote(self, quote):
        """Sets the quote of this Block.

        Injected historical quote at the time of block  # noqa: E501

        :param quote: The quote of this Block.  # noqa: E501
        :type: OneOfBlockQuote
        """

        self._quote = quote

    @property
    def priority(self):
        """Gets the priority of this Block.  # noqa: E501

        [DEPRECATED]  # noqa: E501

        :return: The priority of this Block.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this Block.

        [DEPRECATED]  # noqa: E501

        :param priority: The priority of this Block.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def baker(self):
        """Gets the baker of this Block.  # noqa: E501

        [DEPRECATED]  # noqa: E501

        :return: The baker of this Block.  # noqa: E501
        :rtype: OneOfBlockBaker
        """
        return self._baker

    @baker.setter
    def baker(self, baker):
        """Sets the baker of this Block.

        [DEPRECATED]  # noqa: E501

        :param baker: The baker of this Block.  # noqa: E501
        :type: OneOfBlockBaker
        """

        self._baker = baker

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Block, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Block):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
