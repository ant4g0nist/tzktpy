# coding: utf-8

"""
    TzKT API

    # Introduction  TzKT Explorer provides free REST API and WebSocket API for accessing detailed Tezos blockchain data and helps developers build more services and applications on top of Tezos. TzKT is an open-source project, so you can easily clone and build it and use it as a self-hosted service to avoid any risks of depending on third-party services.  TzKT API is available for the following Tezos networks with the following base URLs:  - Mainnet: `https://api.tzkt.io/` or `https://api.mainnet.tzkt.io/` ([view docs](https://api.tzkt.io))  - Hangzhounet: `https://api.hangzhounet.tzkt.io/` ([view docs](https://api.hangzhounet.tzkt.io)) - Ithacanet: `https://api.ithacanet.tzkt.io/` ([view docs](https://api.ithacanet.tzkt.io))  We also provide a staging environment for testing newest features and pre-updating client applications before deploying to production:  - Mainnet staging: `https://staging.api.tzkt.io/` or `https://staging.api.mainnet.tzkt.io/` ([view docs](https://staging.api.tzkt.io))  Feel free to contact us if you have any questions or feature requests. Your feedback really helps us make TzKT better!  - Discord: https://discord.gg/aG8XKuwsQd - Telegram: https://t.me/baking_bad_chat - Slack: https://tezos-dev.slack.com/archives/CV5NX7F2L - Twitter: https://twitter.com/TezosBakingBad - Email: hello@baking-bad.org  And don't forget to star TzKT project [on GitHub](https://github.com/baking-bad/tzkt) ;)  # Terms of Use  TzKT API is free for everyone and for both commercial and non-commercial usage.  If your application or service uses the TzKT API in any forms: directly on frontend or indirectly on backend, you must mention that fact on your website or application by placing the label **\"Powered by TzKT API\"** or **\"Built with TzKT API\"** with a direct link to [tzkt.io](https://tzkt.io).   # Rate Limits  There will be no rate limits as long as our servers can handle the load without additional infrastructure costs. However, any apparent abuse will be prevented by setting targeted rate limits.  Check out [Tezos Explorer API Best Practices](https://baking-bad.org/blog/tag/TzKT/) and in particular [how to optimize requests count](https://baking-bad.org/blog/2020/07/29/tezos-explorer-api-tzkt-how-often-to-make-requests/).  ---   # noqa: E501

    OpenAPI spec version: v1.8.3
    Contact: hello@baking-bad.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Constant(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'value': 'object',
        'size': 'int',
        'refs': 'int',
        'creator': 'OneOfConstantCreator',
        'creation_level': 'int',
        'creation_time': 'datetime',
        'metadata': 'OneOfConstantMetadata'
    }

    attribute_map = {
        'address': 'address',
        'value': 'value',
        'size': 'size',
        'refs': 'refs',
        'creator': 'creator',
        'creation_level': 'creationLevel',
        'creation_time': 'creationTime',
        'metadata': 'metadata'
    }

    def __init__(self, address=None, value=None, size=None, refs=None, creator=None, creation_level=None, creation_time=None, metadata=None):  # noqa: E501
        """Constant - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._value = None
        self._size = None
        self._refs = None
        self._creator = None
        self._creation_level = None
        self._creation_time = None
        self._metadata = None
        self.discriminator = None
        if address is not None:
            self.address = address
        if value is not None:
            self.value = value
        if size is not None:
            self.size = size
        if refs is not None:
            self.refs = refs
        if creator is not None:
            self.creator = creator
        if creation_level is not None:
            self.creation_level = creation_level
        if creation_time is not None:
            self.creation_time = creation_time
        if metadata is not None:
            self.metadata = metadata

    @property
    def address(self):
        """Gets the address of this Constant.  # noqa: E501

        Global address (expression hash)  # noqa: E501

        :return: The address of this Constant.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Constant.

        Global address (expression hash)  # noqa: E501

        :param address: The address of this Constant.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def value(self):
        """Gets the value of this Constant.  # noqa: E501

        Constant value (either micheline, michelson or bytes, depending on the `format` parameter)  # noqa: E501

        :return: The value of this Constant.  # noqa: E501
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Constant.

        Constant value (either micheline, michelson or bytes, depending on the `format` parameter)  # noqa: E501

        :param value: The value of this Constant.  # noqa: E501
        :type: object
        """

        self._value = value

    @property
    def size(self):
        """Gets the size of this Constant.  # noqa: E501

        Constant size in bytes  # noqa: E501

        :return: The size of this Constant.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Constant.

        Constant size in bytes  # noqa: E501

        :param size: The size of this Constant.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def refs(self):
        """Gets the refs of this Constant.  # noqa: E501

        Number of contracts referencing this constant  # noqa: E501

        :return: The refs of this Constant.  # noqa: E501
        :rtype: int
        """
        return self._refs

    @refs.setter
    def refs(self, refs):
        """Sets the refs of this Constant.

        Number of contracts referencing this constant  # noqa: E501

        :param refs: The refs of this Constant.  # noqa: E501
        :type: int
        """

        self._refs = refs

    @property
    def creator(self):
        """Gets the creator of this Constant.  # noqa: E501

        Account registered this constant  # noqa: E501

        :return: The creator of this Constant.  # noqa: E501
        :rtype: OneOfConstantCreator
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this Constant.

        Account registered this constant  # noqa: E501

        :param creator: The creator of this Constant.  # noqa: E501
        :type: OneOfConstantCreator
        """

        self._creator = creator

    @property
    def creation_level(self):
        """Gets the creation_level of this Constant.  # noqa: E501

        Level of the first block baked with this software  # noqa: E501

        :return: The creation_level of this Constant.  # noqa: E501
        :rtype: int
        """
        return self._creation_level

    @creation_level.setter
    def creation_level(self, creation_level):
        """Sets the creation_level of this Constant.

        Level of the first block baked with this software  # noqa: E501

        :param creation_level: The creation_level of this Constant.  # noqa: E501
        :type: int
        """

        self._creation_level = creation_level

    @property
    def creation_time(self):
        """Gets the creation_time of this Constant.  # noqa: E501

        Datetime of the first block baked with this software  # noqa: E501

        :return: The creation_time of this Constant.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this Constant.

        Datetime of the first block baked with this software  # noqa: E501

        :param creation_time: The creation_time of this Constant.  # noqa: E501
        :type: datetime
        """

        self._creation_time = creation_time

    @property
    def metadata(self):
        """Gets the metadata of this Constant.  # noqa: E501

        Offchain metadata  # noqa: E501

        :return: The metadata of this Constant.  # noqa: E501
        :rtype: OneOfConstantMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Constant.

        Offchain metadata  # noqa: E501

        :param metadata: The metadata of this Constant.  # noqa: E501
        :type: OneOfConstantMetadata
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Constant, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Constant):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
