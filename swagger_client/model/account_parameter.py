# coding: utf-8

"""
    TzKT API

    # Introduction  TzKT Explorer provides free REST API and WebSocket API for accessing detailed Tezos blockchain data and helps developers build more services and applications on top of Tezos. TzKT is an open-source project, so you can easily clone and build it and use it as a self-hosted service to avoid any risks of depending on third-party services.  TzKT API is available for the following Tezos networks with the following base URLs:  - Mainnet: `https://api.tzkt.io/` or `https://api.mainnet.tzkt.io/` ([view docs](https://api.tzkt.io))  - Hangzhounet: `https://api.hangzhounet.tzkt.io/` ([view docs](https://api.hangzhounet.tzkt.io)) - Ithacanet: `https://api.ithacanet.tzkt.io/` ([view docs](https://api.ithacanet.tzkt.io))  We also provide a staging environment for testing newest features and pre-updating client applications before deploying to production:  - Mainnet staging: `https://staging.api.tzkt.io/` or `https://staging.api.mainnet.tzkt.io/` ([view docs](https://staging.api.tzkt.io))  Feel free to contact us if you have any questions or feature requests. Your feedback really helps us make TzKT better!  - Discord: https://discord.gg/aG8XKuwsQd - Telegram: https://t.me/baking_bad_chat - Slack: https://tezos-dev.slack.com/archives/CV5NX7F2L - Twitter: https://twitter.com/TezosBakingBad - Email: hello@baking-bad.org  And don't forget to star TzKT project [on GitHub](https://github.com/baking-bad/tzkt) ;)  # Terms of Use  TzKT API is free for everyone and for both commercial and non-commercial usage.  If your application or service uses the TzKT API in any forms: directly on frontend or indirectly on backend, you must mention that fact on your website or application by placing the label **\"Powered by TzKT API\"** or **\"Built with TzKT API\"** with a direct link to [tzkt.io](https://tzkt.io).   # Rate Limits  There will be no rate limits as long as our servers can handle the load without additional infrastructure costs. However, any apparent abuse will be prevented by setting targeted rate limits.  Check out [Tezos Explorer API Best Practices](https://baking-bad.org/blog/tag/TzKT/) and in particular [how to optimize requests count](https://baking-bad.org/blog/2020/07/29/tezos-explorer-api-tzkt-how-often-to-make-requests/).  ---   # noqa: E501

    OpenAPI spec version: v1.8.3
    Contact: hello@baking-bad.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountParameter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'eq': 'str',
        'ne': 'str',
        '_in': 'list[str]',
        'ni': 'list[str]',
        'eqx': 'str',
        'nex': 'str',
        'null': 'bool',
        'in_has_null': 'bool',
        'ni_has_null': 'bool'
    }

    attribute_map = {
        'eq': 'eq',
        'ne': 'ne',
        '_in': 'in',
        'ni': 'ni',
        'eqx': 'eqx',
        'nex': 'nex',
        'null': 'null',
        'in_has_null': 'inHasNull',
        'ni_has_null': 'niHasNull'
    }

    def __init__(self, eq=None, ne=None, _in=None, ni=None, eqx=None, nex=None, null=None, in_has_null=None, ni_has_null=None):  # noqa: E501
        """AccountParameter - a model defined in Swagger"""  # noqa: E501
        self._eq = None
        self._ne = None
        self.__in = None
        self._ni = None
        self._eqx = None
        self._nex = None
        self._null = None
        self._in_has_null = None
        self._ni_has_null = None
        self.discriminator = None
        if eq is not None:
            self.eq = eq
        if ne is not None:
            self.ne = ne
        if _in is not None:
            self._in = _in
        if ni is not None:
            self.ni = ni
        if eqx is not None:
            self.eqx = eqx
        if nex is not None:
            self.nex = nex
        if null is not None:
            self.null = null
        if in_has_null is not None:
            self.in_has_null = in_has_null
        if ni_has_null is not None:
            self.ni_has_null = ni_has_null

    @property
    def eq(self):
        """Gets the eq of this AccountParameter.  # noqa: E501

        **Equal** filter mode (optional, i.e. `param.eq=123` is the same as `param=123`). \\ Specify a `tz` or `KT` address to get items where the specified field is equal to the specified value.  Example: `?sender=tz1WnfXMPaNTBmH7DBPwqCWs9cPDJdkGBTZ8`.  # noqa: E501

        :return: The eq of this AccountParameter.  # noqa: E501
        :rtype: str
        """
        return self._eq

    @eq.setter
    def eq(self, eq):
        """Sets the eq of this AccountParameter.

        **Equal** filter mode (optional, i.e. `param.eq=123` is the same as `param=123`). \\ Specify a `tz` or `KT` address to get items where the specified field is equal to the specified value.  Example: `?sender=tz1WnfXMPaNTBmH7DBPwqCWs9cPDJdkGBTZ8`.  # noqa: E501

        :param eq: The eq of this AccountParameter.  # noqa: E501
        :type: str
        """

        self._eq = eq

    @property
    def ne(self):
        """Gets the ne of this AccountParameter.  # noqa: E501

        **Not equal** filter mode. \\ Specify a `tz` or `KT` address to get items where the specified field is not equal to the specified value.  Example: `?sender.ne=tz1WnfXMPaNTBmH7DBPwqCWs9cPDJdkGBTZ8`.  # noqa: E501

        :return: The ne of this AccountParameter.  # noqa: E501
        :rtype: str
        """
        return self._ne

    @ne.setter
    def ne(self, ne):
        """Sets the ne of this AccountParameter.

        **Not equal** filter mode. \\ Specify a `tz` or `KT` address to get items where the specified field is not equal to the specified value.  Example: `?sender.ne=tz1WnfXMPaNTBmH7DBPwqCWs9cPDJdkGBTZ8`.  # noqa: E501

        :param ne: The ne of this AccountParameter.  # noqa: E501
        :type: str
        """

        self._ne = ne

    @property
    def _in(self):
        """Gets the _in of this AccountParameter.  # noqa: E501

        **In list** (any of) filter mode. \\ Specify a comma-separated list of addresses to get items where the specified field is equal to one of the specified values.  Example: `?sender.in=tz1WnfXMPaNTBWnfXMPaNTBWnfXMPaNTBNTB,tz1SiPXX4MYGNJNDSiPXX4MYGNJNDSiPXX4M`.  # noqa: E501

        :return: The _in of this AccountParameter.  # noqa: E501
        :rtype: list[str]
        """
        return self.__in

    @_in.setter
    def _in(self, _in):
        """Sets the _in of this AccountParameter.

        **In list** (any of) filter mode. \\ Specify a comma-separated list of addresses to get items where the specified field is equal to one of the specified values.  Example: `?sender.in=tz1WnfXMPaNTBWnfXMPaNTBWnfXMPaNTBNTB,tz1SiPXX4MYGNJNDSiPXX4MYGNJNDSiPXX4M`.  # noqa: E501

        :param _in: The _in of this AccountParameter.  # noqa: E501
        :type: list[str]
        """

        self.__in = _in

    @property
    def ni(self):
        """Gets the ni of this AccountParameter.  # noqa: E501

        **Not in list** (none of) filter mode. \\ Specify a comma-separated list of addresses to get items where the specified field is not equal to all the specified values.  Example: `?sender.ni=tz1WnfXMPaNTBWnfXMPaNTBWnfXMPaNTBNTB,tz1SiPXX4MYGNJNDSiPXX4MYGNJNDSiPXX4M`.  # noqa: E501

        :return: The ni of this AccountParameter.  # noqa: E501
        :rtype: list[str]
        """
        return self._ni

    @ni.setter
    def ni(self, ni):
        """Sets the ni of this AccountParameter.

        **Not in list** (none of) filter mode. \\ Specify a comma-separated list of addresses to get items where the specified field is not equal to all the specified values.  Example: `?sender.ni=tz1WnfXMPaNTBWnfXMPaNTBWnfXMPaNTBNTB,tz1SiPXX4MYGNJNDSiPXX4MYGNJNDSiPXX4M`.  # noqa: E501

        :param ni: The ni of this AccountParameter.  # noqa: E501
        :type: list[str]
        """

        self._ni = ni

    @property
    def eqx(self):
        """Gets the eqx of this AccountParameter.  # noqa: E501

        **Equal to another field** filter mode. \\ Specify a field name to get items where the specified fields are equal.  Example: `?sender.eqx=target`.  # noqa: E501

        :return: The eqx of this AccountParameter.  # noqa: E501
        :rtype: str
        """
        return self._eqx

    @eqx.setter
    def eqx(self, eqx):
        """Sets the eqx of this AccountParameter.

        **Equal to another field** filter mode. \\ Specify a field name to get items where the specified fields are equal.  Example: `?sender.eqx=target`.  # noqa: E501

        :param eqx: The eqx of this AccountParameter.  # noqa: E501
        :type: str
        """

        self._eqx = eqx

    @property
    def nex(self):
        """Gets the nex of this AccountParameter.  # noqa: E501

        **Not equal to another field** filter mode. \\ Specify a field name to get items where the specified fields are not equal.  Example: `?sender.nex=initiator`.  # noqa: E501

        :return: The nex of this AccountParameter.  # noqa: E501
        :rtype: str
        """
        return self._nex

    @nex.setter
    def nex(self, nex):
        """Sets the nex of this AccountParameter.

        **Not equal to another field** filter mode. \\ Specify a field name to get items where the specified fields are not equal.  Example: `?sender.nex=initiator`.  # noqa: E501

        :param nex: The nex of this AccountParameter.  # noqa: E501
        :type: str
        """

        self._nex = nex

    @property
    def null(self):
        """Gets the null of this AccountParameter.  # noqa: E501

        **Is null** filter mode. \\ Use this mode to get items where the specified field is null or not.  Example: `?initiator.null` or `?initiator.null=false`.  # noqa: E501

        :return: The null of this AccountParameter.  # noqa: E501
        :rtype: bool
        """
        return self._null

    @null.setter
    def null(self, null):
        """Sets the null of this AccountParameter.

        **Is null** filter mode. \\ Use this mode to get items where the specified field is null or not.  Example: `?initiator.null` or `?initiator.null=false`.  # noqa: E501

        :param null: The null of this AccountParameter.  # noqa: E501
        :type: bool
        """

        self._null = null

    @property
    def in_has_null(self):
        """Gets the in_has_null of this AccountParameter.  # noqa: E501


        :return: The in_has_null of this AccountParameter.  # noqa: E501
        :rtype: bool
        """
        return self._in_has_null

    @in_has_null.setter
    def in_has_null(self, in_has_null):
        """Sets the in_has_null of this AccountParameter.


        :param in_has_null: The in_has_null of this AccountParameter.  # noqa: E501
        :type: bool
        """

        self._in_has_null = in_has_null

    @property
    def ni_has_null(self):
        """Gets the ni_has_null of this AccountParameter.  # noqa: E501


        :return: The ni_has_null of this AccountParameter.  # noqa: E501
        :rtype: bool
        """
        return self._ni_has_null

    @ni_has_null.setter
    def ni_has_null(self, ni_has_null):
        """Sets the ni_has_null of this AccountParameter.


        :param ni_has_null: The ni_has_null of this AccountParameter.  # noqa: E501
        :type: bool
        """

        self._ni_has_null = ni_has_null

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountParameter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountParameter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
