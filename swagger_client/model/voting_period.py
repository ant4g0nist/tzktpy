# coding: utf-8

"""
    TzKT API

    # Introduction  TzKT Explorer provides free REST API and WebSocket API for accessing detailed Tezos blockchain data and helps developers build more services and applications on top of Tezos. TzKT is an open-source project, so you can easily clone and build it and use it as a self-hosted service to avoid any risks of depending on third-party services.  TzKT API is available for the following Tezos networks with the following base URLs:  - Mainnet: `https://api.tzkt.io/` or `https://api.mainnet.tzkt.io/` ([view docs](https://api.tzkt.io))  - Hangzhounet: `https://api.hangzhounet.tzkt.io/` ([view docs](https://api.hangzhounet.tzkt.io)) - Ithacanet: `https://api.ithacanet.tzkt.io/` ([view docs](https://api.ithacanet.tzkt.io))  We also provide a staging environment for testing newest features and pre-updating client applications before deploying to production:  - Mainnet staging: `https://staging.api.tzkt.io/` or `https://staging.api.mainnet.tzkt.io/` ([view docs](https://staging.api.tzkt.io))  Feel free to contact us if you have any questions or feature requests. Your feedback really helps us make TzKT better!  - Discord: https://discord.gg/aG8XKuwsQd - Telegram: https://t.me/baking_bad_chat - Slack: https://tezos-dev.slack.com/archives/CV5NX7F2L - Twitter: https://twitter.com/TezosBakingBad - Email: hello@baking-bad.org  And don't forget to star TzKT project [on GitHub](https://github.com/baking-bad/tzkt) ;)  # Terms of Use  TzKT API is free for everyone and for both commercial and non-commercial usage.  If your application or service uses the TzKT API in any forms: directly on frontend or indirectly on backend, you must mention that fact on your website or application by placing the label **\"Powered by TzKT API\"** or **\"Built with TzKT API\"** with a direct link to [tzkt.io](https://tzkt.io).   # Rate Limits  There will be no rate limits as long as our servers can handle the load without additional infrastructure costs. However, any apparent abuse will be prevented by setting targeted rate limits.  Check out [Tezos Explorer API Best Practices](https://baking-bad.org/blog/tag/TzKT/) and in particular [how to optimize requests count](https://baking-bad.org/blog/2020/07/29/tezos-explorer-api-tzkt-how-often-to-make-requests/).  ---   # noqa: E501

    OpenAPI spec version: v1.8.3
    Contact: hello@baking-bad.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VotingPeriod(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'index': 'int',
        'epoch': 'int',
        'first_level': 'int',
        'start_time': 'datetime',
        'last_level': 'int',
        'end_time': 'datetime',
        'kind': 'str',
        'status': 'str',
        'total_bakers': 'int',
        'total_rolls': 'int',
        'upvotes_quorum': 'float',
        'proposals_count': 'int',
        'top_upvotes': 'int',
        'top_rolls': 'int',
        'ballots_quorum': 'float',
        'supermajority': 'float',
        'yay_ballots': 'int',
        'yay_rolls': 'int',
        'nay_ballots': 'int',
        'nay_rolls': 'int',
        'pass_ballots': 'int',
        'pass_rolls': 'int'
    }

    attribute_map = {
        'index': 'index',
        'epoch': 'epoch',
        'first_level': 'firstLevel',
        'start_time': 'startTime',
        'last_level': 'lastLevel',
        'end_time': 'endTime',
        'kind': 'kind',
        'status': 'status',
        'total_bakers': 'totalBakers',
        'total_rolls': 'totalRolls',
        'upvotes_quorum': 'upvotesQuorum',
        'proposals_count': 'proposalsCount',
        'top_upvotes': 'topUpvotes',
        'top_rolls': 'topRolls',
        'ballots_quorum': 'ballotsQuorum',
        'supermajority': 'supermajority',
        'yay_ballots': 'yayBallots',
        'yay_rolls': 'yayRolls',
        'nay_ballots': 'nayBallots',
        'nay_rolls': 'nayRolls',
        'pass_ballots': 'passBallots',
        'pass_rolls': 'passRolls'
    }

    def __init__(self, index=None, epoch=None, first_level=None, start_time=None, last_level=None, end_time=None, kind=None, status=None, total_bakers=None, total_rolls=None, upvotes_quorum=None, proposals_count=None, top_upvotes=None, top_rolls=None, ballots_quorum=None, supermajority=None, yay_ballots=None, yay_rolls=None, nay_ballots=None, nay_rolls=None, pass_ballots=None, pass_rolls=None):  # noqa: E501
        """VotingPeriod - a model defined in Swagger"""  # noqa: E501
        self._index = None
        self._epoch = None
        self._first_level = None
        self._start_time = None
        self._last_level = None
        self._end_time = None
        self._kind = None
        self._status = None
        self._total_bakers = None
        self._total_rolls = None
        self._upvotes_quorum = None
        self._proposals_count = None
        self._top_upvotes = None
        self._top_rolls = None
        self._ballots_quorum = None
        self._supermajority = None
        self._yay_ballots = None
        self._yay_rolls = None
        self._nay_ballots = None
        self._nay_rolls = None
        self._pass_ballots = None
        self._pass_rolls = None
        self.discriminator = None
        if index is not None:
            self.index = index
        if epoch is not None:
            self.epoch = epoch
        if first_level is not None:
            self.first_level = first_level
        if start_time is not None:
            self.start_time = start_time
        if last_level is not None:
            self.last_level = last_level
        if end_time is not None:
            self.end_time = end_time
        if kind is not None:
            self.kind = kind
        if status is not None:
            self.status = status
        if total_bakers is not None:
            self.total_bakers = total_bakers
        if total_rolls is not None:
            self.total_rolls = total_rolls
        if upvotes_quorum is not None:
            self.upvotes_quorum = upvotes_quorum
        if proposals_count is not None:
            self.proposals_count = proposals_count
        if top_upvotes is not None:
            self.top_upvotes = top_upvotes
        if top_rolls is not None:
            self.top_rolls = top_rolls
        if ballots_quorum is not None:
            self.ballots_quorum = ballots_quorum
        if supermajority is not None:
            self.supermajority = supermajority
        if yay_ballots is not None:
            self.yay_ballots = yay_ballots
        if yay_rolls is not None:
            self.yay_rolls = yay_rolls
        if nay_ballots is not None:
            self.nay_ballots = nay_ballots
        if nay_rolls is not None:
            self.nay_rolls = nay_rolls
        if pass_ballots is not None:
            self.pass_ballots = pass_ballots
        if pass_rolls is not None:
            self.pass_rolls = pass_rolls

    @property
    def index(self):
        """Gets the index of this VotingPeriod.  # noqa: E501

        Index of the voting period, starting from zero  # noqa: E501

        :return: The index of this VotingPeriod.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this VotingPeriod.

        Index of the voting period, starting from zero  # noqa: E501

        :param index: The index of this VotingPeriod.  # noqa: E501
        :type: int
        """

        self._index = index

    @property
    def epoch(self):
        """Gets the epoch of this VotingPeriod.  # noqa: E501

        Index of the voting epoch, starting from zero  # noqa: E501

        :return: The epoch of this VotingPeriod.  # noqa: E501
        :rtype: int
        """
        return self._epoch

    @epoch.setter
    def epoch(self, epoch):
        """Sets the epoch of this VotingPeriod.

        Index of the voting epoch, starting from zero  # noqa: E501

        :param epoch: The epoch of this VotingPeriod.  # noqa: E501
        :type: int
        """

        self._epoch = epoch

    @property
    def first_level(self):
        """Gets the first_level of this VotingPeriod.  # noqa: E501

        The height of the block in which the period starts  # noqa: E501

        :return: The first_level of this VotingPeriod.  # noqa: E501
        :rtype: int
        """
        return self._first_level

    @first_level.setter
    def first_level(self, first_level):
        """Sets the first_level of this VotingPeriod.

        The height of the block in which the period starts  # noqa: E501

        :param first_level: The first_level of this VotingPeriod.  # noqa: E501
        :type: int
        """

        self._first_level = first_level

    @property
    def start_time(self):
        """Gets the start_time of this VotingPeriod.  # noqa: E501

        The timestamp of the block in which the period starts  # noqa: E501

        :return: The start_time of this VotingPeriod.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this VotingPeriod.

        The timestamp of the block in which the period starts  # noqa: E501

        :param start_time: The start_time of this VotingPeriod.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def last_level(self):
        """Gets the last_level of this VotingPeriod.  # noqa: E501

        The height of the block in which the period ends  # noqa: E501

        :return: The last_level of this VotingPeriod.  # noqa: E501
        :rtype: int
        """
        return self._last_level

    @last_level.setter
    def last_level(self, last_level):
        """Sets the last_level of this VotingPeriod.

        The height of the block in which the period ends  # noqa: E501

        :param last_level: The last_level of this VotingPeriod.  # noqa: E501
        :type: int
        """

        self._last_level = last_level

    @property
    def end_time(self):
        """Gets the end_time of this VotingPeriod.  # noqa: E501

        The timestamp of the block in which the period ends  # noqa: E501

        :return: The end_time of this VotingPeriod.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this VotingPeriod.

        The timestamp of the block in which the period ends  # noqa: E501

        :param end_time: The end_time of this VotingPeriod.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def kind(self):
        """Gets the kind of this VotingPeriod.  # noqa: E501

        Kind of the voting period: `proposal` - delegates can submit protocol amendment proposals using the proposal operation `exploration` -  bakers (delegates) may vote on the top-ranked proposal from the previous Proposal Period using the ballot operation `testing` - If the proposal is approved in the Exploration Period, the testing (or 'cooldown') period begins and bakers start testing the new protocol `promotion` - delegates can cast one vote to promote or not the tested proposal using the ballot operation `adoption` - after the proposal is actually accepted, the ecosystem has some time to prepare to the upgrade Learn more: https://tezos.gitlab.io/whitedoc/voting.html  # noqa: E501

        :return: The kind of this VotingPeriod.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this VotingPeriod.

        Kind of the voting period: `proposal` - delegates can submit protocol amendment proposals using the proposal operation `exploration` -  bakers (delegates) may vote on the top-ranked proposal from the previous Proposal Period using the ballot operation `testing` - If the proposal is approved in the Exploration Period, the testing (or 'cooldown') period begins and bakers start testing the new protocol `promotion` - delegates can cast one vote to promote or not the tested proposal using the ballot operation `adoption` - after the proposal is actually accepted, the ecosystem has some time to prepare to the upgrade Learn more: https://tezos.gitlab.io/whitedoc/voting.html  # noqa: E501

        :param kind: The kind of this VotingPeriod.  # noqa: E501
        :type: str
        """

        self._kind = kind

    @property
    def status(self):
        """Gets the status of this VotingPeriod.  # noqa: E501

        Status of the voting period: `active` - means that the voting period is in progress `no_proposals` - means that there were no proposals during the voting period `no_quorum` - means that there was a voting but the quorum was not reached `no_supermajority` - means that there was a voting but the supermajority was not reached `success` - means that the period was finished with positive voting result  # noqa: E501

        :return: The status of this VotingPeriod.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this VotingPeriod.

        Status of the voting period: `active` - means that the voting period is in progress `no_proposals` - means that there were no proposals during the voting period `no_quorum` - means that there was a voting but the quorum was not reached `no_supermajority` - means that there was a voting but the supermajority was not reached `success` - means that the period was finished with positive voting result  # noqa: E501

        :param status: The status of this VotingPeriod.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def total_bakers(self):
        """Gets the total_bakers of this VotingPeriod.  # noqa: E501

        The number of bakers on the voters list  # noqa: E501

        :return: The total_bakers of this VotingPeriod.  # noqa: E501
        :rtype: int
        """
        return self._total_bakers

    @total_bakers.setter
    def total_bakers(self, total_bakers):
        """Sets the total_bakers of this VotingPeriod.

        The number of bakers on the voters list  # noqa: E501

        :param total_bakers: The total_bakers of this VotingPeriod.  # noqa: E501
        :type: int
        """

        self._total_bakers = total_bakers

    @property
    def total_rolls(self):
        """Gets the total_rolls of this VotingPeriod.  # noqa: E501

        The number of rolls of bakers on the voters list  # noqa: E501

        :return: The total_rolls of this VotingPeriod.  # noqa: E501
        :rtype: int
        """
        return self._total_rolls

    @total_rolls.setter
    def total_rolls(self, total_rolls):
        """Sets the total_rolls of this VotingPeriod.

        The number of rolls of bakers on the voters list  # noqa: E501

        :param total_rolls: The total_rolls of this VotingPeriod.  # noqa: E501
        :type: int
        """

        self._total_rolls = total_rolls

    @property
    def upvotes_quorum(self):
        """Gets the upvotes_quorum of this VotingPeriod.  # noqa: E501

        Upvotes quorum percentage (only for proposal period)  # noqa: E501

        :return: The upvotes_quorum of this VotingPeriod.  # noqa: E501
        :rtype: float
        """
        return self._upvotes_quorum

    @upvotes_quorum.setter
    def upvotes_quorum(self, upvotes_quorum):
        """Sets the upvotes_quorum of this VotingPeriod.

        Upvotes quorum percentage (only for proposal period)  # noqa: E501

        :param upvotes_quorum: The upvotes_quorum of this VotingPeriod.  # noqa: E501
        :type: float
        """

        self._upvotes_quorum = upvotes_quorum

    @property
    def proposals_count(self):
        """Gets the proposals_count of this VotingPeriod.  # noqa: E501

        The number of proposals injected during the voting period (only for proposal period)  # noqa: E501

        :return: The proposals_count of this VotingPeriod.  # noqa: E501
        :rtype: int
        """
        return self._proposals_count

    @proposals_count.setter
    def proposals_count(self, proposals_count):
        """Sets the proposals_count of this VotingPeriod.

        The number of proposals injected during the voting period (only for proposal period)  # noqa: E501

        :param proposals_count: The proposals_count of this VotingPeriod.  # noqa: E501
        :type: int
        """

        self._proposals_count = proposals_count

    @property
    def top_upvotes(self):
        """Gets the top_upvotes of this VotingPeriod.  # noqa: E501

        This is how many upvotes (proposal operations) the most upvoted proposal has (only for proposal period)  # noqa: E501

        :return: The top_upvotes of this VotingPeriod.  # noqa: E501
        :rtype: int
        """
        return self._top_upvotes

    @top_upvotes.setter
    def top_upvotes(self, top_upvotes):
        """Sets the top_upvotes of this VotingPeriod.

        This is how many upvotes (proposal operations) the most upvoted proposal has (only for proposal period)  # noqa: E501

        :param top_upvotes: The top_upvotes of this VotingPeriod.  # noqa: E501
        :type: int
        """

        self._top_upvotes = top_upvotes

    @property
    def top_rolls(self):
        """Gets the top_rolls of this VotingPeriod.  # noqa: E501

        This is how many rolls the most upvoted proposal has (only for proposal period)  # noqa: E501

        :return: The top_rolls of this VotingPeriod.  # noqa: E501
        :rtype: int
        """
        return self._top_rolls

    @top_rolls.setter
    def top_rolls(self, top_rolls):
        """Sets the top_rolls of this VotingPeriod.

        This is how many rolls the most upvoted proposal has (only for proposal period)  # noqa: E501

        :param top_rolls: The top_rolls of this VotingPeriod.  # noqa: E501
        :type: int
        """

        self._top_rolls = top_rolls

    @property
    def ballots_quorum(self):
        """Gets the ballots_quorum of this VotingPeriod.  # noqa: E501

        Ballots quorum percentage (only for exploration and promotion periods)  # noqa: E501

        :return: The ballots_quorum of this VotingPeriod.  # noqa: E501
        :rtype: float
        """
        return self._ballots_quorum

    @ballots_quorum.setter
    def ballots_quorum(self, ballots_quorum):
        """Sets the ballots_quorum of this VotingPeriod.

        Ballots quorum percentage (only for exploration and promotion periods)  # noqa: E501

        :param ballots_quorum: The ballots_quorum of this VotingPeriod.  # noqa: E501
        :type: float
        """

        self._ballots_quorum = ballots_quorum

    @property
    def supermajority(self):
        """Gets the supermajority of this VotingPeriod.  # noqa: E501

        Supermajority percentage (only for exploration and promotion periods)  # noqa: E501

        :return: The supermajority of this VotingPeriod.  # noqa: E501
        :rtype: float
        """
        return self._supermajority

    @supermajority.setter
    def supermajority(self, supermajority):
        """Sets the supermajority of this VotingPeriod.

        Supermajority percentage (only for exploration and promotion periods)  # noqa: E501

        :param supermajority: The supermajority of this VotingPeriod.  # noqa: E501
        :type: float
        """

        self._supermajority = supermajority

    @property
    def yay_ballots(self):
        """Gets the yay_ballots of this VotingPeriod.  # noqa: E501

        The number of the ballots with \"yay\" vote (only for exploration and promotion periods)  # noqa: E501

        :return: The yay_ballots of this VotingPeriod.  # noqa: E501
        :rtype: int
        """
        return self._yay_ballots

    @yay_ballots.setter
    def yay_ballots(self, yay_ballots):
        """Sets the yay_ballots of this VotingPeriod.

        The number of the ballots with \"yay\" vote (only for exploration and promotion periods)  # noqa: E501

        :param yay_ballots: The yay_ballots of this VotingPeriod.  # noqa: E501
        :type: int
        """

        self._yay_ballots = yay_ballots

    @property
    def yay_rolls(self):
        """Gets the yay_rolls of this VotingPeriod.  # noqa: E501

        Total rolls of the ballots with \"yay\" vote (only for exploration and promotion periods)  # noqa: E501

        :return: The yay_rolls of this VotingPeriod.  # noqa: E501
        :rtype: int
        """
        return self._yay_rolls

    @yay_rolls.setter
    def yay_rolls(self, yay_rolls):
        """Sets the yay_rolls of this VotingPeriod.

        Total rolls of the ballots with \"yay\" vote (only for exploration and promotion periods)  # noqa: E501

        :param yay_rolls: The yay_rolls of this VotingPeriod.  # noqa: E501
        :type: int
        """

        self._yay_rolls = yay_rolls

    @property
    def nay_ballots(self):
        """Gets the nay_ballots of this VotingPeriod.  # noqa: E501

        The number of the ballots with \"nay\" vote (only for exploration and promotion periods)  # noqa: E501

        :return: The nay_ballots of this VotingPeriod.  # noqa: E501
        :rtype: int
        """
        return self._nay_ballots

    @nay_ballots.setter
    def nay_ballots(self, nay_ballots):
        """Sets the nay_ballots of this VotingPeriod.

        The number of the ballots with \"nay\" vote (only for exploration and promotion periods)  # noqa: E501

        :param nay_ballots: The nay_ballots of this VotingPeriod.  # noqa: E501
        :type: int
        """

        self._nay_ballots = nay_ballots

    @property
    def nay_rolls(self):
        """Gets the nay_rolls of this VotingPeriod.  # noqa: E501

        Total rolls of the ballots with \"nay\" vote (only for exploration and promotion periods)  # noqa: E501

        :return: The nay_rolls of this VotingPeriod.  # noqa: E501
        :rtype: int
        """
        return self._nay_rolls

    @nay_rolls.setter
    def nay_rolls(self, nay_rolls):
        """Sets the nay_rolls of this VotingPeriod.

        Total rolls of the ballots with \"nay\" vote (only for exploration and promotion periods)  # noqa: E501

        :param nay_rolls: The nay_rolls of this VotingPeriod.  # noqa: E501
        :type: int
        """

        self._nay_rolls = nay_rolls

    @property
    def pass_ballots(self):
        """Gets the pass_ballots of this VotingPeriod.  # noqa: E501

        The number of the ballots with \"pass\" vote (only for exploration and promotion periods)  # noqa: E501

        :return: The pass_ballots of this VotingPeriod.  # noqa: E501
        :rtype: int
        """
        return self._pass_ballots

    @pass_ballots.setter
    def pass_ballots(self, pass_ballots):
        """Sets the pass_ballots of this VotingPeriod.

        The number of the ballots with \"pass\" vote (only for exploration and promotion periods)  # noqa: E501

        :param pass_ballots: The pass_ballots of this VotingPeriod.  # noqa: E501
        :type: int
        """

        self._pass_ballots = pass_ballots

    @property
    def pass_rolls(self):
        """Gets the pass_rolls of this VotingPeriod.  # noqa: E501

        Total rolls of the ballots with \"pass\" vote (only for exploration and promotion periods)  # noqa: E501

        :return: The pass_rolls of this VotingPeriod.  # noqa: E501
        :rtype: int
        """
        return self._pass_rolls

    @pass_rolls.setter
    def pass_rolls(self, pass_rolls):
        """Sets the pass_rolls of this VotingPeriod.

        Total rolls of the ballots with \"pass\" vote (only for exploration and promotion periods)  # noqa: E501

        :param pass_rolls: The pass_rolls of this VotingPeriod.  # noqa: E501
        :type: int
        """

        self._pass_rolls = pass_rolls

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VotingPeriod, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VotingPeriod):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
